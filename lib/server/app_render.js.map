{"version":3,"sources":["../../src/server/app_render.jsx"],"names":["ctx","locales","resolvedAssets","state","requestTimer","startTimer","store","userPreferences","session","user_prefs","JSON","parse","err","console","error","uid","locale","getLocaleFromHeader","substring","supportedLocales","localeIsSupported","find","l","login_challenge","secureRandom","randomBuffer","toString","csrf","new_visit","$STM_Config","app","pinnedPostsPromise","offchain","config","pinned_posts","arec","models","AccountRecoveryRequest","findOne","attributes","where","id","status","account_recovery_record","recover_account","account_name","googleAds","shouldSeeAds","adsEnabled","enabled","google_ad_enabled","test","google_ad_test","client","google_ad_client","adSlots","google_ad_slots","initial_state","viewMode","request","search","env","process","NODE_ENV","url","ErrorPage","body","title","statusCode","meta","assets","assets_filename","ROOT","require","cache","resolve","props","redirect","pathname","stopTimer","appRender","path","join","__dirname","DB_RECONNECT_TIMEOUT","dbStatus","ok","module","exports"],"mappings":"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","file":"app_render.js","sourcesContent":["import React from 'react';\nimport config from 'config';\nimport { renderToString } from 'react-dom/server';\nimport { VIEW_MODE_WHISTLE, PARAM_VIEW_MODE } from '../shared/constants';\nimport ServerHTML from './server-html';\nimport { serverRender } from '../shared/UniversalRender';\nimport models from 'db/models';\nimport secureRandom from 'secure-random';\nimport ErrorPage from 'server/server-error';\nimport { determineViewMode } from '../app/utils/Links';\nimport { getSupportedLocales } from './utils/misc';\n\nconst path = require('path');\nconst ROOT = path.join(__dirname, '../..');\nconst DB_RECONNECT_TIMEOUT =\n    process.env.NODE_ENV === 'development' ? 1000 * 60 * 60 : 1000 * 60 * 10;\n\nconst supportedLocales = getSupportedLocales();\n\nasync function appRender(ctx, locales = false, resolvedAssets = false) {\n    ctx.state.requestTimer.startTimer('appRender_ms');\n    const store = {};\n    // This is the part of SSR where we make session-specific changes:\n    try {\n        let userPreferences = {};\n        if (ctx.session.user_prefs) {\n            try {\n                userPreferences = JSON.parse(ctx.session.user_prefs);\n            } catch (err) {\n                console.error(\n                    'cannot parse user preferences:',\n                    ctx.session.uid,\n                    err\n                );\n            }\n        }\n        if (!userPreferences.locale) {\n            let locale = ctx.getLocaleFromHeader();\n            if (locale) locale = locale.substring(0, 2);\n            const supportedLocales = locales ? locales : getSupportedLocales();\n            const localeIsSupported = supportedLocales.find(l => l === locale);\n            if (!localeIsSupported) locale = 'en';\n            userPreferences.locale = locale;\n        }\n        let login_challenge = ctx.session.login_challenge;\n        if (!login_challenge) {\n            login_challenge = secureRandom.randomBuffer(16).toString('hex');\n            ctx.session.login_challenge = login_challenge;\n        }\n        const offchain = {\n            csrf: ctx.csrf,\n            new_visit: ctx.session.new_visit,\n            config: $STM_Config,\n            pinned_posts: await ctx.app.pinnedPostsPromise,\n            login_challenge,\n        };\n        if (ctx.session.arec) {\n            const account_recovery_record = await models.AccountRecoveryRequest.findOne(\n                {\n                    attributes: ['id', 'account_name', 'status', 'provider'],\n                    where: { id: ctx.session.arec, status: 'confirmed' },\n                }\n            );\n            if (account_recovery_record) {\n                offchain.recover_account = account_recovery_record.account_name;\n            }\n        }\n\n        const googleAds = {\n            shouldSeeAds: !!ctx.adsEnabled,\n            enabled: !!config.google_ad_enabled,\n            test: !!config.google_ad_test,\n            client: config.google_ad_client,\n            adSlots: config.google_ad_slots,\n        };\n        // ... and that's the end of user-session-related SSR\n        const initial_state = {\n            app: {\n                viewMode: determineViewMode(ctx.request.search),\n                googleAds: googleAds,\n                env: process.env.NODE_ENV,\n            },\n        };\n\n        const { body, title, statusCode, meta } = await serverRender(\n            ctx.request.url,\n            initial_state,\n            ErrorPage,\n            userPreferences,\n            offchain,\n            ctx.state.requestTimer\n        );\n\n        let assets;\n        // If resolvedAssets argument parameter is falsey we infer that we are in\n        // development mode and therefore resolve the assets on each render.\n        if (!resolvedAssets) {\n            // Assets name are found in `webpack-stats` file\n            const assets_filename = ROOT + '/tmp/webpack-stats-dev.json';\n            assets = require(assets_filename);\n            delete require.cache[require.resolve(assets_filename)];\n        } else {\n            assets = resolvedAssets;\n        }\n        const shouldSeeAds = googleAds.shouldSeeAds;\n        const props = { body, assets, title, meta, shouldSeeAds };\n        ctx.status = statusCode;\n        ctx.body =\n            '<!DOCTYPE html>' + renderToString(<ServerHTML {...props} />);\n    } catch (err) {\n        // Render 500 error page from server\n        const { error, redirect } = err;\n        if (error) throw error;\n\n        // Handle component `onEnter` transition\n        if (redirect) {\n            const { pathname, search } = redirect;\n            ctx.redirect(pathname + search);\n        }\n\n        throw err;\n    }\n\n    ctx.state.requestTimer.stopTimer('appRender_ms');\n}\n\nappRender.dbStatus = { ok: true };\nmodule.exports = appRender;\n"]}