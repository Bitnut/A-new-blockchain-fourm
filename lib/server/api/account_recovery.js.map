{"version":3,"sources":["../../../src/server/api/account_recovery.js"],"names":["useAccountRecoveryApi","requestAccountRecovery","app","router","use","routes","koaBody","post","req","params","request","body","JSON","parse","csrf","console","log","session","uid","recover_account","account_name","status","attrs","remote_ip","models","AccountRecoveryRequest","create","id","arec","redirect","provider","get","code","throw","findOne","attributes","where","validation_code","order","owner_key","error","account_recovery_record","name","recovery_account","config","signing_key","new_owner_authority","old_owner_key","new_owner_key","account_to_recover","user","request_submitted_at","Date","update","toString","stack","message","contact_email","operations","broadcast","sendAsync","extensions"],"mappings":"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","file":"account_recovery.js","sourcesContent":["import koa_router from 'koa-router';\nimport koa_body from 'koa-body';\nimport models from 'db/models';\nimport config from 'config';\nimport { esc, escAttrs } from 'db/models';\nimport { getRemoteIp, rateLimitReq, checkCSRF } from 'server/utils/misc';\nimport { broadcast } from '@steemit/steem-js';\n\nexport default function useAccountRecoveryApi(app) {\n    const router = koa_router();\n    app.use(router.routes());\n    const koaBody = koa_body();\n\n    router.post('/initiate_account_recovery', koaBody, function*() {\n        if (rateLimitReq(this, this.req)) return;\n        let params = this.request.body;\n        params = typeof params === 'string' ? JSON.parse(params) : params;\n        if (!checkCSRF(this, params.csrf)) return;\n        console.log(\n            '-- /initiate_account_recovery -->',\n            this.session.uid,\n            params\n        );\n        this.session.recover_account = null;\n        if (!params.account_name) {\n            this.status = 500;\n            this.body = 'please provide account name';\n            return;\n        }\n        const attrs = { uid: this.session.uid, status: 'open', ...params };\n        attrs.remote_ip = getRemoteIp(this.req);\n        const request = yield models.AccountRecoveryRequest.create(\n            escAttrs(attrs)\n        );\n        console.log(\n            '-- /initiate_account_recovery request id -->',\n            this.session.uid,\n            request.id\n        );\n        this.session.arec = request.id;\n        this.redirect('/connect/' + params.provider);\n    });\n\n    router.get('/account_recovery_confirmation/:code', function*() {\n        if (rateLimitReq(this, this.req)) return;\n        const code = this.params.code;\n        if (!code) return this.throw('no confirmation code', 404);\n        const arec = yield models.AccountRecoveryRequest.findOne({\n            attributes: ['id', 'account_name', 'owner_key'],\n            where: { validation_code: esc(code) },\n            order: 'id desc',\n        });\n        if (arec) {\n            this.session.arec = arec.id;\n            console.log(\n                '-- /account_recovery_confirmation -->',\n                this.session.uid,\n                arec.id,\n                arec.account_name,\n                arec.owner_key\n            );\n            this.redirect('/recover_account_step_2');\n        } else {\n            console.log(\n                '-- /account_recovery_confirmation code not found -->',\n                this.session.uid,\n                code\n            );\n            this.throw('wrong confirmation code', 404);\n            this.session.arec = null;\n        }\n        this.body = code;\n    });\n\n    router.post('/api/v1/request_account_recovery', koaBody, function*() {\n        if (rateLimitReq(this, this.req)) return;\n        let params = this.request.body;\n        params = typeof params === 'string' ? JSON.parse(params) : params;\n        if (!checkCSRF(this, params.csrf)) return;\n        try {\n            if (!this.session.arec) {\n                console.log(\n                    '-- /request_account_recovery --> this.session.arec is empty',\n                    this.session.uid\n                );\n                this.body = JSON.stringify({ error: 'Unauthorized' });\n                this.status = 401;\n                return;\n            }\n\n            const account_recovery_record = yield models.AccountRecoveryRequest.findOne(\n                {\n                    attributes: ['id', 'account_name', 'provider', 'status'],\n                    where: { id: this.session.arec },\n                }\n            );\n\n            if (\n                !account_recovery_record ||\n                account_recovery_record.account_name !== params.name\n            ) {\n                console.log(\n                    '-- /request_account_recovery --> no arec found or wrong name',\n                    this.session.uid,\n                    params.name\n                );\n                this.body = JSON.stringify({ error: 'Unauthorized' });\n                this.status = 401;\n                return;\n            }\n\n            if (account_recovery_record.status !== 'confirmed') {\n                console.log(\n                    '-- /request_account_recovery --> no arec found or wrong name',\n                    this.session.uid,\n                    params.name\n                );\n                this.body = JSON.stringify({ error: 'Unauthorized' });\n                this.status = 401;\n                return;\n            }\n\n            const recovery_account = config.get('registrar.account');\n            const signing_key = config.get('registrar.signing_key');\n            const {\n                new_owner_authority,\n                old_owner_key,\n                new_owner_key,\n            } = params;\n\n            yield requestAccountRecovery({\n                signing_key,\n                account_to_recover: params.name,\n                recovery_account,\n                new_owner_authority,\n            });\n            console.log(\n                '-- /request_account_recovery completed -->',\n                this.session.uid,\n                this.session.user,\n                params.name,\n                old_owner_key,\n                new_owner_key\n            );\n\n            const attrs = {\n                old_owner_key: esc(old_owner_key),\n                new_owner_key: esc(new_owner_key),\n                request_submitted_at: new Date(),\n            };\n            account_recovery_record.update(attrs);\n\n            this.body = JSON.stringify({ status: 'ok' });\n        } catch (error) {\n            console.error(\n                'Error in /request_account_recovery api call',\n                this.session.uid,\n                this.session.user,\n                error.toString(),\n                error.stack\n            );\n            this.body = JSON.stringify({ error: error.message });\n            this.status = 500;\n        }\n    });\n\n    router.post(\n        '/api/v1/initiate_account_recovery_with_email',\n        koaBody,\n        function*() {\n            const params = this.request.body;\n            const { csrf, contact_email, account_name, owner_key } =\n                typeof params === 'string' ? JSON.parse(params) : params;\n            if (!checkCSRF(this, csrf)) return;\n            console.log(\n                '-- /initiate_account_recovery_with_email -->',\n                this.session.uid,\n                contact_email,\n                account_name,\n                owner_key\n            );\n            if (!account_name || !contact_email || !owner_key) {\n                this.body = JSON.stringify({ status: 'error' });\n                return;\n            }\n            const arec = yield models.AccountRecoveryRequest.findOne({\n                attributes: ['id'],\n                where: escAttrs({ account_name, contact_email }),\n            });\n            if (arec) {\n                this.body = JSON.stringify({ status: 'duplicate' });\n                return;\n            }\n            const attrs = {\n                uid: this.session.uid,\n                status: 'open',\n                contact_email,\n                account_name,\n                owner_key,\n                provider: 'email',\n            };\n            attrs.remote_ip = getRemoteIp(this.req);\n            const request = yield models.AccountRecoveryRequest.create(\n                escAttrs(attrs)\n            );\n            console.log(\n                '-- initiate_account_recovery_with_email  -->',\n                this.session.uid,\n                request.id,\n                account_name,\n                owner_key\n            );\n            this.body = JSON.stringify({ status: 'ok' });\n        }\n    );\n}\n\nfunction* requestAccountRecovery({\n    recovery_account,\n    account_to_recover,\n    new_owner_authority,\n    signing_key,\n}) {\n    const operations = [\n        [\n            'request_account_recovery',\n            {\n                recovery_account,\n                account_to_recover,\n                new_owner_authority,\n            },\n        ],\n    ];\n    yield broadcast.sendAsync({ extensions: [], operations }, [signing_key]);\n}\n"]}