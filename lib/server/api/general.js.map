{"version":3,"sources":["../../../src/server/api/general.js"],"names":["useGeneralApi","createAccount","ACCEPTED_TOS_TAG","mixpanel","config","get","Mixpanel","init","_stringval","v","logRequest","path","ctx","extra","d","ip","req","session","user","uid","a","account","forEach","nk","k","info","map","join","console","log","app","router","prefix","use","routes","koaBody","post","params","request","body","JSON","parse","remote_ip","csrf","user_id","models","Account","create","name","owner_key","active_key","posting_key","memo_key","referrer","r","created","catch","error","track","distinct_id","people","set","status","$STM_Config","disable_signups","User","findOne","attributes","where","id","account_status","Error","creation_hash","creationHash","hash","sha256","crypto","randomBytes","toString","update","order","same_ip_account","minutes","Date","now","created_at","sequelize","query","replacements","type","QueryTypes","SELECT","newCreationHash","signingKey","fee","creator","new_account_name","delegation","owner","active","posting","memo","account_attrs","existing_account","message","email","secret","process","env","CREATE_USER_SECRET","emailRegex","test","toLowerCase","Identity","provider","verified","identity","success","waiting_list","signatures","auth","save","logging","db_account","login_challenge","api","getAccountsAsync","chainAccount","bufSha","token","verify","sigHex","pubkey","weight","weight_threshold","sig","parseSig","public_key","PublicKey","fromString","verifyHash","key_auths","posting_pubkey","$ip","increment","csp_report","value","headers","x","y","data","sign_up_meta","payload","json","length","user_prefs","signedCallAsync","res","includes","tag","json_metadata","operations","account_auths","broadcast","sendAsync","extensions","Signature","fromHex","hexSig","e"],"mappings":";;;;;;;;;;;;;;;;;;;;;;kBAqDwBA,a;;AAlDxB;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;AAMA;;;;AACA;;;;AACA;;AACA;;;;sDAmoBUC,a,GAtpBV;;AAEA;;;AAmBA,IAAMC,mBAAmB,uBAAzB;;AAEA,IAAMC,WAAWC,iBAAOC,GAAP,CAAW,UAAX,IACXC,mBAASC,IAAT,CAAcH,iBAAOC,GAAP,CAAW,UAAX,CAAd,CADW,GAEX,IAFN;;AAIA,IAAMG,aAAa,SAAbA,UAAa;AAAA,WAAM,OAAOC,CAAP,KAAa,QAAb,GAAwBA,CAAxB,GAA4B,yBAAeA,CAAf,CAAlC;AAAA,CAAnB;AACA,SAASC,UAAT,CAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,KAA/B,EAAsC;AAClC,QAAIC,IAAI,EAAEC,IAAI,uBAAYH,IAAII,GAAhB,CAAN,EAAR;AACA,QAAIJ,IAAIK,OAAR,EAAiB;AACb,YAAIL,IAAIK,OAAJ,CAAYC,IAAhB,EAAsB;AAClBJ,cAAEI,IAAF,GAASN,IAAIK,OAAJ,CAAYC,IAArB;AACH;AACD,YAAIN,IAAIK,OAAJ,CAAYE,GAAhB,EAAqB;AACjBL,cAAEK,GAAF,GAAQP,IAAIK,OAAJ,CAAYE,GAApB;AACH;AACD,YAAIP,IAAIK,OAAJ,CAAYG,CAAhB,EAAmB;AACfN,cAAEO,OAAF,GAAYT,IAAIK,OAAJ,CAAYG,CAAxB;AACH;AACJ;AACD,QAAIP,KAAJ,EAAW;AACP,4BAAYA,KAAZ,EAAmBS,OAAnB,CAA2B,aAAK;AAC5B,gBAAMC,KAAKT,EAAEU,CAAF,IAAO,MAAMA,CAAb,GAAiBA,CAA5B;AACAV,cAAES,EAAF,IAAQV,MAAMW,CAAN,CAAR;AACH,SAHD;AAIH;AACD,QAAMC,OAAO,oBAAYX,CAAZ,EACRY,GADQ,CACJ;AAAA,eAAQF,CAAR,SAAahB,WAAWM,EAAEU,CAAF,CAAX,CAAb;AAAA,KADI,EAERG,IAFQ,CAEH,GAFG,CAAb;AAGAC,YAAQC,GAAR,UAAmBlB,IAAnB,aAA+Bc,IAA/B;AACH;;AAEc,SAASzB,aAAT,CAAuB8B,GAAvB,EAA4B;AACvC,QAAMC,SAAS,yBAAW,EAAEC,QAAQ,SAAV,EAAX,CAAf;AACAF,QAAIG,GAAJ,CAAQF,OAAOG,MAAP,EAAR;AACA,QAAMC,UAAU,wBAAhB;;AAEAJ,WAAOK,IAAP,CAAY,gBAAZ,EAA8BD,OAA9B,0CAAuC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAC/B,wBAAa,IAAb,EAAmB,KAAKnB,GAAxB,CAD+B;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAE7BqB,8BAF6B,GAEpB,KAAKC,OAAL,CAAaC,IAFO;AAG7BlB,+BAH6B,GAI/B,OAAOgB,MAAP,KAAkB,QAAlB,GAA6BG,KAAKC,KAAL,CAAWJ,MAAX,CAA7B,GAAkDA,MAJnB;AAK7BK,iCAL6B,GAKjB,uBAAY,KAAK1B,GAAjB,CALiB;;AAAA,4BAM9B,qBAAU,IAAV,EAAgBK,QAAQsB,IAAxB,CAN8B;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAOnCjC,mCAAW,eAAX,EAA4B,IAA5B,EAAkC,EAAEW,gBAAF,EAAlC;AACMuB,+BAR6B,GAQnB,KAAK3B,OAAL,CAAaC,IARM;;AASnC,4BAAI;AACA2B,6CAAOC,OAAP,CAAeC,MAAf,CACI,sBAAS;AACLH,gDADK;AAELI,sCAAM3B,QAAQ2B,IAFT;AAGLC,2CAAW5B,QAAQ4B,SAHd;AAILC,4CAAY7B,QAAQ6B,UAJf;AAKLC,6CAAa9B,QAAQ8B,WALhB;AAMLC,0CAAU/B,QAAQ+B,QANb;AAOLV,oDAPK;AAQLW,0CAAU,KAAKpC,OAAL,CAAaqC,CARlB;AASLC,yCAAS;AATJ,6BAAT,CADJ,EAYEC,KAZF,CAYQ,iBAAS;AACb5B,wCAAQ6B,KAAR,CACI,sDADJ,EAEI,MAAKxC,OAAL,CAAaE,GAFjB,EAGIsC,KAHJ;AAKH,6BAlBD;AAmBA,gCAAItD,QAAJ,EAAc;AACVA,yCAASuD,KAAT,CAAe,iBAAf,EAAkC;AAC9BC,iDAAa,KAAK1C,OAAL,CAAaE,GADI;AAE9BJ,wCAAI2B;AAF0B,iCAAlC;AAIAvC,yCAASyD,MAAT,CAAgBC,GAAhB,CAAoB,KAAK5C,OAAL,CAAaE,GAAjC,EAAsC,EAAEJ,IAAI2B,SAAN,EAAtC;AACH;AACJ,yBA3BD,CA2BE,OAAOe,KAAP,EAAc;AACZ7B,oCAAQ6B,KAAR,CAAc,yBAAd,EAAyCA,KAAzC;AACH;AACD,6BAAKlB,IAAL,GAAY,yBAAe,EAAEuB,QAAQ,IAAV,EAAf,CAAZ;;AAvCmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAvC;;AA0CA/B,WAAOK,IAAP,CAAY,WAAZ,EAAyBD,OAAzB,0CAAkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAC1B,wBAAa,IAAb,EAAmB,KAAKnB,GAAxB,CAD0B;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAExBqB,8BAFwB,GAEf,KAAKC,OAAL,CAAaC,IAFE;AAGxBlB,+BAHwB,GAI1B,OAAOgB,MAAP,KAAkB,QAAlB,GAA6BG,KAAKC,KAAL,CAAWJ,MAAX,CAA7B,GAAkDA,MAJxB;;AAAA,4BAKzB,qBAAU,IAAV,EAAgBhB,QAAQsB,IAAxB,CALyB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAM9BjC,mCAAW,UAAX,EAAuB,IAAvB,EAA6B,EAAEW,gBAAF,EAA7B;;AAN8B,6BAO1B0C,YAAYC,eAPc;AAAA;AAAA;AAAA;;AAQ1B,6BAAKzB,IAAL,GAAY,yBAAe;AACvBkB,mCAAO;AADgB,yBAAf,CAAZ;AAGA,6BAAKK,MAAL,GAAc,GAAd;AAX0B;;AAAA;AAexBlB,+BAfwB,GAed,KAAK3B,OAAL,CAAaC,IAfC;;AAAA,4BAgBzB0B,OAhByB;AAAA;AAAA;AAAA;;AAiB1B;AACA,6BAAKL,IAAL,GAAY,yBAAe,EAAEkB,OAAO,cAAT,EAAf,CAAZ;AACA,6BAAKK,MAAL,GAAc,GAAd;AAnB0B;;AAAA;AAAA;AAAA;AAAA,+BAwBPjB,iBAAOoB,IAAP,CAAYC,OAAZ,CAAoB;AACnCC,wCAAY,CAAC,IAAD,EAAO,eAAP,CADuB;AAEnCC,mCAAO,EAAEC,IAAIzB,OAAN,EAAe0B,gBAAgB,UAA/B;AAF4B,yBAApB,CAxBO;;AAAA;AAwBpBpD,4BAxBoB;;AAAA,4BA4BrBA,IA5BqB;AAAA;AAAA;AAAA;;AAAA,8BA6BhB,IAAIqD,KAAJ,CACF,kHADE,CA7BgB;;AAAA;AAAA,8BAoCtBrD,KAAKsD,aAAL,KAAuB,IApCD;AAAA;AAAA;AAAA;;AAAA,8BAqChB,IAAID,KAAJ,CAAU,oCAAV,CArCgB;;AAAA;AAuC1B;AACA;AACME,oCAzCoB,GAyCLC,UAChBC,MADgB,CACTC,iBAAOC,WAAP,CAAmB,EAAnB,CADS,EAEhBC,QAFgB,CAEP,KAFO,CAzCK;AAAA;AAAA,+BA4CpB5D,KAAK6D,MAAL,CAAY,EAAEP,eAAeC,YAAjB,EAAZ,CA5CoB;;AAAA;;AA8C1B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEM/B,iCAzDoB,GAyDR,uBAAY,KAAK1B,GAAjB,CAzDQ;AA0D1B;;AA1D0B;AAAA,+BA2DI6B,iBAAOC,OAAP,CAAeoB,OAAf,CAAuB;AACjDC,wCAAY,CAAC,YAAD,CADqC;AAEjDC,mCAAO,EAAE1B,WAAW,iBAAIA,SAAJ,CAAb,EAA6Ba,SAAS,IAAtC,EAF0C;AAGjDyB,mCAAO;AAH0C,yBAAvB,CA3DJ;;AAAA;AA2DpBC,uCA3DoB;;AAAA,6BAgEtBA,eAhEsB;AAAA;AAAA;AAAA;;AAiEhBC,+BAjEgB,GAkElB,CAACC,KAAKC,GAAL,KAAaH,gBAAgBI,UAA9B,IAA4C,KAlE1B;;AAAA,8BAmElBH,UAAU,EAnEQ;AAAA;AAAA;AAAA;;AAoElBtD,gCAAQC,GAAR,4CAEQ,KAAKZ,OAAL,CAAaE,GAFrB,UAGSyB,OAHT,aAGwBF,SAHxB;AApEkB,8BAyEZ,IAAI6B,KAAJ,CACF,gEADE,CAzEY;;AAAA;AAAA;AAAA,+BAiFI1B,iBAAOyC,SAAP,CAAiBC,KAAjB,CAC1B,2DAD0B,EAE1B;AACIC,0CAAc,CAACtE,KAAKmD,EAAN,CADlB;AAEIoB,kCAAM5C,iBAAOyC,SAAP,CAAiBI,UAAjB,CAA4BC;AAFtC,yBAF0B,CAjFJ;;AAAA;AAiFpBC,uCAjFoB;;AAAA,8BAyFtBA,gBAAgB,CAAhB,EAAmBpB,aAAnB,KAAqCC,YAzFf;AAAA;AAAA;AAAA;;AA0FtB7C,gCAAQC,GAAR,CAAY,EAAE+D,gCAAF,EAAmBnB,0BAAnB,EAAZ;AA1FsB,8BA2FhB,IAAIF,KAAJ,CAAU,wBAAV,CA3FgB;;AAAA;AAAA;AAAA;AAAA,+BA+FhBtE,cAAc;AAChB4F,wCAAYzF,iBAAOC,GAAP,CAAW,uBAAX,CADI;AAEhByF,iCAAK1F,iBAAOC,GAAP,CAAW,eAAX,CAFW;AAGhB0F,qCAAS3F,iBAAOC,GAAP,CAAW,mBAAX,CAHO;AAIhB2F,8CAAkB3E,QAAQ2B,IAJV;AAKhBiD,wCAAY7F,iBAAOC,GAAP,CAAW,sBAAX,CALI;AAMhB6F,mCAAO7E,QAAQ4B,SANC;AAOhBkD,oCAAQ9E,QAAQ6B,UAPA;AAQhBkD,qCAAS/E,QAAQ8B,WARD;AAShBkD,kCAAMhF,QAAQ+B;AATE,yBAAd,CA/FgB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,+BA2GhBlC,KAAK6D,MAAL,CAAY,EAAEP,eAAe,IAAjB,EAAZ,CA3GgB;;AAAA;AAAA,8BA4GhB,IAAID,KAAJ,CAAU,oCAAV,CA5GgB;;AAAA;;AA+G1B3C,gCAAQC,GAAR,CACI,yCADJ,EAEI,KAAKZ,OAAL,CAAaE,GAFjB,EAGIE,QAAQ2B,IAHZ,EAII9B,KAAKmD,EAJT,EAKIhD,QAAQ4B,SALZ;;AAQA,6BAAKV,IAAL,GAAY,yBAAe,EAAEuB,QAAQ,IAAV,EAAf,CAAZ;;AAEA;AAzH0B;AAAA,+BA0HpB5C,KAAK6D,MAAL,CAAY,EAAET,gBAAgB,SAAlB,EAAZ,CA1HoB;;AAAA;;AA4H1B;AACMgC,qCA7HoB,GA6HJ,sBAAS;AAC3B1D,4CAD2B;AAE3BI,kCAAM3B,QAAQ2B,IAFa;AAG3BC,uCAAW5B,QAAQ4B,SAHQ;AAI3BC,wCAAY7B,QAAQ6B,UAJO;AAK3BC,yCAAa9B,QAAQ8B,WALM;AAM3BC,sCAAU/B,QAAQ+B,QANS;AAO3BV,gDAP2B;AAQ3BW,sCAAU,KAAKpC,OAAL,CAAaqC,CARI;AAS3BC,qCAAS;AATkB,yBAAT,CA7HI;AAAA;AAAA,+BAyIKV,iBAAOC,OAAP,CAAeoB,OAAf,CAAuB;AAClDC,wCAAY,CAAC,IAAD,CADsC;AAElDC,mCAAO,EAAExB,gBAAF,EAAWI,MAAM3B,QAAQ2B,IAAzB,EAF2C;AAGlDgC,mCAAO;AAH2C,yBAAvB,CAzIL;;AAAA;AAyIpBuB,wCAzIoB;;AAAA,6BA8ItBA,gBA9IsB;AAAA;AAAA;AAAA;;AAAA;AAAA,+BA+IhBA,iBAAiBxB,MAAjB,CAAwBuB,aAAxB,CA/IgB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,+BAiJhBzD,iBAAOC,OAAP,CAAeC,MAAf,CAAsBuD,aAAtB,CAjJgB;;AAAA;AAmJ1B,4BAAInG,QAAJ,EAAc;AACVA,qCAASuD,KAAT,CAAe,QAAf,EAAyB;AACrBC,6CAAa,KAAK1C,OAAL,CAAaE,GADL;AAErBJ,oCAAI2B;AAFiB,6BAAzB;AAIAvC,qCAASyD,MAAT,CAAgBC,GAAhB,CAAoB,KAAK5C,OAAL,CAAaE,GAAjC,EAAsC,EAAEJ,IAAI2B,SAAN,EAAtC;AACH;AAzJyB;AAAA;;AAAA;AAAA;AAAA;;AA2J1Bd,gCAAQ6B,KAAR,CACI,6BADJ,EAEI,KAAKxC,OAAL,CAAaE,GAFjB,EAGI,aAAM2D,QAAN,EAHJ;AAKA,6BAAKvC,IAAL,GAAY,yBAAe,EAAEkB,OAAO,aAAM+C,OAAf,EAAf,CAAZ;AACA,6BAAK1C,MAAL,GAAc,GAAd;;AAjK0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAlC;;AAqKA;;;;;;;;;;AAUA/B,WAAOK,IAAP,CAAY,cAAZ,EAA4BD,OAA5B,0CAAqC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,+BAE7B,OAAO,KAAKG,OAAL,CAAaC,IAApB,KAA6B,QAA7B,GACMC,KAAKC,KAAL,CAAW,KAAKH,OAAL,CAAaC,IAAxB,CADN,GAEM,KAAKD,OAAL,CAAaC,IAJU,EACzBS,IADyB,QACzBA,IADyB,EACnByD,KADmB,QACnBA,KADmB,EACZxD,SADY,QACZA,SADY,EACDyD,MADC,QACDA,MADC;;AAAA,8BAM7BA,WAAWC,QAAQC,GAAR,CAAYC,kBANM;AAAA;AAAA;AAAA;;AAAA,8BAOvB,IAAItC,KAAJ,CAAU,gBAAV,CAPuB;;AAAA;;AASjC7D,mCAAW,aAAX,EAA0B,IAA1B,EAAgC,EAAEsC,UAAF,EAAQyD,YAAR,EAAexD,oBAAf,EAAhC;;AATiC;;AAAA,4BAYxB6D,iBAAWC,IAAX,CAAgBN,MAAMO,WAAN,EAAhB,CAZwB;AAAA;AAAA;AAAA;;AAAA,8BAanB,IAAIzC,KAAJ,CAAU,sBAAsBkC,KAAhC,CAbmB;;AAAA;AAAA;AAAA,+BAcZ5D,iBAAOoB,IAAP,CAAYlB,MAAZ,CAAmB;AAChCC,kCAAM,iBAAIA,IAAJ,CAD0B;AAEhCyD,mCAAO,iBAAIA,KAAJ;AAFyB,yBAAnB,CAdY;;AAAA;AAczBvF,4BAdyB;AAAA;AAAA,+BAkBP2B,iBAAOC,OAAP,CAAeC,MAAf,CAAsB;AACxCH,qCAAS1B,KAAKmD,EAD0B;AAExCrB,kCAAM,iBAAIA,IAAJ,CAFkC;AAGxCC,uCAAW,iBAAIA,SAAJ;AAH6B,yBAAtB,CAlBO;;AAAA;AAkBvB5B,+BAlBuB;AAAA;AAAA,+BAuBNwB,iBAAOoE,QAAP,CAAgBlE,MAAhB,CAAuB;AAC1CH,qCAAS1B,KAAKmD,EAD4B;AAE1CrB,kCAAM,iBAAIA,IAAJ,CAFoC;AAG1CkE,sCAAU,OAHgC;AAI1CC,sCAAU,IAJgC;AAK1CV,mCAAOvF,KAAKuF,KAL8B;AAM1CxD,uCAAW,iBAAIA,SAAJ;AAN+B,yBAAvB,CAvBM;;AAAA;AAuBvBmE,gCAvBuB;;AA+B7B,6BAAK7E,IAAL,GAAY,yBAAe;AACvB8E,qCAAS,IADc;AAEvBnG,sCAFuB;AAGvBG,4CAHuB;AAIvB+F;AAJuB,yBAAf,CAAZ;AA/B6B;AAAA;;AAAA;AAAA;AAAA;;AAsC7BxF,gCAAQ6B,KAAR,CAAc,gCAAd;AACA,6BAAKlB,IAAL,GAAY,yBAAe,EAAEkB,OAAO,aAAM+C,OAAf,EAAf,CAAZ;AACA,6BAAK1C,MAAL,GAAc,GAAd;;AAxC6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAArC;;AA4CA/B,WAAOK,IAAP,CAAY,eAAZ,EAA6BD,OAA7B,0CAAsC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,6BAC9B,wBAAa,IAAb,EAAmB,KAAKnB,GAAxB,CAD8B;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAE5BqB,8BAF4B,GAEnB,KAAKC,OAAL,CAAaC,IAFM;AAAA,gCAI9B,OAAOF,MAAP,KAAkB,QAAlB,GAA6BG,KAAKC,KAAL,CAAWJ,MAAX,CAA7B,GAAkDA,MAJpB,EAG1BM,IAH0B,SAG1BA,IAH0B,EAGpB8D,KAHoB,SAGpBA,KAHoB;;AAAA,4BAK7B,qBAAU,IAAV,EAAgB9D,IAAhB,CAL6B;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAMlCjC,mCAAW,cAAX,EAA2B,IAA3B,EAAiC,EAAE+F,YAAF,EAAjC;AANkC;;AAAA,4BAQzBK,iBAAWC,IAAX,CAAgBN,MAAMO,WAAN,EAAhB,CARyB;AAAA;AAAA;AAAA;;AAAA,8BASpB,IAAIzC,KAAJ,CAAU,sBAAsBkC,KAAhC,CAToB;;AAAA;AAAA;AAAA,+BAWb,yBAAS;AACtB7D,qCAAS,KAAK3B,OAAL,CAAaC,IADA;AAEtBuF,mCAAO,iBAAIA,KAAJ,CAFe;AAGtBtF,iCAAK,KAAKF,OAAL,CAAaE;AAHI,yBAAT,CAXa;;AAAA;AAW1BD,4BAX0B;;AAAA,6BAgB1BA,IAhB0B;AAAA;AAAA;AAAA;;AAAA;AAAA,+BAiBb2B,iBAAOoB,IAAP,CAAYc,MAAZ,CACT,EAAE0B,OAAO,iBAAIA,KAAJ,CAAT,EAAqBa,cAAc,IAAnC,EADS,EAET,EAAElD,OAAO,EAAEC,IAAInD,KAAKmD,EAAX,EAAT,EAFS,CAjBa;;AAAA;AAiB1BnD,4BAjB0B;AAAA;AAAA;;AAAA;AAAA;AAAA,+BAsBb2B,iBAAOoB,IAAP,CAAYlB,MAAZ,CAAmB;AAC5B0D,mCAAO,iBAAIA,KAAJ,CADqB;AAE5Ba,0CAAc;AAFc,yBAAnB,CAtBa;;AAAA;AAsB1BpG,4BAtB0B;;AAAA;AA2B9B,6BAAKD,OAAL,CAAaC,IAAb,GAAoBA,KAAKmD,EAAzB;AACA,6BAAK9B,IAAL,GAAY,yBAAe,EAAEuB,QAAQ,IAAV,EAAf,CAAZ;AA5B8B;AAAA;;AAAA;AAAA;AAAA;;AA8B9BlC,gCAAQ6B,KAAR,CACI,iCADJ,EAEI,KAAKxC,OAAL,CAAaE,GAFjB;AAKA,6BAAKoB,IAAL,GAAY,yBAAe,EAAEkB,OAAO,aAAM+C,OAAf,EAAf,CAAZ;AACA,6BAAK1C,MAAL,GAAc,GAAd;;AApC8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAtC;;AAwCA/B,WAAOK,IAAP,CAAY,gBAAZ,EAA8BD,OAA9B,0CAAuC;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AACnC;AACME,8BAF6B,GAEpB,KAAKC,OAAL,CAAaC,IAFO;AAAA,gCAI/B,OAAOF,MAAP,KAAkB,QAAlB,GAA6BG,KAAKC,KAAL,CAAWJ,MAAX,CAA7B,GAAkDA,MAJnB,EAG3BM,IAH2B,SAG3BA,IAH2B,EAGrBtB,OAHqB,SAGrBA,OAHqB,EAGZkG,UAHY,SAGZA,UAHY;;AAAA,4BAK9B,qBAAU,IAAV,EAAgB5E,IAAhB,CAL8B;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAOnC;AACA,6BAAK1B,OAAL,CAAauG,IAAb,GAAoB,IAApB;AACA,6BAAKvG,OAAL,CAAawG,IAAb;;AAEA/G,mCAAW,eAAX,EAA4B,IAA5B,EAAkC,EAAEW,gBAAF,EAAlC;AAXmC;AAAA;AAAA,+BAaNwB,iBAAOC,OAAP,CAAeoB,OAAf,CAAuB;AAC5CC,wCAAY,CAAC,SAAD,CADgC;AAE5CC,mCAAO,EAAEpB,MAAM,iBAAI3B,OAAJ,CAAR,EAFqC;AAG5CqG,qCAAS;AAHmC,yBAAvB,CAbM;;AAAA;AAazBC,kCAbyB;;AAkB/B,4BAAIA,UAAJ,EAAgB,KAAK1G,OAAL,CAAaC,IAAb,GAAoByG,WAAW/E,OAA/B;;AAlBe,6BAoB3B2E,UApB2B;AAAA;AAAA;AAAA;;AAAA,4BAqBtB,KAAKtG,OAAL,CAAa2G,eArBS;AAAA;AAAA;AAAA;;AAsBvBhG,gCAAQ6B,KAAR,CACI,qDADJ;AAtBuB;AAAA;;AAAA;AAAA;AAAA,+BA0BMoE,aAAIC,gBAAJ,CAAqB,CAC9CzG,OAD8C,CAArB,CA1BN;;AAAA;AAAA;AAAA;AA0BhB0G,oCA1BgB;;AA6BvB,4BAAI,CAACA,YAAL,EAAmB;AACfnG,oCAAQ6B,KAAR,CACI,2CADJ,EAEIpC,OAFJ;AAIH,yBALD,MAKO;AACGmG,gCADH,GACU,EAAEpB,SAAS,KAAX,EADV;AAEG4B,kCAFH,GAEYtD,UAAKC,MAAL,CACX,yBACI,EAAEsD,OAAO,KAAKhH,OAAL,CAAa2G,eAAtB,EADJ,EAEI,IAFJ,EAGI,CAHJ,CADW,CAFZ;;AASGM,kCATH,GASY,SAATA,MAAS,CACXzC,IADW,EAEX0C,MAFW,EAGXC,MAHW,EAIXC,MAJW,EAKXC,gBALW,EAMV;AACD,oCAAI,CAACH,MAAL,EAAa;AACb,oCAAIE,WAAW,CAAX,IAAgBC,qBAAqB,CAAzC,EAA4C;AACxC1G,4CAAQ6B,KAAR,iDAEQgC,IAFR,6BAG4BpE,OAH5B;AAKH,iCAND,MAMO;AACH,wCAAMkH,MAAMC,SAASL,MAAT,CAAZ;AACA,wCAAMM,aAAaC,eAAUC,UAAV,CAAqBP,MAArB,CAAnB;AACA,wCAAMjB,WAAWoB,IAAIK,UAAJ,CACbZ,MADa,EAEbS,UAFa,CAAjB;AAIA,wCAAI,CAACtB,QAAL,EAAe;AACXvF,gDAAQ6B,KAAR,CACI,oCADJ,EAEI,OAAKxC,OAAL,CAAaE,GAFjB,EAGIE,OAHJ,EAII+G,MAJJ;AAMH;AACDZ,yCAAK/B,IAAL,IAAa0B,QAAb;AACH;AACJ,6BAxCE;;AAAA,oDA8CCY,YA9CD,CA0CC3B,OA1CD,8EA2CKyC,SA3CL,2FA2CkBC,cA3ClB,8BA2CkCT,MA3ClC,8BA4CKC,gBA5CL,yBA4CKA,gBA5CL;;AA+CHJ,mCACI,SADJ,EAEIX,WAAWnB,OAFf,EAGI0C,cAHJ,EAIIT,MAJJ,EAKIC,gBALJ;AAOA,gCAAId,KAAKpB,OAAT,EAAkB,KAAKnF,OAAL,CAAaG,CAAb,GAAiBC,OAAjB;AACrB;;AAzFsB;;AA6F/B,6BAAKkB,IAAL,GAAY,yBAAe;AACvBuB,oCAAQ;AADe,yBAAf,CAAZ;AAGMpB,iCAhGyB,GAgGb,uBAAY,KAAK1B,GAAjB,CAhGa;;AAiG/B,4BAAIb,QAAJ,EAAc;AACVA,qCAASyD,MAAT,CAAgBC,GAAhB,CAAoB,KAAK5C,OAAL,CAAaE,GAAjC,EAAsC;AAClCJ,oCAAI2B,SAD8B;AAElCqG,qCAAKrG;AAF6B,6BAAtC;AAIAvC,qCAASyD,MAAT,CAAgBoF,SAAhB,CAA0B,KAAK/H,OAAL,CAAaE,GAAvC,EAA4C,QAA5C,EAAsD,CAAtD;AACH;AAvG8B;AAAA;;AAAA;AAAA;AAAA;;AAyG/BS,gCAAQ6B,KAAR,CACI,kCADJ,EAEI,KAAKxC,OAAL,CAAaE,GAFjB,EAGI,aAAMqF,OAHV;AAKA,6BAAKjE,IAAL,GAAY,yBAAe;AACvBkB,mCAAO,aAAM+C;AADU,yBAAf,CAAZ;AAGA,6BAAK1C,MAAL,GAAc,GAAd;;AAjH+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAvC;;AAqHA/B,WAAOK,IAAP,CAAY,iBAAZ,EAA+BD,OAA/B,0CAAwC;AAAA;;AAAA;AAAA;AAAA;AAAA;AACpC;AACME,8BAF8B,GAErB,KAAKC,OAAL,CAAaC,IAFQ;AAAA,gCAIhC,OAAOF,MAAP,KAAkB,QAAlB,GAA6BG,KAAKC,KAAL,CAAWJ,MAAX,CAA7B,GAAkDA,MAJlB,EAG5BM,IAH4B,SAG5BA,IAH4B;;AAAA,4BAK/B,qBAAU,IAAV,EAAgBA,IAAhB,CAL+B;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAMpC,6BAAK1B,OAAL,CAAauG,IAAb,GAAoB,KAApB;AACA9G,mCAAW,gBAAX,EAA6B,IAA7B;AACA,4BAAI;AACA,iCAAKO,OAAL,CAAaG,CAAb,GAAiB,IAAjB;AACA,iCAAKmB,IAAL,GAAY,yBAAe,EAAEuB,QAAQ,IAAV,EAAf,CAAZ;AACH,yBAHD,CAGE,OAAOL,KAAP,EAAc;AACZ7B,oCAAQ6B,KAAR,CACI,mCADJ,EAEI,KAAKxC,OAAL,CAAaE,GAFjB,EAGIsC,KAHJ;AAKA,iCAAKlB,IAAL,GAAY,yBAAe,EAAEkB,OAAOA,MAAM+C,OAAf,EAAf,CAAZ;AACA,iCAAK1C,MAAL,GAAc,GAAd;AACH;;AAnBmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAxC;;AAsBA/B,WAAOK,IAAP,CAAY,gBAAZ,0CAA8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BACtB,wBAAa,IAAb,EAAmB,KAAKpB,GAAxB,CADsB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAEtBqB,8BAFsB;AAAA;AAAA;AAAA,+BAIP,sBAAO,IAAP,CAJO;;AAAA;AAItBA,8BAJsB;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAMtBT,gCAAQC,GAAR,CAAY,6BAAZ;;AANsB;AAQ1B,4BAAIQ,UAAUA,OAAO,YAAP,CAAd,EAAoC;AAC1B4G,sCAD0B,GACb5G,OAAO,YAAP,CADa;AAE1B6G,iCAF0B,GAEfD,WAAW,cAAX,CAFe,WAG5BA,WAAW,aAAX,CAH4B;;AAKhCrH,oCAAQC,GAAR,CACI,uBADJ,EAEIqH,KAFJ,EAGI,IAHJ,EAII,KAAKlI,GAAL,CAASmI,OAAT,CAAiB,YAAjB,CAJJ;AAMH,yBAXD,MAWO;AACHvH,oCAAQC,GAAR,CACI,uCADJ,EAEIQ,MAFJ,EAGI,IAHJ,EAII,KAAKrB,GAAL,CAASmI,OAAT,CAAiB,YAAjB,CAJJ;AAMH;AACD,6BAAK5G,IAAL,GAAY,EAAZ;;AA3B0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA9B;;AA8BAR,WAAOK,IAAP,CAAY,aAAZ,EAA2BD,OAA3B,0CAAoC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAC1BE,8BAD0B,GACjB,KAAKC,OAAL,CAAaC,IADI;AAAA,gCAG5B,OAAOF,MAAP,KAAkB,QAAlB,GAA6BG,KAAKC,KAAL,CAAWJ,MAAX,CAA7B,GAAkDA,MAHtB,EAExBM,IAFwB,SAExBA,IAFwB,EAElByG,CAFkB,SAElBA,CAFkB,EAEfC,CAFe,SAEfA,CAFe;;AAAA,4BAI3B,qBAAU,IAAV,EAAgB1G,IAAhB,CAJ2B;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,+BAKbE,iBAAOoB,IAAP,CAAYC,OAAZ,CAAoB;AACnCE,mCAAO,EAAEC,IAAI,KAAKpD,OAAL,CAAaC,IAAnB;AAD4B,yBAApB,CALa;;AAAA;AAK1BA,4BAL0B;;AAQhC,4BAAIA,IAAJ,EAAU;AACFoI,gCADE,GACKpI,KAAKqI,YAAL,GAAoB/G,KAAKC,KAAL,CAAWvB,KAAKqI,YAAhB,CAApB,GAAoD,EADzD;;AAEND,iCAAK,iBAAL,IAA0BF,CAA1B;AACAE,iCAAK,iBAAL,IAA0BD,CAA1B;AACAC,iCAAK,WAAL,IAAoB,CAApB;AACA,gCAAI;AACApI,qCAAK6D,MAAL,CAAY;AACRwE,kDAAc,yBAAeD,IAAf;AADN,iCAAZ;AAGH,6BAJD,CAIE,OAAO7F,KAAP,EAAc;AACZ7B,wCAAQ6B,KAAR,CACI,+BADJ,EAEI,KAAKxC,OAAL,CAAaE,GAFjB,EAGIsC,MAAM+C,OAHV;AAKA,qCAAKjE,IAAL,GAAY,yBAAe,EAAEkB,OAAOA,MAAM+C,OAAf,EAAf,CAAZ;AACA,qCAAK1C,MAAL,GAAc,GAAd;AACH;AACJ;AACD,6BAAKvB,IAAL,GAAY,yBAAe,EAAEuB,QAAQ,IAAV,EAAf,CAAZ;;AA3BgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAApC;;AA8BA/B,WAAOK,IAAP,CAAY,qBAAZ,EAAmCD,OAAnC,0CAA4C;AAAA;;AAAA;AAAA;AAAA;AAAA;AAClCE,8BADkC,GACzB,KAAKC,OAAL,CAAaC,IADY;AAAA,gCAGpC,OAAOF,MAAP,KAAkB,QAAlB,GAA6BG,KAAKC,KAAL,CAAWJ,MAAX,CAA7B,GAAkDA,MAHd,EAEhCM,IAFgC,SAEhCA,IAFgC,EAE1B6G,OAF0B,SAE1BA,OAF0B;;AAAA,4BAInC,qBAAU,IAAV,EAAgB7G,IAAhB,CAJmC;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAKxCf,gCAAQC,GAAR,CACI,4BADJ,EAEI,KAAKZ,OAAL,CAAaC,IAFjB,EAGI,KAAKD,OAAL,CAAaE,GAHjB,EAIIqI,OAJJ;;AALwC,4BAWnC,KAAKvI,OAAL,CAAaG,CAXsB;AAAA;AAAA;AAAA;;AAYpC,6BAAKmB,IAAL,GAAY,2BAAZ;AACA,6BAAKuB,MAAL,GAAc,GAAd;AAboC;;AAAA;AAAA;AAiB9B2F,4BAjB8B,GAiBvB,yBAAeD,OAAf,CAjBuB;;AAAA,8BAkBhCC,KAAKC,MAAL,GAAc,IAlBkB;AAAA;AAAA;AAAA;;AAAA,8BAkBN,IAAInF,KAAJ,CAAU,sBAAV,CAlBM;;AAAA;AAmBpC,6BAAKtD,OAAL,CAAa0I,UAAb,GAA0BF,IAA1B;AACA,6BAAKlH,IAAL,GAAY,yBAAe,EAAEuB,QAAQ,IAAV,EAAf,CAAZ;AApBoC;AAAA;;AAAA;AAAA;AAAA;;AAsBpClC,gCAAQ6B,KAAR,CACI,uCADJ,EAEI,KAAKxC,OAAL,CAAaE,GAFjB;AAKA,6BAAKoB,IAAL,GAAY,yBAAe,EAAEkB,OAAO,aAAM+C,OAAf,EAAf,CAAZ;AACA,6BAAK1C,MAAL,GAAc,GAAd;;AA5BoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA5C;;AAgCA/B,WAAOK,IAAP,CAAY,gBAAZ,EAA8BD,OAA9B,0CAAuC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAC7BE,8BAD6B,GACpB,KAAKC,OAAL,CAAaC,IADO;AAAA,gCAG/B,OAAOF,MAAP,KAAkB,QAAlB,GAA6BG,KAAKC,KAAL,CAAWJ,MAAX,CAA7B,GAAkDA,MAHnB,EAE3BM,IAF2B,SAE3BA,IAF2B;;AAAA,4BAI9B,qBAAU,IAAV,EAAgBA,IAAhB,CAJ8B;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAMnC,6BAAKJ,IAAL,GAAY,IAAZ;AACA,6BAAKuB,MAAL,GAAc,GAAd;;AAPmC,4BAS9B,KAAK7C,OAAL,CAAaG,CATiB;AAAA;AAAA;AAAA;;AAU/B,6BAAKmB,IAAL,GAAY,kBAAZ;AACA,6BAAKuB,MAAL,GAAc,GAAd;AAX+B;;AAAA;AAAA;AAAA;AAAA,+BAgBb+D,aAAI+B,eAAJ,CACd,4BADc,EAEd,CAAC,KAAK3I,OAAL,CAAaG,CAAd,CAFc,EAGdhB,iBAAOC,GAAP,CAAW,mBAAX,CAHc,EAIdD,iBAAOC,GAAP,CAAW,sBAAX,CAJc,CAhBa;;AAAA;AAgBzBwJ,2BAhByB;;;AAuB/B,6BAAKtH,IAAL,GAAY,yBAAesH,IAAIC,QAAJ,CAAa5J,gBAAb,CAAf,CAAZ;AAvB+B;AAAA;;AAAA;AAAA;AAAA;;AAyB/B0B,gCAAQ6B,KAAR,CACI,kCADJ,EAEI,KAAKxC,OAAL,CAAaG,CAFjB;AAKA,6BAAKmB,IAAL,GAAY,yBAAe,EAAEkB,OAAO,cAAM+C,OAAf,EAAf,CAAZ;AACA,6BAAK1C,MAAL,GAAc,GAAd;;AA/B+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAvC;;AAmCA/B,WAAOK,IAAP,CAAY,YAAZ,EAA0BD,OAA1B,0CAAmC;AAAA;;AAAA;AAAA;AAAA;AAAA;AACzBE,8BADyB,GAChB,KAAKC,OAAL,CAAaC,IADG;AAAA,iCAG3B,OAAOF,MAAP,KAAkB,QAAlB,GAA6BG,KAAKC,KAAL,CAAWJ,MAAX,CAA7B,GAAkDA,MAHvB,EAEvBM,IAFuB,UAEvBA,IAFuB;;AAAA,4BAI1B,qBAAU,IAAV,EAAgBA,IAAhB,CAJ0B;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,4BAM1B,KAAK1B,OAAL,CAAaG,CANa;AAAA;AAAA;AAAA;;AAO3B,6BAAKmB,IAAL,GAAY,2BAAZ;AACA,6BAAKuB,MAAL,GAAc,GAAd;AAR2B;;AAAA;AAAA;AAAA;AAAA,+BAYrB+D,aAAI+B,eAAJ,CACF,qBADE,EAEF;AACIzI,iCAAK,KAAKF,OAAL,CAAaG,CADtB;AAEI2I,iCAAK7J;AAFT,yBAFE,EAMFE,iBAAOC,GAAP,CAAW,mBAAX,CANE,EAOFD,iBAAOC,GAAP,CAAW,sBAAX,CAPE,CAZqB;;AAAA;AAqB3B,6BAAKkC,IAAL,GAAY,yBAAe,EAAEuB,QAAQ,IAAV,EAAf,CAAZ;AArB2B;AAAA;;AAAA;AAAA;AAAA;;AAuB3BlC,gCAAQ6B,KAAR,CACI,8BADJ,EAEI,KAAKxC,OAAL,CAAaE,GAFjB;AAKA,6BAAKoB,IAAL,GAAY,yBAAe,EAAEkB,OAAO,cAAM+C,OAAf,EAAf,CAAZ;AACA,6BAAK1C,MAAL,GAAc,GAAd;;AA7B2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAnC;AAgCH;;AAED;;;AAGA,SAAU7D,aAAV;AAAA,QACI4F,UADJ,UACIA,UADJ;AAAA,QAEIC,GAFJ,UAEIA,GAFJ;AAAA,QAGIC,OAHJ,UAGIA,OAHJ;AAAA,QAIIC,gBAJJ,UAIIA,gBAJJ;AAAA,sCAKIgE,aALJ;AAAA,QAKIA,aALJ,wCAKoB,EALpB;AAAA,QAMI/D,UANJ,UAMIA,UANJ;AAAA,QAOIC,KAPJ,UAOIA,KAPJ;AAAA,QAQIC,MARJ,UAQIA,MARJ;AAAA,QASIC,OATJ,UASIA,OATJ;AAAA,QAUIC,IAVJ,UAUIA,IAVJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAYU4D,8BAZV,GAYuB,CACf,CACI,gCADJ,EAEI;AACInE,gCADJ;AAEIC,wCAFJ;AAGIC,0DAHJ;AAIIgE,oDAJJ;AAKI/D,8CALJ;AAMIC,+BAAO;AACHoC,8CAAkB,CADf;AAEH4B,2CAAe,EAFZ;AAGHrB,uCAAW,CAAC,CAAC3C,KAAD,EAAQ,CAAR,CAAD;AAHR,yBANX;AAWIC,gCAAQ;AACJmC,8CAAkB,CADd;AAEJ4B,2CAAe,EAFX;AAGJrB,uCAAW,CAAC,CAAC1C,MAAD,EAAS,CAAT,CAAD;AAHP,yBAXZ;AAgBIC,iCAAS;AACLkC,8CAAkB,CADb;AAEL4B,2CAAe,EAFV;AAGLrB,uCAAW,CAAC,CAACzC,OAAD,EAAU,CAAV,CAAD;AAHN,yBAhBb;AAqBIhD,kCAAUiD;AArBd,qBAFJ,CADe,CAZvB;AAAA;AAAA,2BAwCU8D,mBAAUC,SAAV,CACF;AACIC,oCAAY,EADhB;AAEIJ;AAFJ,qBADE,EAKF,CAACpE,UAAD,CALE,CAxCV;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiDA,IAAM2C,WAAW,SAAXA,QAAW,SAAU;AACvB,QAAI;AACA,eAAO8B,eAAUC,OAAV,CAAkBC,MAAlB,CAAP;AACH,KAFD,CAEE,OAAOC,CAAP,EAAU;AACR,eAAO,IAAP;AACH;AACJ,CAND","file":"general.js","sourcesContent":["// router 在这里！\n\n/*global $STM_Config */\nimport koa_router from 'koa-router';\nimport koa_body from 'koa-body';\nimport crypto from 'crypto';\nimport models from 'db/models';\nimport findUser from 'db/utils/find_user';\nimport config from 'config';\nimport { esc, escAttrs } from 'db/models';\nimport {\n    emailRegex,\n    getRemoteIp,\n    rateLimitReq,\n    checkCSRF,\n} from 'server/utils/misc';\nimport coBody from 'co-body';\nimport Mixpanel from 'mixpanel';\nimport { PublicKey, Signature, hash } from '@steemit/steem-js/lib/auth/ecc';\nimport { api, broadcast } from '@steemit/steem-js';\n\nconst ACCEPTED_TOS_TAG = 'accepted_tos_20180614';\n\nconst mixpanel = config.get('mixpanel')\n    ? Mixpanel.init(config.get('mixpanel'))\n    : null;\n\nconst _stringval = v => (typeof v === 'string' ? v : JSON.stringify(v));\nfunction logRequest(path, ctx, extra) {\n    let d = { ip: getRemoteIp(ctx.req) };\n    if (ctx.session) {\n        if (ctx.session.user) {\n            d.user = ctx.session.user;\n        }\n        if (ctx.session.uid) {\n            d.uid = ctx.session.uid;\n        }\n        if (ctx.session.a) {\n            d.account = ctx.session.a;\n        }\n    }\n    if (extra) {\n        Object.keys(extra).forEach(k => {\n            const nk = d[k] ? '_' + k : k;\n            d[nk] = extra[k];\n        });\n    }\n    const info = Object.keys(d)\n        .map(k => `${k}=${_stringval(d[k])}`)\n        .join(' ');\n    console.log(`-- /${path} --> ${info}`);\n}\n\nexport default function useGeneralApi(app) {\n    const router = koa_router({ prefix: '/api/v1' });\n    app.use(router.routes());\n    const koaBody = koa_body();\n\n    router.post('/accounts_wait', koaBody, function*() {\n        if (rateLimitReq(this, this.req)) return;\n        const params = this.request.body;\n        const account =\n            typeof params === 'string' ? JSON.parse(params) : params;\n        const remote_ip = getRemoteIp(this.req);\n        if (!checkCSRF(this, account.csrf)) return;\n        logRequest('accounts_wait', this, { account });\n        const user_id = this.session.user;\n        try {\n            models.Account.create(\n                escAttrs({\n                    user_id,\n                    name: account.name,\n                    owner_key: account.owner_key,\n                    active_key: account.active_key,\n                    posting_key: account.posting_key,\n                    memo_key: account.memo_key,\n                    remote_ip,\n                    referrer: this.session.r,\n                    created: false,\n                })\n            ).catch(error => {\n                console.error(\n                    \"!!! Can't create account wait model in /accounts api\",\n                    this.session.uid,\n                    error\n                );\n            });\n            if (mixpanel) {\n                mixpanel.track('Signup WaitList', {\n                    distinct_id: this.session.uid,\n                    ip: remote_ip,\n                });\n                mixpanel.people.set(this.session.uid, { ip: remote_ip });\n            }\n        } catch (error) {\n            console.error('Error in /accounts_wait', error);\n        }\n        this.body = JSON.stringify({ status: 'ok' });\n    });\n\n    router.post('/accounts', koaBody, function*() {\n        if (rateLimitReq(this, this.req)) return;\n        const params = this.request.body;\n        const account =\n            typeof params === 'string' ? JSON.parse(params) : params;\n        if (!checkCSRF(this, account.csrf)) return;\n        logRequest('accounts', this, { account });\n        if ($STM_Config.disable_signups) {\n            this.body = JSON.stringify({\n                error: 'New signups are temporary disabled.',\n            });\n            this.status = 401;\n            return;\n        }\n\n        const user_id = this.session.user;\n        if (!user_id) {\n            // require user to sign in with identity provider\n            this.body = JSON.stringify({ error: 'Unauthorized' });\n            this.status = 401;\n            return;\n        }\n\n        try {\n            const user = yield models.User.findOne({\n                attributes: ['id', 'creation_hash'],\n                where: { id: user_id, account_status: 'approved' },\n            });\n            if (!user) {\n                throw new Error(\n                    \"We can't find your sign up request. You either haven't started your sign up application or weren't approved yet.\"\n                );\n            }\n\n            // Is an account creation already happening for this user, maybe on another request?\n            // If so, throw an error.\n            if (user.creation_hash !== null) {\n                throw new Error('An account creation is in progress');\n            }\n            // If not, set this user's creation_hash.\n            // We'll check this later on, just before we create the account on chain.\n            const creationHash = hash\n                .sha256(crypto.randomBytes(32))\n                .toString('hex');\n            yield user.update({ creation_hash: creationHash });\n\n            // disable session/multi account for now\n\n            // const existing_created_account = yield models.Account.findOne({\n            //     attributes: ['id'],\n            //     where: {user_id, ignored: false, created: true},\n            //     order: 'id DESC'\n            // });\n            // if (existing_created_account) {\n            //     throw new Error(\"Only one Steem account per user is allowed in order to prevent abuse\");\n            // }\n\n            const remote_ip = getRemoteIp(this.req);\n            // rate limit account creation to one per IP every 10 minutes\n            const same_ip_account = yield models.Account.findOne({\n                attributes: ['created_at'],\n                where: { remote_ip: esc(remote_ip), created: true },\n                order: 'id DESC',\n            });\n            if (same_ip_account) {\n                const minutes =\n                    (Date.now() - same_ip_account.created_at) / 60000;\n                if (minutes < 10) {\n                    console.log(\n                        `api /accounts: IP rate limit for user ${\n                            this.session.uid\n                        } #${user_id}, IP ${remote_ip}`\n                    );\n                    throw new Error(\n                        'Only one Steem account allowed per IP address every 10 minutes'\n                    );\n                }\n            }\n\n            // Ensure another registration is not in progress.\n            // Raw query with SQL_NO_CACHE avoids the MySQL query cache.\n            const newCreationHash = yield models.sequelize.query(\n                'SELECT SQL_NO_CACHE creation_hash FROM users WHERE id = ?',\n                {\n                    replacements: [user.id],\n                    type: models.sequelize.QueryTypes.SELECT,\n                }\n            );\n\n            if (newCreationHash[0].creation_hash !== creationHash) {\n                console.log({ newCreationHash, creationHash });\n                throw new Error('Creation hash mismatch');\n            }\n\n            try {\n                yield createAccount({\n                    signingKey: config.get('registrar.signing_key'),\n                    fee: config.get('registrar.fee'),\n                    creator: config.get('registrar.account'),\n                    new_account_name: account.name,\n                    delegation: config.get('registrar.delegation'),\n                    owner: account.owner_key,\n                    active: account.active_key,\n                    posting: account.posting_key,\n                    memo: account.memo_key,\n                });\n            } catch (e) {\n                yield user.update({ creation_hash: null });\n                throw new Error('Account creation error, try again.');\n            }\n\n            console.log(\n                '-- create_account_with_keys created -->',\n                this.session.uid,\n                account.name,\n                user.id,\n                account.owner_key\n            );\n\n            this.body = JSON.stringify({ status: 'ok' });\n\n            // update user account status\n            yield user.update({ account_status: 'created' });\n\n            // update or create account record\n            const account_attrs = escAttrs({\n                user_id,\n                name: account.name,\n                owner_key: account.owner_key,\n                active_key: account.active_key,\n                posting_key: account.posting_key,\n                memo_key: account.memo_key,\n                remote_ip,\n                referrer: this.session.r,\n                created: true,\n            });\n\n            const existing_account = yield models.Account.findOne({\n                attributes: ['id'],\n                where: { user_id, name: account.name },\n                order: 'id DESC',\n            });\n            if (existing_account) {\n                yield existing_account.update(account_attrs);\n            } else {\n                yield models.Account.create(account_attrs);\n            }\n            if (mixpanel) {\n                mixpanel.track('Signup', {\n                    distinct_id: this.session.uid,\n                    ip: remote_ip,\n                });\n                mixpanel.people.set(this.session.uid, { ip: remote_ip });\n            }\n        } catch (error) {\n            console.error(\n                'Error in /accounts api call',\n                this.session.uid,\n                error.toString()\n            );\n            this.body = JSON.stringify({ error: error.message });\n            this.status = 500;\n        }\n    });\n\n    /**\n     * Provides an endpoint to create user, account, and identity records.\n     * Used by faucet.\n     *\n     * HTTP params:\n     *   name\n     *   email\n     *   owner_key\n     *   secret\n     */\n    router.post('/create_user', koaBody, function*() {\n        const { name, email, owner_key, secret } =\n            typeof this.request.body === 'string'\n                ? JSON.parse(this.request.body)\n                : this.request.body;\n\n        if (secret !== process.env.CREATE_USER_SECRET)\n            throw new Error('invalid secret');\n\n        logRequest('create_user', this, { name, email, owner_key });\n\n        try {\n            if (!emailRegex.test(email.toLowerCase()))\n                throw new Error('not valid email: ' + email);\n            let user = yield models.User.create({\n                name: esc(name),\n                email: esc(email),\n            });\n            const account = yield models.Account.create({\n                user_id: user.id,\n                name: esc(name),\n                owner_key: esc(owner_key),\n            });\n            const identity = yield models.Identity.create({\n                user_id: user.id,\n                name: esc(name),\n                provider: 'email',\n                verified: true,\n                email: user.email,\n                owner_key: esc(owner_key),\n            });\n            this.body = JSON.stringify({\n                success: true,\n                user,\n                account,\n                identity,\n            });\n        } catch (error) {\n            console.error('Error in /create_user api call', error);\n            this.body = JSON.stringify({ error: error.message });\n            this.status = 500;\n        }\n    });\n\n    router.post('/update_email', koaBody, function*() {\n        if (rateLimitReq(this, this.req)) return;\n        const params = this.request.body;\n        const { csrf, email } =\n            typeof params === 'string' ? JSON.parse(params) : params;\n        if (!checkCSRF(this, csrf)) return;\n        logRequest('update_email', this, { email });\n        try {\n            if (!emailRegex.test(email.toLowerCase()))\n                throw new Error('not valid email: ' + email);\n            // TODO: limit by 1/min/ip\n            let user = yield findUser({\n                user_id: this.session.user,\n                email: esc(email),\n                uid: this.session.uid,\n            });\n            if (user) {\n                user = yield models.User.update(\n                    { email: esc(email), waiting_list: true },\n                    { where: { id: user.id } }\n                );\n            } else {\n                user = yield models.User.create({\n                    email: esc(email),\n                    waiting_list: true,\n                });\n            }\n            this.session.user = user.id;\n            this.body = JSON.stringify({ status: 'ok' });\n        } catch (error) {\n            console.error(\n                'Error in /update_email api call',\n                this.session.uid,\n                error\n            );\n            this.body = JSON.stringify({ error: error.message });\n            this.status = 500;\n        }\n    });\n\n    router.post('/login_account', koaBody, function*() {\n        // if (rateLimitReq(this, this.req)) return;\n        const params = this.request.body;\n        const { csrf, account, signatures } =\n            typeof params === 'string' ? JSON.parse(params) : params;\n        if (!checkCSRF(this, csrf)) return;\n\n        // Set auth, to remember if a user is authed on initial login.\n        this.session.auth = true;\n        this.session.save();\n\n        logRequest('login_account', this, { account });\n        try {\n            const db_account = yield models.Account.findOne({\n                attributes: ['user_id'],\n                where: { name: esc(account) },\n                logging: false,\n            });\n            if (db_account) this.session.user = db_account.user_id;\n\n            if (signatures) {\n                if (!this.session.login_challenge) {\n                    console.error(\n                        '/login_account missing this.session.login_challenge'\n                    );\n                } else {\n                    const [chainAccount] = yield api.getAccountsAsync([\n                        account,\n                    ]);\n                    if (!chainAccount) {\n                        console.error(\n                            '/login_account missing blockchain account',\n                            account\n                        );\n                    } else {\n                        const auth = { posting: false };\n                        const bufSha = hash.sha256(\n                            JSON.stringify(\n                                { token: this.session.login_challenge },\n                                null,\n                                0\n                            )\n                        );\n                        const verify = (\n                            type,\n                            sigHex,\n                            pubkey,\n                            weight,\n                            weight_threshold\n                        ) => {\n                            if (!sigHex) return;\n                            if (weight !== 1 || weight_threshold !== 1) {\n                                console.error(\n                                    `/login_account login_challenge unsupported ${\n                                        type\n                                    } auth configuration: ${account}`\n                                );\n                            } else {\n                                const sig = parseSig(sigHex);\n                                const public_key = PublicKey.fromString(pubkey);\n                                const verified = sig.verifyHash(\n                                    bufSha,\n                                    public_key\n                                );\n                                if (!verified) {\n                                    console.error(\n                                        '/login_account verification failed',\n                                        this.session.uid,\n                                        account,\n                                        pubkey\n                                    );\n                                }\n                                auth[type] = verified;\n                            }\n                        };\n                        const {\n                            posting: {\n                                key_auths: [[posting_pubkey, weight]],\n                                weight_threshold,\n                            },\n                        } = chainAccount;\n                        verify(\n                            'posting',\n                            signatures.posting,\n                            posting_pubkey,\n                            weight,\n                            weight_threshold\n                        );\n                        if (auth.posting) this.session.a = account;\n                    }\n                }\n            }\n\n            this.body = JSON.stringify({\n                status: 'ok',\n            });\n            const remote_ip = getRemoteIp(this.req);\n            if (mixpanel) {\n                mixpanel.people.set(this.session.uid, {\n                    ip: remote_ip,\n                    $ip: remote_ip,\n                });\n                mixpanel.people.increment(this.session.uid, 'Logins', 1);\n            }\n        } catch (error) {\n            console.error(\n                'Error in /login_account api call',\n                this.session.uid,\n                error.message\n            );\n            this.body = JSON.stringify({\n                error: error.message,\n            });\n            this.status = 500;\n        }\n    });\n\n    router.post('/logout_account', koaBody, function*() {\n        // if (rateLimitReq(this, this.req)) return; - logout maybe immediately followed with login_attempt event\n        const params = this.request.body;\n        const { csrf } =\n            typeof params === 'string' ? JSON.parse(params) : params;\n        if (!checkCSRF(this, csrf)) return;\n        this.session.auth = false;\n        logRequest('logout_account', this);\n        try {\n            this.session.a = null;\n            this.body = JSON.stringify({ status: 'ok' });\n        } catch (error) {\n            console.error(\n                'Error in /logout_account api call',\n                this.session.uid,\n                error\n            );\n            this.body = JSON.stringify({ error: error.message });\n            this.status = 500;\n        }\n    });\n\n    router.post('/csp_violation', function*() {\n        if (rateLimitReq(this, this.req)) return;\n        let params;\n        try {\n            params = yield coBody(this);\n        } catch (error) {\n            console.log('-- /csp_violation error -->', error);\n        }\n        if (params && params['csp-report']) {\n            const csp_report = params['csp-report'];\n            const value = `${csp_report['document-uri']} : ${\n                csp_report['blocked-uri']\n            }`;\n            console.log(\n                '-- /csp_violation -->',\n                value,\n                '--',\n                this.req.headers['user-agent']\n            );\n        } else {\n            console.log(\n                '-- /csp_violation [no csp-report] -->',\n                params,\n                '--',\n                this.req.headers['user-agent']\n            );\n        }\n        this.body = '';\n    });\n\n    router.post('/save_cords', koaBody, function*() {\n        const params = this.request.body;\n        const { csrf, x, y } =\n            typeof params === 'string' ? JSON.parse(params) : params;\n        if (!checkCSRF(this, csrf)) return;\n        const user = yield models.User.findOne({\n            where: { id: this.session.user },\n        });\n        if (user) {\n            let data = user.sign_up_meta ? JSON.parse(user.sign_up_meta) : {};\n            data['button_screen_x'] = x;\n            data['button_screen_y'] = y;\n            data['last_step'] = 3;\n            try {\n                user.update({\n                    sign_up_meta: JSON.stringify(data),\n                });\n            } catch (error) {\n                console.error(\n                    'Error in /save_cords api call',\n                    this.session.uid,\n                    error.message\n                );\n                this.body = JSON.stringify({ error: error.message });\n                this.status = 500;\n            }\n        }\n        this.body = JSON.stringify({ status: 'ok' });\n    });\n\n    router.post('/setUserPreferences', koaBody, function*() {\n        const params = this.request.body;\n        const { csrf, payload } =\n            typeof params === 'string' ? JSON.parse(params) : params;\n        if (!checkCSRF(this, csrf)) return;\n        console.log(\n            '-- /setUserPreferences -->',\n            this.session.user,\n            this.session.uid,\n            payload\n        );\n        if (!this.session.a) {\n            this.body = 'missing logged in account';\n            this.status = 500;\n            return;\n        }\n        try {\n            const json = JSON.stringify(payload);\n            if (json.length > 1024) throw new Error('the data is too long');\n            this.session.user_prefs = json;\n            this.body = JSON.stringify({ status: 'ok' });\n        } catch (error) {\n            console.error(\n                'Error in /setUserPreferences api call',\n                this.session.uid,\n                error\n            );\n            this.body = JSON.stringify({ error: error.message });\n            this.status = 500;\n        }\n    });\n\n    router.post('/isTosAccepted', koaBody, function*() {\n        const params = this.request.body;\n        const { csrf } =\n            typeof params === 'string' ? JSON.parse(params) : params;\n        if (!checkCSRF(this, csrf)) return;\n\n        this.body = '{}';\n        this.status = 200;\n\n        if (!this.session.a) {\n            this.body = 'missing username';\n            this.status = 500;\n            return;\n        }\n\n        try {\n            const res = yield api.signedCallAsync(\n                'conveyor.get_tags_for_user',\n                [this.session.a],\n                config.get('conveyor_username'),\n                config.get('conveyor_posting_wif')\n            );\n\n            this.body = JSON.stringify(res.includes(ACCEPTED_TOS_TAG));\n        } catch (error) {\n            console.error(\n                'Error in /isTosAccepted api call',\n                this.session.a,\n                error\n            );\n            this.body = JSON.stringify({ error: error.message });\n            this.status = 500;\n        }\n    });\n\n    router.post('/acceptTos', koaBody, function*() {\n        const params = this.request.body;\n        const { csrf } =\n            typeof params === 'string' ? JSON.parse(params) : params;\n        if (!checkCSRF(this, csrf)) return;\n\n        if (!this.session.a) {\n            this.body = 'missing logged in account';\n            this.status = 500;\n            return;\n        }\n        try {\n            yield api.signedCallAsync(\n                'conveyor.assign_tag',\n                {\n                    uid: this.session.a,\n                    tag: ACCEPTED_TOS_TAG,\n                },\n                config.get('conveyor_username'),\n                config.get('conveyor_posting_wif')\n            );\n            this.body = JSON.stringify({ status: 'ok' });\n        } catch (error) {\n            console.error(\n                'Error in /acceptTos api call',\n                this.session.uid,\n                error\n            );\n            this.body = JSON.stringify({ error: error.message });\n            this.status = 500;\n        }\n    });\n}\n\n/**\n @arg signingKey {string|PrivateKey} - WIF or PrivateKey object\n */\nfunction* createAccount({\n    signingKey,\n    fee,\n    creator,\n    new_account_name,\n    json_metadata = '',\n    delegation,\n    owner,\n    active,\n    posting,\n    memo,\n}) {\n    const operations = [\n        [\n            'account_create_with_delegation',\n            {\n                fee,\n                creator,\n                new_account_name,\n                json_metadata,\n                delegation,\n                owner: {\n                    weight_threshold: 1,\n                    account_auths: [],\n                    key_auths: [[owner, 1]],\n                },\n                active: {\n                    weight_threshold: 1,\n                    account_auths: [],\n                    key_auths: [[active, 1]],\n                },\n                posting: {\n                    weight_threshold: 1,\n                    account_auths: [],\n                    key_auths: [[posting, 1]],\n                },\n                memo_key: memo,\n            },\n        ],\n    ];\n    yield broadcast.sendAsync(\n        {\n            extensions: [],\n            operations,\n        },\n        [signingKey]\n    );\n}\n\nconst parseSig = hexSig => {\n    try {\n        return Signature.fromHex(hexSig);\n    } catch (e) {\n        return null;\n    }\n};\n"]}