{"version":3,"sources":["../../../src/server/json/user_json.jsx"],"names":["useUserJson","app","router","use","routes","get","routeRegex","UserJson","segments","url","split","user_name","match","UserNameJson","replace","user","status","api","getAccountsAsync","chainAccount","json_metadata","JSON","parse","e","body"],"mappings":";;;;;;;;;;;;;;kBAKwBA,W;;AALxB;;;;AACA;;;;AACA;;AACA;;;;AAEe,SAASA,WAAT,CAAqBC,GAArB,EAA0B;AACrC,QAAMC,SAAS,0BAAf;AACAD,QAAIE,GAAJ,CAAQD,OAAOE,MAAP,EAAR;;AAEAF,WAAOG,GAAP,CAAWC,yBAAWC,QAAtB,0CAAgC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAC5B;AACMC,gCAFsB,GAEX,KAAKC,GAAL,CAASC,KAAT,CAAe,GAAf,CAFW;AAGtBC,iCAHsB,GAGVH,SAAS,CAAT,EACbI,KADa,CACPN,yBAAWO,YADJ,EACkB,CADlB,EAEbC,OAFa,CAEL,GAFK,EAEA,EAFA,CAHU;AAMxBC,4BANwB,GAMjB,EANiB;AAOxBC,8BAPwB,GAOf,EAPe;AAAA;AAAA,+BASCC,aAAIC,gBAAJ,CAAqB,CAACP,SAAD,CAArB,CATD;;AAAA;AAAA;AAAA;AASrBQ,oCATqB;;;AAW5B,4BAAIA,YAAJ,EAAkB;AACdJ,mCAAOI,YAAP;AACA,gCAAI;AACAJ,qCAAKK,aAAL,GAAqBC,KAAKC,KAAL,CAAWP,KAAKK,aAAhB,CAArB;AACH,6BAFD,CAEE,OAAOG,CAAP,EAAU;AACRR,qCAAKK,aAAL,GAAqB,EAArB;AACH;AACDJ,qCAAS,KAAT;AACH,yBARD,MAQO;AACHD,mCAAO,kBAAP;AACAC,qCAAS,KAAT;AACH;AACD;AACA,6BAAKQ,IAAL,GAAY,EAAET,UAAF,EAAQC,cAAR,EAAZ;;AAxB4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAhC;AA0BH","file":"user_json.js","sourcesContent":["import koa_router from 'koa-router';\nimport React from 'react';\nimport { routeRegex } from 'app/ResolveRoute';\nimport { api } from '@steemit/steem-js';\n\nexport default function useUserJson(app) {\n    const router = koa_router();\n    app.use(router.routes());\n\n    router.get(routeRegex.UserJson, function*() {\n        // validate and build user details in JSON\n        const segments = this.url.split('/');\n        const user_name = segments[1]\n            .match(routeRegex.UserNameJson)[0]\n            .replace('@', '');\n        let user = '';\n        let status = '';\n\n        const [chainAccount] = yield api.getAccountsAsync([user_name]);\n\n        if (chainAccount) {\n            user = chainAccount;\n            try {\n                user.json_metadata = JSON.parse(user.json_metadata);\n            } catch (e) {\n                user.json_metadata = '';\n            }\n            status = '200';\n        } else {\n            user = 'No account found';\n            status = '404';\n        }\n        // return response and status code\n        this.body = { user, status };\n    });\n}\n"]}