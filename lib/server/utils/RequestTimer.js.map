{"version":3,"sources":["../../../src/server/utils/RequestTimer.js"],"names":["hrtimeToNanoseconds","hrtime","hrtimeToMilliseconds","RequestTimer","statsLoggerClient","prefix","tags","StatsLoggerClient","start","process","timers","inProgressTimers","requestTags","name","duration","push","logSegment","logTimers"],"mappings":";;;;;;;;;;;;;;;AAAA;;;;AACA;;;;;;AAEA;;;;AAIA,IAAMA,sBAAsB,SAAtBA,mBAAsB;AAAA,WAAU,CAACC,OAAO,CAAP,CAAD,GAAa,GAAb,GAAmB,CAACA,OAAO,CAAP,CAA9B;AAAA,CAA5B;;AAEA;;;;AAIA,IAAMC,uBAAuB,SAAvBA,oBAAuB;AAAA,WAAU,CAACD,OAAO,CAAP,CAAD,GAAa,IAAb,GAAoB,CAACA,OAAO,CAAP,CAAD,GAAa,OAA3C;AAAA,CAA7B;;AAEA;;;;;;;IAMqBE,Y;AACjB;;;;;;AAMA,0BAAYC,iBAAZ,EAA+BC,MAA/B,EAAuCC,IAAvC,EAA6C;AAAA;;AACzC,8BACIF,6BAA6BG,2BADjC,EAEI,0CAFJ;;AAKA,aAAKC,KAAL,GAAaC,QAAQR,MAAR,EAAb;AACA,aAAKS,MAAL,GAAc,EAAd;AACA,aAAKC,gBAAL,GAAwB,EAAxB;AACA,aAAKN,MAAL,GAAcA,MAAd;AACA,aAAKO,WAAL,GAAmBN,IAAnB;AACA,aAAKF,iBAAL,GAAyBA,iBAAzB;AACH;;AAED;;;;;;;;mCAIWS,I,EAAMC,Q,EAAU;AACvB,iBAAKJ,MAAL,CAAYK,IAAZ,CAAiB,CAAI,KAAKV,MAAT,SAAmBQ,IAAnB,EAA2BC,QAA3B,CAAjB;AACH;;AAED;;;;;;;;mCAKWD,I,EAAM;AACb,kCACI,OAAOA,IAAP,KAAgB,QADpB,EAEI,uCAFJ;;AAKA,iBAAKF,gBAAL,CAAsBE,IAAtB,IAA8BJ,QAAQR,MAAR,EAA9B;AACH;;AAED;;;;;;;;kCAKUY,I,EAAM;AACZ,kCACI,OAAO,KAAKF,gBAAL,CAAsBE,IAAtB,CAAP,KAAuC,WAD3C,EAEI,gCAFJ;;AAKA,iBAAKG,UAAL,CACIH,IADJ,EAEIX,qBAAqBO,QAAQR,MAAR,CAAe,KAAKU,gBAAL,CAAsBE,IAAtB,CAAf,CAArB,CAFJ;AAIA,mBAAO,KAAKF,gBAAL,CAAsBE,IAAtB,CAAP;AACH;;;iCAEQ;AACL,iBAAKG,UAAL,CACI,UADJ,EAEId,qBAAqBO,QAAQR,MAAR,CAAe,KAAKO,KAApB,CAArB,CAFJ;AAIA,iBAAKJ,iBAAL,CAAuBa,SAAvB,CAAiC,KAAKP,MAAtC,EAA8C,KAAKE,WAAnD;AACH;;;;;kBAnEgBT,Y","file":"RequestTimer.js","sourcesContent":["import assert from 'assert';\nimport StatsLoggerClient from './StatsLoggerClient';\n\n/**\n * @param {array} hrtime process.hrtime() tuple\n * @returns {number} nanoseconds\n */\nconst hrtimeToNanoseconds = hrtime => +hrtime[0] * 1e9 + +hrtime[1];\n\n/**\n * @param {array} hrtime process.hrtime() tuple\n * @returns {number} milliseconds\n */\nconst hrtimeToMilliseconds = hrtime => +hrtime[0] * 1000 + +hrtime[1] / 1000000;\n\n/**\n * Logs total request time starting at instantiation and ending when finish() is called.\n * Additional timers can be managed with startTimer('name') and stopTimer('name')\n *\n * Results are stored in `timers` property and submitted to statsd at finish().\n */\nexport default class RequestTimer {\n    /**\n     *\n     * @param {StatsLoggerClient} statsLoggerClient\n     * @param {string} prefix namespace to tack on the front of each timer name\n     * @param {string} tags not yet supported by statsd / StatsLoggerClient\n     */\n    constructor(statsLoggerClient, prefix, tags) {\n        assert(\n            statsLoggerClient instanceof StatsLoggerClient,\n            'provide an instance of StatsLoggerClient'\n        );\n\n        this.start = process.hrtime();\n        this.timers = [];\n        this.inProgressTimers = {};\n        this.prefix = prefix;\n        this.requestTags = tags;\n        this.statsLoggerClient = statsLoggerClient;\n    }\n\n    /**\n     * @param {string} name\n     * @param {number} duration milliseconds\n     */\n    logSegment(name, duration) {\n        this.timers.push([`${this.prefix}.${name}`, duration]);\n    }\n\n    /**\n     * Starts keeping track of something to time.\n     *\n     * @param {string} name\n     */\n    startTimer(name) {\n        assert(\n            typeof name === 'string',\n            'a name for the timer must be provided'\n        );\n\n        this.inProgressTimers[name] = process.hrtime();\n    }\n\n    /**\n     * Stops an in-progress timer and stores it in the list of timers to log when the request is finished.\n     *\n     * @param {*} name\n     */\n    stopTimer(name) {\n        assert(\n            typeof this.inProgressTimers[name] !== 'undefined',\n            'provide an existing timer name'\n        );\n\n        this.logSegment(\n            name,\n            hrtimeToMilliseconds(process.hrtime(this.inProgressTimers[name]))\n        );\n        delete this.inProgressTimers[name];\n    }\n\n    finish() {\n        this.logSegment(\n            'total_ms',\n            hrtimeToMilliseconds(process.hrtime(this.start))\n        );\n        this.statsLoggerClient.logTimers(this.timers, this.requestTags);\n    }\n}\n"]}