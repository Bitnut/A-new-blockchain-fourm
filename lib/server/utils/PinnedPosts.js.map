{"version":3,"sources":["../../../src/server/utils/PinnedPosts.js"],"names":["console","info","loadPinnedPosts","postData","loadedPostData","pinned_posts","notices","url","split","username","postId","steem","api","getContentAsync","post","pinned","push","notice","permalink","pinnedPosts","config","https","resolve","reject","emptyPinnedPosts","pinned_posts_url","request","get","data","resp","on","chunk","json","JSON","parse","Object","error","e"],"mappings":"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","file":"PinnedPosts.js","sourcesContent":["import * as config from 'config';\nimport * as https from 'https';\nimport * as steem from '@steemit/steem-js';\n\nfunction loadPinnedPosts() {\n    return new Promise((resolve, reject) => {\n        const emptyPinnedPosts = {\n            pinned_posts: [],\n            notices: [],\n        };\n\n        if (!config.pinned_posts_url) {\n            resolve(emptyPinnedPosts);\n        }\n\n        const request = https.get(config.pinned_posts_url, resp => {\n            let data = '';\n            resp.on('data', chunk => {\n                data += chunk;\n            });\n            resp.on('end', () => {\n                const json = JSON.parse(data);\n                console.info('Received pinned posts payload', json);\n                if (json === Object(json)) {\n                    resolve(json);\n                }\n            });\n        });\n\n        request.on('error', e => {\n            console.error('Could not load pinned posts', e);\n            resolve(emptyPinnedPosts);\n        });\n    });\n}\n\nexport async function pinnedPosts() {\n    console.info('Loading pinned posts');\n\n    const postData = await loadPinnedPosts();\n    let loadedPostData = {\n        pinned_posts: [],\n        notices: [],\n    };\n\n    for (const url of postData.pinned_posts) {\n        const [username, postId] = url.split('@')[1].split('/');\n        let post = await steem.api.getContentAsync(username, postId);\n        post.pinned = true;\n        loadedPostData.pinned_posts.push(post);\n    }\n\n    for (const notice of postData.notices) {\n        if (notice.permalink) {\n            const [username, postId] = notice.permalink\n                .split('@')[1]\n                .split('/');\n            let post = await steem.api.getContentAsync(username, postId);\n            loadedPostData.notices.push(Object.assign({}, notice, post));\n        } else {\n            loadedPostData.notices.push(notice);\n        }\n    }\n\n    console.info('Loaded pinned posts');\n\n    return loadedPostData;\n}\n"]}