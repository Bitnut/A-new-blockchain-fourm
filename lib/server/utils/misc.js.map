{"version":3,"sources":["../../../src/server/utils/misc.js"],"names":["emailRegex","getRemoteIp","req","remote_address","headers","connection","remoteAddress","ip_match","match","ip_last_hit","rateLimitReq","ctx","ip","now","Date","forEach","v","k","seconds","delete","result","has","console","error","status","body","set","checkCSRF","csrf","assertCSRF","e","log","request","method","url","session","uid","getSupportedLocales","locales","files","fs","readdirSync","path","join","__dirname","filename","match_res","push","module","exports"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AAEA,IAAMA,aAAa,ggBAAnB;;AAEA,SAASC,WAAT,CAAqBC,GAArB,EAA0B;AACtB,QAAMC,iBACFD,IAAIE,OAAJ,CAAY,iBAAZ,KAAkCF,IAAIG,UAAJ,CAAeC,aADrD;AAEA,QAAMC,WAAWJ,iBACXA,eAAeK,KAAf,CAAqB,sBAArB,CADW,GAEX,IAFN;AAGA,WAAOD,WAAWA,SAAS,CAAT,CAAX,GAAyB,iBAAIJ,cAAJ,CAAhC;AACH;;AAED,IAAIM,cAAc,mBAAlB;AACA,SAASC,YAAT,CAAsBC,GAAtB,EAA2BT,GAA3B,EAAgC;AAC5B,QAAMU,KAAKV,IAAIE,OAAJ,CAAY,iBAAZ,KAAkCF,IAAIG,UAAJ,CAAeC,aAA5D;AACA,QAAMO,MAAMC,KAAKD,GAAL,EAAZ;;AAEA;AACAJ,gBAAYM,OAAZ,CAAoB,UAACC,CAAD,EAAIC,CAAJ,EAAU;AAC1B,YAAMC,UAAU,CAACL,MAAMG,CAAP,IAAY,IAA5B;AACA,YAAIE,UAAU,CAAd,EAAiB;AACbT,wBAAYU,MAAZ,CAAmBP,EAAnB;AACH;AACJ,KALD;;AAOA,QAAIQ,SAAS,KAAb;AACA;AACA,QAAIX,YAAYY,GAAZ,CAAgBT,EAAhB,CAAJ,EAAyB;AACrB;AACA;AACAU,gBAAQC,KAAR;AACAZ,YAAIa,MAAJ,GAAa,GAAb;AACAb,YAAIc,IAAJ,GAAW,mBAAX;AACAL,iBAAS,IAAT;AACH;;AAED;AACAX,gBAAYiB,GAAZ,CAAgBd,EAAhB,EAAoBC,GAApB;AACA,WAAOO,MAAP;AACH;;AAED,SAASO,SAAT,CAAmBhB,GAAnB,EAAwBiB,IAAxB,EAA8B;AAC1B,QAAI;AACAjB,YAAIkB,UAAJ,CAAeD,IAAf;AACH,KAFD,CAEE,OAAOE,CAAP,EAAU;AACRnB,YAAIa,MAAJ,GAAa,GAAb;AACAb,YAAIc,IAAJ,GAAW,oBAAX;AACAH,gBAAQS,GAAR,CACI,2BADJ,EAEIpB,IAAIqB,OAAJ,CAAYC,MAFhB,EAGItB,IAAIqB,OAAJ,CAAYE,GAHhB,EAIIvB,IAAIwB,OAAJ,CAAYC,GAJhB;AAMA,eAAO,KAAP;AACH;AACD,WAAO,IAAP;AACH;;AAED,SAASC,mBAAT,GAA+B;AAC3B,QAAMC,UAAU,EAAhB;AACA,QAAMC,QAAQC,aAAGC,WAAH,CACVC,eAAKC,IAAL,CAAUC,SAAV,EAAqB,UAArB,EAAiC,iBAAjC,CADU,CAAd;AAF2B;AAAA;AAAA;;AAAA;AAK3B,wDAAuBL,KAAvB,4GAA8B;AAAA,gBAAnBM,QAAmB;;AAC1B,gBAAMC,YAAYD,SAASrC,KAAT,CAAe,eAAf,CAAlB;AACA,gBAAIsC,SAAJ,EAAeR,QAAQS,IAAR,CAAaD,UAAU,CAAV,CAAb;AAClB;AAR0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAS3B,WAAOR,OAAP;AACH;;AAEDU,OAAOC,OAAP,GAAiB;AACbjD,0BADa;AAEbC,4BAFa;AAGbS,8BAHa;AAIbiB,wBAJa;AAKbU;AALa,CAAjB","file":"misc.js","sourcesContent":["import path from 'path';\nimport fs from 'fs';\nimport { esc } from 'db/models';\n\nconst emailRegex = /^([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x22([^\\x0d\\x22\\x5c\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x22)(\\x2e([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x22([^\\x0d\\x22\\x5c\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x22))*\\x40([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x5b([^\\x0d\\x5b-\\x5d\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x5d)(\\x2e([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x5b([^\\x0d\\x5b-\\x5d\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x5d))*$/;\n\nfunction getRemoteIp(req) {\n    const remote_address =\n        req.headers['x-forwarded-for'] || req.connection.remoteAddress;\n    const ip_match = remote_address\n        ? remote_address.match(/(\\d+\\.\\d+\\.\\d+\\.\\d+)/)\n        : null;\n    return ip_match ? ip_match[1] : esc(remote_address);\n}\n\nvar ip_last_hit = new Map();\nfunction rateLimitReq(ctx, req) {\n    const ip = req.headers['x-forwarded-for'] || req.connection.remoteAddress;\n    const now = Date.now();\n\n    // purge hits older than minutes_max\n    ip_last_hit.forEach((v, k) => {\n        const seconds = (now - v) / 1000;\n        if (seconds > 1) {\n            ip_last_hit.delete(ip);\n        }\n    });\n\n    let result = false;\n    // if ip is still in the map, abort\n    if (ip_last_hit.has(ip)) {\n        // console.log(`api rate limited for ${ip}: ${req}`);\n        // throw new Error(`Rate limit reached: one call per ${minutes_max} minutes allowed.`);\n        console.error(`Rate limit reached: one call per 1 second allowed.`);\n        ctx.status = 429;\n        ctx.body = 'Too Many Requests';\n        result = true;\n    }\n\n    // record api hit\n    ip_last_hit.set(ip, now);\n    return result;\n}\n\nfunction checkCSRF(ctx, csrf) {\n    try {\n        ctx.assertCSRF(csrf);\n    } catch (e) {\n        ctx.status = 403;\n        ctx.body = 'invalid csrf token';\n        console.log(\n            '-- invalid csrf token -->',\n            ctx.request.method,\n            ctx.request.url,\n            ctx.session.uid\n        );\n        return false;\n    }\n    return true;\n}\n\nfunction getSupportedLocales() {\n    const locales = [];\n    const files = fs.readdirSync(\n        path.join(__dirname, '../../..', 'src/app/locales')\n    );\n    for (const filename of files) {\n        const match_res = filename.match(/(\\w+)\\.json?$/);\n        if (match_res) locales.push(match_res[1]);\n    }\n    return locales;\n}\n\nmodule.exports = {\n    emailRegex,\n    getRemoteIp,\n    rateLimitReq,\n    checkCSRF,\n    getSupportedLocales,\n};\n"]}