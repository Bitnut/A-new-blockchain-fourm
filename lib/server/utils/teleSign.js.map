{"version":3,"sources":["../../../src/server/utils/teleSign.js"],"names":["verify","customer_id","config","get","api_key","Buffer","use_case_code","mobile","confirmation_code","ip","ignore_score","getScore","result","risk","recommendation","score","phone","console","log","error","numbering","cleansing","sms","country_code","phone_number","verifySms","reference_id","fields","urlencode","ucid","resource","match","join","method","headers","authHeaders","then","r","json","catch","reject","status","response","code","resolve","f","language","verify_code","template","originating_ip","body","auth_method","currDate","Date","toUTCString","nonce","parseInt","secureRandom","randomBuffer","toString","content_type","test","strToSign","sig","crypto","createHmac","update","digest","Authorization","map","encodeURI","key"],"mappings":"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","file":"teleSign.js","sourcesContent":["import fetch from 'node-fetch';\nimport config from 'config';\nimport crypto from 'crypto';\nimport secureRandom from 'secure-random';\n\nconst customer_id = config.get('telesign.customer_id');\n\nlet api_key = '';\n\nif (config.get('telesign.rest_api_key')) {\n    api_key = new Buffer(config.get('telesign.rest_api_key'), 'base64');\n}\n\nconst use_case_code = 'BACS'; // Use Case: avoid bulk attack and spammers\n\n// Testing, always blocked: 1-310-555-0100\n\n/** @return {object} - {reference_id} or {error} */\nexport default function* verify({\n    mobile,\n    confirmation_code,\n    ip,\n    ignore_score,\n}) {\n    try {\n        const result = yield getScore(mobile);\n        const { recommendation, score } = result.risk;\n        let phone = mobile;\n        // if (!ignore_score && recommendation !== 'allow') {\n        if (!ignore_score && (!score || score > 600)) {\n            console.log(\n                `TeleSign did not allow phone ${mobile} ip ${\n                    ip\n                }. TeleSign responded: ${recommendation}`\n            );\n            return {\n                error:\n                    'Unable to verify your phone number. Please try a different phone number.',\n                score,\n            };\n        }\n        if (\n            result.numbering &&\n            result.numbering.cleansing &&\n            result.numbering.cleansing.sms\n        ) {\n            const sms = result.numbering.cleansing.sms;\n            phone = sms.country_code + sms.phone_number;\n        }\n        const { reference_id } = yield verifySms({\n            mobile,\n            confirmation_code,\n            ip,\n        });\n        return { reference_id, score, phone };\n    } catch (error) {\n        console.log('-- verify score error -->', error);\n        return { error: 'Unable to verify phone, please try again later.' };\n    }\n}\n\nfunction getScore(mobile) {\n    const fields = urlencode({\n        ucid: use_case_code,\n    });\n    const resource = '/v1/phoneid/score/' + mobile.match(/\\d+/g).join('');\n    const method = 'GET';\n    return fetch(`https://rest-ww.telesign.com${resource}?${fields}`, {\n        method,\n        headers: authHeaders({ resource, method }),\n    })\n        .then(r => r.json())\n        .catch(error => {\n            console.error(\n                `ERROR: Phone ${mobile} score exception`,\n                JSON.stringify(error, null, 0)\n            );\n            return Promise.reject(error);\n        })\n        .then(response => {\n            const { status } = response;\n            if (status.code === 300) {\n                // Transaction successfully completed\n                console.log(\n                    `Phone ${mobile} score`,\n                    JSON.stringify(response, null, 0)\n                );\n                return Promise.resolve(response);\n            }\n            console.error(\n                `ERROR: Phone ${mobile} score`,\n                JSON.stringify(response, null, 0)\n            );\n            return Promise.reject(response);\n        });\n}\n\nfunction verifySms({ mobile, confirmation_code, ip }) {\n    // https://developer.telesign.com/v2.0/docs/rest_api-verify-sms\n    const f = {\n        phone_number: mobile,\n        language: 'en-US',\n        ucid: use_case_code,\n        verify_code: confirmation_code,\n        template: '$$CODE$$ is your Steemit confirmation code',\n    };\n    if (ip) f.originating_ip = ip;\n    const fields = urlencode(f);\n    // console.log('fields', fields) // logspam\n\n    const resource = '/v1/verify/sms';\n    const method = 'POST';\n    return fetch('https://rest.telesign.com' + resource, {\n        method,\n        body: fields,\n        headers: authHeaders({ resource, method, fields }),\n    })\n        .then(r => r.json())\n        .catch(error => {\n            console.error(\n                `ERROR: SMS failed to ${mobile} code ${\n                    confirmation_code\n                } req ip ${ip} exception`,\n                JSON.stringify(error, null, 0)\n            );\n            return Promise.reject(error);\n        })\n        .then(response => {\n            const { status } = response;\n            if (status.code === 290) {\n                // Message in progress\n                console.log(\n                    `Sent SMS to ${mobile} code ${confirmation_code}`,\n                    JSON.stringify(response, null, 0)\n                );\n                return Promise.resolve(response);\n            }\n            console.error(\n                `ERROR: SMS failed to ${mobile} code ${confirmation_code}:`,\n                JSON.stringify(response, null, 0)\n            );\n            return Promise.reject(response);\n        });\n}\n\n/**\n    @arg {string} resource `/v1/verify/AEBC93B5898342F790E4E19FED41A7DA`\n    @arg {string} method [GET|POST|PUT]\n    @arg {string} fields url query string\n*/\nfunction authHeaders({ resource, fields, method = 'GET' }) {\n    const auth_method = 'HMAC-SHA256';\n    const currDate = new Date().toUTCString();\n    const nonce = parseInt(\n        secureRandom.randomBuffer(8).toString('hex'),\n        16\n    ).toString(36);\n\n    let content_type = '';\n    if (/POST|PUT/.test(method))\n        content_type = 'application/x-www-form-urlencoded';\n\n    let strToSign = `${method}\\n${content_type}\\n\\nx-ts-auth-method:${\n        auth_method\n    }\\nx-ts-date:${currDate}\\nx-ts-nonce:${nonce}`;\n\n    if (fields) {\n        strToSign += '\\n' + fields;\n    }\n    strToSign += '\\n' + resource;\n\n    // console.log('strToSign', strToSign) // logspam\n    const sig = crypto\n        .createHmac('sha256', api_key)\n        .update(strToSign, 'utf8')\n        .digest('base64');\n\n    const headers = {\n        Authorization: `TSA ${customer_id}:${sig}`,\n        'Content-Type': content_type,\n        'x-ts-date': currDate,\n        'x-ts-auth-method': auth_method,\n        'x-ts-nonce': nonce,\n    };\n    return headers;\n}\n\nconst urlencode = json =>\n    Object.keys(json)\n        .map(key => encodeURI(key) + '=' + encodeURI(json[key]))\n        .join('&');\n"]}