{"version":3,"sources":["../../../src/server/sign_up_pages/enter_confirm_email.jsx"],"names":["useEnterAndConfirmEmailPages","confirmEmailHandler","checkRecaptcha","path","require","ROOT","join","__dirname","mixpanel","config","has","get","Mixpanel","init","assets_file","process","env","NODE_ENV","assets","script","push","confirmation_code","params","code","request","body","console","log","session","uid","user","models","Identity","findOne","where","provider","eid","status","email_verified","user_id","flash","success","redirect","hours_ago","Date","now","updated_at","destroy","sequelize","query","replacements","email","type","QueryTypes","SELECT","number_of_created_accounts","result","error","update","verified","User","id","account_status","track","distinct_id","eid_phone","app","router","use","routes","koaBody","rc_site_key","attributes","include","model","Account","there_is_created_account","Accounts","a","api","getAccountsAsync","name","check_account_res","account_created","length","ignored","created","alert","account","PARAM_VIEW_MODE","VIEW_MODE_WHISTLE","viewMode","picked_account_name","default_email","maxWidth","width","csrf","props","title","meta","post","trim","toLowerCase","req","connection","remoteAddress","parsed_email","match","old_uid","secureRandom","randomBuffer","toString","create","remote_ip","sign_up_meta","last_step","UserAttribute","value","r","type_of","order","existing_account","ctx","recaptcha","verificationUrl","captcha_failed","recaptcha_res","JSON","parse"],"mappings":"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","file":"enter_confirm_email.js","sourcesContent":["import koa_router from 'koa-router';\nimport koa_body from 'koa-body';\nimport request from 'co-request';\nimport React from 'react';\nimport { renderToString } from 'react-dom/server';\nimport models from 'db/models';\nimport { PARAM_VIEW_MODE, VIEW_MODE_WHISTLE } from 'shared/constants';\nimport { addToParams, makeParams } from 'app/utils/Links';\nimport ServerHTML from '../server-html';\nimport sendEmail from '../sendEmail';\nimport { getRemoteIp, checkCSRF } from 'server/utils/misc';\nimport config from 'config';\nimport MiniHeader from 'app/components/modules/MiniHeader';\nimport secureRandom from 'secure-random';\nimport Mixpanel from 'mixpanel';\nimport { api } from '@steemit/steem-js';\n\nconst path = require('path');\nconst ROOT = path.join(__dirname, '../../..');\n\n// FIXME copy paste code, refactor mixpanel out\nlet mixpanel = null;\nif (config.has('mixpanel') && config.get('mixpanel')) {\n    mixpanel = Mixpanel.init(config.get('mixpanel'));\n}\n\nlet assets_file = ROOT + '/tmp/webpack-stats-dev.json';\nif (process.env.NODE_ENV === 'production') {\n    assets_file = ROOT + '/tmp/webpack-stats-prod.json';\n}\n\nconst assets = Object.assign({}, require(assets_file), { script: [] });\n\nassets.script.push('https://www.google.com/recaptcha/api.js');\nassets.script.push('/enter_email/submit_form.js');\n\nfunction* confirmEmailHandler() {\n    const confirmation_code =\n        this.params && this.params.code\n            ? this.params.code\n            : this.request.body.code;\n    console.log(\n        '-- /confirm_email -->',\n        this.session.uid,\n        this.session.user,\n        confirmation_code\n    );\n    const eid = yield models.Identity.findOne({\n        where: { confirmation_code, provider: 'email' },\n    });\n    if (!eid) {\n        console.log(\n            'confirmation code not found',\n            this.session.uid,\n            this.session.user,\n            confirmation_code\n        );\n        this.status = 401;\n        this.body = 'confirmation code not found';\n        return;\n    }\n    if (eid.email_verified) {\n        this.session.user = eid.user_id; // session recovery (user changed browsers)\n        this.flash = { success: 'Email has already been verified' };\n        this.redirect('/approval?confirm_email=true');\n        return;\n    }\n    const hours_ago = (Date.now() - eid.updated_at) / 1000.0 / 3600.0;\n    if (hours_ago > 24.0 * 10) {\n        eid.destroy();\n        this.status = 401;\n        this.body =\n            '<!DOCTYPE html>Confirmation code expired.  Please <a href=\"/enter_email\">re-submit</a> your email for verification.';\n        return;\n    }\n\n    const number_of_created_accounts = yield models.sequelize.query(\n        `select count(*) as result from identities i join accounts a on a.user_id=i.user_id where i.provider='email' and i.email=:email and a.created=1 and a.ignored<>1`,\n        {\n            replacements: { email: eid.email },\n            type: models.sequelize.QueryTypes.SELECT,\n        }\n    );\n    if (\n        number_of_created_accounts &&\n        number_of_created_accounts[0].result > 0\n    ) {\n        console.log(\n            '-- /confirm_email email has already been used -->',\n            this.session.uid,\n            eid.email\n        );\n        this.flash = { error: 'This email has already been used' };\n        this.redirect('/pick_account');\n        return;\n    }\n\n    this.session.user = eid.user_id;\n    yield eid.update({\n        verified: true,\n    });\n    yield models.User.update(\n        { email: eid.email },\n        {\n            where: { id: eid.user_id },\n        }\n    );\n    yield models.User.update(\n        { account_status: 'waiting' },\n        {\n            where: { id: eid.user_id, account_status: 'onhold' },\n        }\n    );\n    if (mixpanel)\n        mixpanel.track('SignupStepConfirmEmail', {\n            distinct_id: this.session.uid,\n        });\n\n    const eid_phone = yield models.Identity.findOne({\n        where: { user_id: eid.user_id, provider: 'phone', verified: true },\n    });\n\n    if (eid_phone) {\n        // this.flash = { success: \"Thanks for confirming your email!\" };\n        this.redirect('/approval?confirm_email=true');\n    } else {\n        this.flash = {\n            success:\n                'Thanks for confirming your email. Your phone needs to be confirmed before proceeding.',\n        };\n        this.redirect('/enter_mobile');\n    }\n\n    // check if the phone is confirmed then redirect to create account - this is useful when we invite users and send them the link\n    // const mid = yield models.Identity.findOne({\n    //     attributes: [\"verified\"],\n    //     where: { user_id: eid.user_id, provider: \"phone\" },\n    //     order: \"id DESC\"\n    // });\n    // if (mid && mid.verified) {\n    //     this.redirect(\"/create_account\");\n    // } else {\n    //     this.redirect(\"/enter_mobile\");\n    // }\n}\n\nexport default function useEnterAndConfirmEmailPages(app) {\n    const router = koa_router();\n    app.use(router.routes());\n    const koaBody = koa_body();\n    const rc_site_key = config.get('recaptcha.site_key');\n\n    router.get('/start/:code', function*() {\n        const code = this.params.code;\n        const eid = yield models.Identity.findOne({\n            attributes: ['id', 'user_id', 'verified'],\n            where: { provider: 'email', confirmation_code: code },\n        });\n        const user = eid\n            ? yield models.User.findOne({\n                  attributes: ['id', 'account_status'],\n                  where: { id: eid.user_id },\n                  include: [\n                      {\n                          model: models.Account,\n                          attributes: ['id', 'name', 'ignored', 'created'],\n                      },\n                  ],\n              })\n            : null;\n        // validate there is email identity and user record\n        if (eid && user) {\n            // set session based on confirmation code(user from diff device, etc)\n            this.session.user = user.id;\n            if (user.uid) this.session.uid = user.uid;\n            console.log(\n                '-- checking incoming start request -->',\n                this.session.uid,\n                this.session.user\n            );\n            if (!eid.verified) {\n                yield eid.update({ verified: true });\n            }\n            if (user.account_status === 'approved') {\n                console.log(\n                    '-- approved account for -->',\n                    this.session.uid,\n                    this.session.user\n                );\n                this.redirect('/create_account');\n            } else if (user.account_status === 'created') {\n                // check if account is really created onchain\n                let there_is_created_account = false;\n                for (const a of user.Accounts) {\n                    const check_account_res = yield api.getAccountsAsync([\n                        a.name,\n                    ]);\n                    const account_created =\n                        check_account_res && check_account_res.length > 0;\n                    if (account_created && !a.ignored)\n                        there_is_created_account = true;\n                    if (!account_created && a.created) {\n                        console.log(\n                            '-- found ghost account -->',\n                            this.session.uid,\n                            this.session.user,\n                            a.name\n                        );\n                        a.update({ created: false });\n                    }\n                }\n                if (there_is_created_account) {\n                    // user clicked expired link - already created account\n                    this.flash = {\n                        alert: 'Your account has already been created.',\n                    };\n                    this.redirect('/login.html');\n                } else {\n                    user.update({ account_status: 'approved' });\n                    console.log(\n                        '-- approved account (ghost) for -->',\n                        this.session.uid,\n                        this.session.user\n                    );\n                    this.redirect('/create_account');\n                }\n            } else if (user.account_status === 'waiting') {\n                this.flash = {\n                    error: 'Your account has not been approved yet.',\n                };\n                this.redirect('/');\n            } else {\n                this.flash = { error: 'Issue with your sign up status.' };\n                this.redirect('/');\n            }\n        } else {\n            // no matching identity found redirect\n            this.flash = {\n                error:\n                    'This is not a valid sign up code. Please click the link in your welcome email.',\n            };\n            this.redirect('/');\n        }\n    });\n\n    router.get('/enter_email', function*() {\n        console.log(\n            '-- /enter_email -->',\n            this.session.uid,\n            this.session.user,\n            this.request.query.account\n        );\n        const params = addToParams({}, this.request.query, PARAM_VIEW_MODE, [\n            VIEW_MODE_WHISTLE,\n        ]);\n        const viewMode = params[PARAM_VIEW_MODE] ? params[PARAM_VIEW_MODE] : '';\n        const picked_account_name = (this.session.picked_account_name = this.request.query.account);\n        if (!picked_account_name) {\n            this.flash = { error: 'Please select your account name' };\n            this.redirect('/pick_account' + makeParams(params));\n            return;\n        }\n        // check for existing account\n        const check_account_res = yield api.getAccountsAsync([\n            picked_account_name,\n        ]);\n        if (check_account_res && check_account_res.length > 0) {\n            this.flash = {\n                error: `${\n                    picked_account_name\n                } is already taken, please try another name`,\n            };\n            this.redirect('/pick_account' + makeParams(params));\n            return;\n        }\n        let default_email = '';\n        if (this.request.query && this.request.query.email)\n            default_email = this.request.query.email;\n        const body = renderToString(\n            <div className=\"App CreateAccount\">\n                {viewMode !== VIEW_MODE_WHISTLE ? <MiniHeader /> : null}\n                <br />\n                <div\n                    className=\"row CreateAccount__step\"\n                    style={{ maxWidth: '32rem' }}\n                >\n                    <div className=\"column\">\n                        <div className=\"progress\">\n                            <span style={{ width: '50%' }}>Progress: 50%</span>\n                        </div>\n                        <form\n                            id=\"submit_email\"\n                            action={'/submit_email' + makeParams(params)}\n                            method=\"POST\"\n                        >\n                            <h4 className=\"CreateAccount__title\">\n                                Your email address, please\n                            </h4>\n                            <p>\n                                We use this to contact you and verify account\n                                ownership if this account is ever compromised.\n                                We'll send a confirmation link, so please use a\n                                valid email.\n                            </p>\n                            <input\n                                type=\"hidden\"\n                                name=\"csrf\"\n                                value={this.csrf}\n                            />\n                            <input\n                                type=\"hidden\"\n                                name=\"account\"\n                                value={picked_account_name}\n                            />\n                            <label>\n                                Email\n                                <input\n                                    type=\"email\"\n                                    name=\"email\"\n                                    defaultValue={default_email}\n                                />\n                            </label>\n                            <br />\n                            <div className=\"error\">{this.flash.error}</div>\n                            {rc_site_key ? (\n                                <button\n                                    className=\"button g-recaptcha\"\n                                    data-sitekey={rc_site_key}\n                                    data-callback=\"submit_email_form\"\n                                >\n                                    CONTINUE\n                                </button>\n                            ) : (\n                                <input\n                                    type=\"submit\"\n                                    className=\"button\"\n                                    value=\"Continue\"\n                                />\n                            )}\n                        </form>\n                    </div>\n                </div>\n            </div>\n        );\n        const props = { body, title: 'Email Address', assets, meta: [] };\n        this.body =\n            '<!DOCTYPE html>' + renderToString(<ServerHTML {...props} />);\n        if (mixpanel)\n            mixpanel.track('SignupStepEmail', {\n                distinct_id: this.session.uid,\n            });\n    });\n\n    router.post('/submit_email', koaBody, function*() {\n        if (!checkCSRF(this, this.request.body.csrf)) return;\n        const params = addToParams({}, this.request.query, PARAM_VIEW_MODE, [\n            VIEW_MODE_WHISTLE,\n        ]);\n        let { email, account } = this.request.body;\n        console.log(\n            '-- /submit_email -->',\n            this.session.uid,\n            email,\n            account,\n            this.request.query[PARAM_VIEW_MODE]\n        );\n\n        if (!email) {\n            this.flash = { error: 'Please provide an email address' };\n            this.redirect(\n                `/enter_email?account=${account}` + makeParams(params, '&')\n            );\n            return;\n        }\n        email = params.email = email.trim().toLowerCase();\n        account = params.account = account.trim().toLowerCase();\n\n        //recaptcha\n        if (config.get('recaptcha.site_key')) {\n            if (!(yield checkRecaptcha(this))) {\n                console.log(\n                    '-- /submit_email captcha verification failed -->',\n                    this.session.uid,\n                    email,\n                    this.req.connection.remoteAddress\n                );\n                this.flash = {\n                    error: 'Failed captcha verification, please try again',\n                };\n                this.redirect(`/enter_email` + makeParams(params));\n                return;\n            }\n        }\n\n        const parsed_email = email.match(/^.+\\@.*?([\\w\\d-]+\\.\\w+)$/);\n\n        if (!parsed_email || parsed_email.length < 2) {\n            console.log(\n                '-- /submit_email not valid email -->',\n                this.session.uid,\n                email\n            );\n            this.flash = { error: 'Not valid email address' };\n            this.redirect(`/enter_email` + makeParams(params));\n            return;\n        }\n\n        try {\n            // create user, use new uid\n            const old_uid = this.session.uid;\n            this.session.uid = secureRandom.randomBuffer(13).toString('hex');\n            const user = yield models.User.create({\n                uid: this.session.uid,\n                remote_ip: getRemoteIp(this.request.req),\n                sign_up_meta: JSON.stringify({ last_step: 2 }),\n                account_status: 'waiting',\n            });\n            this.session.user = user.id;\n            console.log(\n                '-- /submit_email created new user -->',\n                old_uid,\n                this.session.uid,\n                user.id\n            );\n\n            yield models.UserAttribute.create({\n                user_id: user.id,\n                value: this.session.r,\n                type_of: 'referer',\n            });\n\n            const confirmation_code = secureRandom\n                .randomBuffer(13)\n                .toString('hex');\n            // create identity\n            yield models.Identity.create({\n                user_id: user.id,\n                provider: 'email',\n                verified: false,\n                email,\n                confirmation_code,\n            });\n\n            console.log(\n                '-- /submit_email ->',\n                this.session.uid,\n                this.session.user,\n                email,\n                confirmation_code\n            );\n\n            sendEmail('confirm_email', email, { confirmation_code });\n\n            if (account) {\n                const existing_account = yield models.Account.findOne({\n                    attributes: ['id'],\n                    where: { user_id: user.id, name: account },\n                    order: 'id DESC',\n                });\n                if (!existing_account) {\n                    yield models.Account.create({\n                        user_id: user.id,\n                        name: account,\n                        remote_ip: getRemoteIp(this.request.req),\n                    });\n                }\n            }\n        } catch (error) {\n            this.flash = { error: 'Internal Server Error' };\n            this.redirect('/enter_email' + +makeParams(params));\n            console.error(\n                'Error in /submit_email :',\n                this.session.uid,\n                error.toString()\n            );\n        }\n\n        // redirect to phone verification\n        this.redirect('/enter_mobile' + makeParams(params));\n    });\n\n    router.get('/confirm_email/:code', confirmEmailHandler);\n    router.post('/confirm_email', koaBody, confirmEmailHandler);\n    router.get('/enter_email/submit_form.js', function*() {\n        this.type = 'application/javascript';\n        this.body =\n            \"function submit_email_form(){document.getElementById('submit_email').submit()}\";\n    });\n}\n\nfunction* checkRecaptcha(ctx) {\n    if (process.env.NODE_ENV !== 'production') return true;\n    const recaptcha = ctx.request.body['g-recaptcha-response'];\n    const verificationUrl =\n        'https://www.google.com/recaptcha/api/siteverify?secret=' +\n        config.get('recaptcha.secret_key') +\n        '&response=' +\n        recaptcha +\n        '&remoteip=' +\n        ctx.req.connection.remoteAddress;\n    let captcha_failed;\n    try {\n        const recaptcha_res = yield request(verificationUrl);\n        const body = JSON.parse(recaptcha_res.body);\n        captcha_failed = !body.success;\n    } catch (e) {\n        captcha_failed = true;\n        console.error(\n            '-- /submit_email recaptcha request failed -->',\n            verificationUrl,\n            e\n        );\n    }\n    return !captcha_failed;\n}\n"]}