{"version":3,"sources":["../../../src/server/sign_up_pages/enter_confirm_mobile.jsx"],"names":["useEnterAndConfirmMobilePages","confirmMobileHandler","path","require","ROOT","join","__dirname","mixpanel","config","has","get","Mixpanel","init","assets_file","process","env","NODE_ENV","assets","script","e","request","body","csrf","params","query","PARAM_VIEW_MODE","VIEW_MODE_WHISTLE","enterMobileUrl","confirmation_code","code","console","log","session","uid","user","models","User","findOne","attributes","where","id","flash","error","redirect","Identity","user_id","provider","mid","hours_ago","Date","now","updated_at","status","sequelize","replacements","phone","type","QueryTypes","SELECT","number_of_created_accounts","result","update","verified","account_status","track","distinct_id","app","router","use","routes","koaBody","viewMode","country","maxWidth","width","props","title","meta","post","localPhone","digits","length","parseInt","secureRandom","randomBuffer","toString","substring","success","seconds_ago","mobile","ip","req","ignore_score","verifyResult","score","create","text","digitArray","match"],"mappings":"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","file":"enter_confirm_mobile.js","sourcesContent":["import koa_router from 'koa-router';\nimport koa_body from 'koa-body';\nimport React from 'react';\nimport { renderToString } from 'react-dom/server';\nimport models from 'db/models';\nimport { PARAM_VIEW_MODE, VIEW_MODE_WHISTLE } from 'shared/constants';\nimport { addToParams, makeParams } from 'app/utils/Links';\nimport ServerHTML from 'server/server-html';\n// import twilioVerify from \"server/utils/twilio\";\nimport teleSignVerify from 'server/utils/teleSign';\nimport CountryCode from 'app/components/elements/CountryCode';\nimport { getRemoteIp, checkCSRF } from 'server/utils/misc';\nimport MiniHeader from 'app/components/modules/MiniHeader';\nimport secureRandom from 'secure-random';\nimport config from 'config';\nimport Mixpanel from 'mixpanel';\n\nconst path = require('path');\nconst ROOT = path.join(__dirname, '../../..');\n\n// FIXME copy paste code, refactor mixpanel out\nvar mixpanel = null;\nif (config.has('mixpanel') && config.get('mixpanel')) {\n    mixpanel = Mixpanel.init(config.get('mixpanel'));\n}\n\nvar assets_file = ROOT + '/tmp/webpack-stats-dev.json';\nif (process.env.NODE_ENV === 'production') {\n    assets_file = ROOT + '/tmp/webpack-stats-prod.json';\n}\n\nconst assets = Object.assign({}, require(assets_file), { script: [] });\n\n// function mousePosition(e) {\n//     // log x/y cords\n//     console.log(\"hereI am man\", e);\n//     if(e.type === 'mouseenter') {\n//         console.log(e.screenX, e.screenY);\n//     }\n// }\n\nfunction* confirmMobileHandler(e) {\n    if (!checkCSRF(this, this.request.body.csrf)) return;\n    const params = addToParams({}, this.request.query, PARAM_VIEW_MODE, [\n        VIEW_MODE_WHISTLE,\n    ]);\n    const enterMobileUrl = `/enter_mobile` + makeParams(params);\n\n    const confirmation_code =\n        this.params && this.params.code\n            ? this.params.code\n            : this.request.body.code;\n    console.log(\n        '-- /confirm_mobile -->',\n        this.session.uid,\n        this.session.user,\n        confirmation_code\n    );\n\n    const user = yield models.User.findOne({\n        attributes: ['id', 'account_status'],\n        where: { id: this.session.user },\n    });\n    if (!user) {\n        this.flash = {\n            error:\n                'User session not found, please make sure you have cookies enabled in your browser for this website',\n        };\n        this.redirect(enterMobileUrl);\n        return;\n    }\n    const mid = yield models.Identity.findOne({\n        where: { user_id: user.id, provider: 'phone', confirmation_code },\n    });\n\n    if (!mid) {\n        this.flash = { error: 'Wrong confirmation code' };\n        this.redirect(enterMobileUrl);\n        return;\n    }\n\n    const hours_ago = (Date.now() - mid.updated_at) / 1000.0 / 3600.0;\n    if (hours_ago > 24.0) {\n        this.status = 401;\n        this.flash = { error: 'Confirmation code has been expired' };\n        this.redirect(enterMobileUrl);\n        return;\n    }\n\n    const number_of_created_accounts = yield models.sequelize.query(\n        `select count(*) as result from identities i join accounts a on a.user_id=i.user_id where i.provider='phone' and i.phone=:phone and a.created=1 and a.ignored<>1`,\n        {\n            replacements: { phone: mid.phone },\n            type: models.sequelize.QueryTypes.SELECT,\n        }\n    );\n    if (\n        number_of_created_accounts &&\n        number_of_created_accounts[0].result > 0\n    ) {\n        console.log(\n            '-- /confirm_mobile there are created accounts -->',\n            user.id,\n            mid.phone\n        );\n        this.flash = { error: 'This phone number has already been used' };\n        this.redirect(enterMobileUrl);\n        return;\n    }\n\n    // successful new verified phone number\n    yield mid.update({ provider: 'phone', verified: true });\n    if (user.account_status === 'onhold')\n        yield user.update({ account_status: 'waiting' });\n    if (mixpanel)\n        mixpanel.track('SignupStepPhone', { distinct_id: this.session.uid });\n\n    console.log('--/Success phone redirecting user', this.session.user);\n    this.redirect('/approval' + makeParams(params));\n}\n\nexport default function useEnterAndConfirmMobilePages(app) {\n    const router = koa_router();\n    app.use(router.routes());\n    const koaBody = koa_body();\n\n    router.get('/enter_mobile', function*() {\n        console.log(\n            '-- /enter_mobile -->',\n            this.session.uid,\n            this.session.user\n        );\n        const params = addToParams({}, this.request.query, PARAM_VIEW_MODE, [\n            VIEW_MODE_WHISTLE,\n        ]);\n        const viewMode = params[PARAM_VIEW_MODE] ? params[PARAM_VIEW_MODE] : '';\n\n        const phone = this.query.phone;\n        const country = this.query.country;\n\n        const body = renderToString(\n            <div className=\"App CreateAccount\">\n                {viewMode !== VIEW_MODE_WHISTLE ? <MiniHeader /> : null}\n                <br />\n                <div\n                    className=\"row CreateAccount__step\"\n                    style={{ maxWidth: '32rem' }}\n                >\n                    <div className=\"column\">\n                        <div className=\"progress\">\n                            <div style={{ width: '90%' }} />\n                        </div>\n                        <form\n                            className=\"column\"\n                            action={'/submit_mobile' + makeParams(params)}\n                            method=\"POST\"\n                        >\n                            <h4 className=\"CreateAccount__title\">\n                                Almost there!\n                            </h4>\n\n                            <p>We need to send you a quick text. </p>\n\n                            <p>\n                                With each Steemit account comes a free initial\n                                grant of Steem Power! Phone verification helps\n                                cut down on spam accounts.\n                            </p>\n\n                            <p>\n                                <em>\n                                    Your phone number will not be used for any\n                                    other purpose other than account\n                                    verification and (potentially) account\n                                    recovery should your account ever be\n                                    compromised.\n                                </em>\n                            </p>\n\n                            <input\n                                type=\"hidden\"\n                                name=\"csrf\"\n                                value={this.csrf}\n                            />\n                            <label>\n                                Country Code\n                                <CountryCode name=\"country\" value={country} />\n                            </label>\n                            <label>\n                                Phone number\n                                <input type=\"tel\" name=\"phone\" value={phone} />\n                            </label>\n                            <div className=\"secondary\">\n                                Examples: 541-754-3010 | 89-636-48018\n                            </div>\n                            <br />\n                            <div className=\"secondary\">\n                                * Land lines cannot receive SMS messages\n                            </div>\n                            <div className=\"secondary\">\n                                * Message and data rates may apply\n                            </div>\n                            <br />\n                            <div className=\"error\">{this.flash.error}</div>\n                            <input\n                                type=\"submit\"\n                                className=\"button\"\n                                value=\"Continue\"\n                            />\n                        </form>\n                    </div>\n                </div>\n            </div>\n        );\n        const props = { body, title: 'Phone Number', assets, meta: [] };\n        this.body =\n            '<!DOCTYPE html>' + renderToString(<ServerHTML {...props} />);\n        if (mixpanel)\n            mixpanel.track('SignupStep2', { distinct_id: this.session.uid });\n    });\n\n    router.post('/submit_mobile', koaBody, function*() {\n        if (!checkCSRF(this, this.request.body.csrf)) return;\n        const user_id = this.session.user;\n        const country = this.request.body.country;\n        const localPhone = this.request.body.phone;\n        const params = addToParams({}, this.request.query, PARAM_VIEW_MODE, [\n            VIEW_MODE_WHISTLE,\n        ]);\n        const viewMode = params[PARAM_VIEW_MODE] ? params[PARAM_VIEW_MODE] : '';\n\n        if (!user_id) {\n            this.flash = {\n                error: 'Your session has been interrupted, please start over',\n            };\n            this.redirect('/pick_account' + makeParams(params));\n            return;\n        }\n        params.country = country;\n        params.phone = localPhone;\n\n        const enterMobileUrl = `/enter_mobile` + makeParams(params);\n\n        if (!country || country === '') {\n            this.flash = { error: 'Please select a country code' };\n            this.redirect(enterMobileUrl);\n            return;\n        }\n\n        if (!localPhone || digits(localPhone).length === 0) {\n            this.flash = { error: 'Please provide a phone number' };\n            this.redirect(enterMobileUrl);\n            return;\n        }\n\n        let phone = digits(parseInt(country) + localPhone);\n\n        // const blocked_prefixes = yield models.List.findAll({\n        //     attributes: [\"id\", \"value\"],\n        //     where: { kk: \"block-phone-prefix\" }\n        // });\n        // for (const bp of blocked_prefixes) {\n        //     if (phone.match(new RegExp(\"^\" + bp.value))) {\n        //         this.flash = {\n        //             error: \"Unfortunately, we don't yet have support to send SMS to your carrier, please try again later.\"\n        //         };\n        //         this.redirect(\"/enter_mobile\");\n        //         return;\n        //     }\n        // }\n\n        const confirmation_code = parseInt(\n            secureRandom.randomBuffer(8).toString('hex'),\n            16\n        )\n            .toString(10)\n            .substring(0, 5); // 4 digit code\n\n        let mid = yield models.Identity.findOne({\n            where: { user_id, provider: 'phone' },\n        });\n\n        if (mid) {\n            if (mid.verified) {\n                if (mid.phone === phone) {\n                    this.flash = { success: 'Phone number has been verified' };\n                    if (mixpanel)\n                        mixpanel.track('SignupStep3', {\n                            distinct_id: this.session.uid,\n                        });\n                    this.redirect('/approval' + makeParams(params));\n                    return;\n                }\n                yield mid.update({ verified: false, phone });\n            }\n            const seconds_ago = (Date.now() - mid.updated_at) / 1000.0;\n            if (seconds_ago < 60) {\n                this.flash = {\n                    error:\n                        'Confirmation was attempted a moment ago. You can attempt verification again in one minute.',\n                };\n                this.redirect(enterMobileUrl);\n                return;\n            }\n        }\n\n        // const twilioResult = yield twilioVerify(phone);\n        // console.log('-- /submit_mobile twilioResult -->', twilioResult);\n        //\n        // if (twilioResult === 'block') {\n        //     mid.update({score: 111111});\n        //     this.flash = { error: 'Unable to verify your phone number. Please try a different phone number.' };\n        //     this.redirect(enterMobileUrl);\n        //     return;\n        // }\n\n        const verifyResult = yield teleSignVerify({\n            mobile: phone,\n            confirmation_code,\n            ip: getRemoteIp(this.req),\n            ignore_score: true, //twilioResult === 'pass'\n        });\n\n        if (verifyResult.error) {\n            this.flash = { error: verifyResult.error };\n            this.redirect(enterMobileUrl);\n            return;\n        }\n\n        phone = verifyResult.phone;\n\n        if (mid) {\n            yield mid.update({\n                confirmation_code,\n                phone,\n                score: verifyResult.score,\n            });\n        } else {\n            mid = yield models.Identity.create({\n                provider: 'phone',\n                user_id,\n                uid: this.session.uid,\n                phone,\n                verified: false,\n                confirmation_code,\n                score: verifyResult.score,\n            });\n        }\n\n        console.log(\n            '-- /submit_mobile -->',\n            this.session.uid,\n            this.session.user,\n            phone,\n            mid.id\n        );\n\n        const body = renderToString(\n            <div className=\"App CreateAccount\">\n                {viewMode !== VIEW_MODE_WHISTLE ? <MiniHeader /> : null}\n                <br />\n                <div className=\"row\" style={{ maxWidth: '32rem' }}>\n                    <div className=\"column\">\n                        <progress max=\"100\" value=\"90\">\n                            <div className=\"progress\">\n                                <div style={{ width: '90%' }} />\n                            </div>\n                        </progress>\n                        Thank you for providing your phone number (\n                        {phone}\n                        ).\n                        <br />\n                        To continue please enter the SMS code we've sent you.\n                    </div>\n                </div>\n                <br />\n                <div className=\"row\" style={{ maxWidth: '32rem' }}>\n                    <form\n                        className=\"column\"\n                        action={'/confirm_mobile' + makeParams(params)}\n                        method=\"POST\"\n                    >\n                        <input type=\"hidden\" name=\"csrf\" value={this.csrf} />\n                        <label>\n                            Confirmation code\n                            <input type=\"text\" name=\"code\" />\n                        </label>\n                        <br />\n                        <div className=\"secondary\">\n                            Didn't receive the verification code?{' '}\n                            <a href={enterMobileUrl}>Re-send</a>\n                        </div>\n                        <br />\n                        <input\n                            type=\"submit\"\n                            className=\"button\"\n                            value=\"Continue\"\n                        />\n                    </form>\n                </div>\n            </div>\n        );\n        const props = { body, title: 'Phone Confirmation', assets, meta: [] };\n        this.body =\n            '<!DOCTYPE html>' + renderToString(<ServerHTML {...props} />);\n    });\n\n    router.get('/confirm_mobile/:code', confirmMobileHandler);\n    router.post('/confirm_mobile', koaBody, confirmMobileHandler);\n}\n\nfunction digits(text) {\n    const digitArray = text.match(/\\d+/g);\n    return digitArray ? digitArray.join('') : '';\n}\n"]}