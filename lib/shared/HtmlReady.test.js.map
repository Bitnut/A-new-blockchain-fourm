{"version":3,"sources":["../../src/shared/HtmlReady.test.js"],"names":["beforeEach","global","$STM_Config","describe","it","teststring","expect","html","toEqual","dirty","res","externalDomainDirty","externalDomainResult","cleansed","cased","cleansedcased","rescased","withuser","cleansedwithuser","reswithuser","noendingslash","cleansednoendingslash","resnoendingslash","domainInpage","cleanDomainInpage","resDomainInpage","inpage","cleanInpage","resinpage","noprotocol","cleansednoprotocol","resnoprotocol","somanylinks","htmlified","textwithmentions","mutate","usertags","join","nameinsidelinkfirst","nameinsidelinkmiddle","noRelativeHttpHttpsOrSteem","cleansedRelativeHttpHttpsOrSteem","resNoRelativeHttpHttpsOrSteem","url","prefix","suffix","input","expected","result","body","testString"],"mappings":"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","file":"HtmlReady.test.js","sourcesContent":["/* global describe, it, before, beforeEach, after, afterEach */\nimport HtmlReady from './HtmlReady';\n\nbeforeEach(() => {\n    global.$STM_Config = {};\n});\n\ndescribe('htmlready', () => {\n    it('should return an empty string if input cannot be parsed', () => {\n        const teststring = 'teststring lol'; // this string causes the xmldom parser to fail & error out\n        expect(HtmlReady(teststring).html).toEqual('');\n    });\n\n    it('should allow links where the text portion and href contains steemit.com', () => {\n        const dirty =\n            '<xml xmlns=\"http://www.w3.org/1999/xhtml\"><a href=\"https://steemit.com/signup\" xmlns=\"http://www.w3.org/1999/xhtml\">https://steemit.com/signup</a></xml>';\n        const res = HtmlReady(dirty).html;\n        expect(res).toEqual(dirty);\n    });\n\n    it('should allow in-page links ', () => {\n        const dirty =\n            '<xml xmlns=\"http://www.w3.org/1999/xhtml\"><a href=\"#some-link\" xmlns=\"http://www.w3.org/1999/xhtml\">a link location</a></xml>';\n        const res = HtmlReady(dirty).html;\n        expect(res).toEqual(dirty);\n\n        const externalDomainDirty =\n            '<xml xmlns=\"http://www.w3.org/1999/xhtml\"><a href=\"https://anotherwebsite.com/apples#some-link\" xmlns=\"http://www.w3.org/1999/xhtml\">Another website\\'s apple section</a></xml>';\n        const externalDomainResult = HtmlReady(externalDomainDirty).html;\n        expect(externalDomainResult).toEqual(externalDomainDirty);\n    });\n\n    it('should not allow links where the text portion contains steemit.com but the link does not', () => {\n        // There isn't an easy way to mock counterpart, even with proxyquire, so we just test for the missing translation message -- ugly but ok\n\n        const dirty =\n            '<xml xmlns=\"http://www.w3.org/1999/xhtml\"><a href=\"https://steamit.com/signup\" xmlns=\"http://www.w3.org/1999/xhtml\">https://steemit.com/signup</a></xml>';\n        const cleansed =\n            '<xml xmlns=\"http://www.w3.org/1999/xhtml\"><div title=\"missing translation: en.g.phishy_message\" class=\"phishy\">https://steemit.com/signup / https://steamit.com/signup</div></xml>';\n        const res = HtmlReady(dirty).html;\n        expect(res).toEqual(cleansed);\n\n        const cased =\n            '<xml xmlns=\"http://www.w3.org/1999/xhtml\"><a href=\"https://steamit.com/signup\" xmlns=\"http://www.w3.org/1999/xhtml\">https://Steemit.com/signup</a></xml>';\n        const cleansedcased =\n            '<xml xmlns=\"http://www.w3.org/1999/xhtml\"><div title=\"missing translation: en.g.phishy_message\" class=\"phishy\">https://Steemit.com/signup / https://steamit.com/signup</div></xml>';\n        const rescased = HtmlReady(cased).html;\n        expect(rescased).toEqual(cleansedcased);\n\n        const withuser =\n            '<xml xmlns=\"http://www.w3.org/1999/xhtml\"><a href=\"https://steamit.com/signup\" xmlns=\"http://www.w3.org/1999/xhtml\">https://official@steemit.com/signup</a></xml>';\n        const cleansedwithuser =\n            '<xml xmlns=\"http://www.w3.org/1999/xhtml\"><div title=\"missing translation: en.g.phishy_message\" class=\"phishy\">https://official@steemit.com/signup / https://steamit.com/signup</div></xml>';\n        const reswithuser = HtmlReady(withuser).html;\n        expect(reswithuser).toEqual(cleansedwithuser);\n\n        const noendingslash =\n            '<xml xmlns=\"http://www.w3.org/1999/xhtml\"><a href=\"https://steamit.com\" xmlns=\"http://www.w3.org/1999/xhtml\">https://steemit.com</a></xml>';\n        const cleansednoendingslash =\n            '<xml xmlns=\"http://www.w3.org/1999/xhtml\"><div title=\"missing translation: en.g.phishy_message\" class=\"phishy\">https://steemit.com / https://steamit.com</div></xml>';\n        const resnoendingslash = HtmlReady(noendingslash).html;\n        expect(resnoendingslash).toEqual(cleansednoendingslash);\n\n        //make sure extra-domain in-page links are also caught by our phishy link scan.\n        const domainInpage =\n            '<xml xmlns=\"http://www.w3.org/1999/xhtml\"><a href=\"https://steamit.com#really-evil-inpage-component\" xmlns=\"http://www.w3.org/1999/xhtml\">https://steemit.com</a></xml>';\n        const cleanDomainInpage =\n            '<xml xmlns=\"http://www.w3.org/1999/xhtml\"><div title=\"missing translation: en.g.phishy_message\" class=\"phishy\">https://steemit.com / https://steamit.com#really-evil-inpage-component</div></xml>';\n        const resDomainInpage = HtmlReady(domainInpage).html;\n        expect(resDomainInpage).toEqual(cleanDomainInpage);\n\n        // anchor links including steemit.com should be allowed\n        const inpage =\n            '<xml xmlns=\"http://www.w3.org/1999/xhtml\"><a href=\"#https://steamit.com/unlikelyinpagelink\" xmlns=\"http://www.w3.org/1999/xhtml\">Go down lower for https://steemit.com info!</a></xml>';\n        const cleanInpage =\n            '<xml xmlns=\"http://www.w3.org/1999/xhtml\"><a href=\"#https://steamit.com/unlikelyinpagelink\" xmlns=\"http://www.w3.org/1999/xhtml\">Go down lower for https://steemit.com info!</a></xml>';\n        const resinpage = HtmlReady(inpage).html;\n        expect(resinpage).toEqual(cleanInpage);\n\n        const noprotocol =\n            '<xml xmlns=\"http://www.w3.org/1999/xhtml\"><a href=\"https://steamit.com/\" xmlns=\"http://www.w3.org/1999/xhtml\">for a good time, visit steemit.com today</a></xml>';\n        const cleansednoprotocol =\n            '<xml xmlns=\"http://www.w3.org/1999/xhtml\"><div title=\"missing translation: en.g.phishy_message\" class=\"phishy\">for a good time, visit steemit.com today / https://steamit.com/</div></xml>';\n        const resnoprotocol = HtmlReady(noprotocol).html;\n        expect(resnoprotocol).toEqual(cleansednoprotocol);\n    });\n\n    it('should allow more than one link per post', () => {\n        const somanylinks =\n            '<xml xmlns=\"http://www.w3.org/1999/xhtml\">https://foo.com and https://blah.com</xml>';\n        const htmlified =\n            '<xml xmlns=\"http://www.w3.org/1999/xhtml\"><span><a href=\"https://foo.com\">https://foo.com</a> and <a href=\"https://blah.com\">https://blah.com</a></span></xml>';\n        const res = HtmlReady(somanylinks).html;\n        expect(res).toEqual(htmlified);\n    });\n\n    it('should link usernames', () => {\n        const textwithmentions =\n            '<xml xmlns=\"http://www.w3.org/1999/xhtml\">@username (@a1b2, whatever</xml>';\n        const htmlified =\n            '<xml xmlns=\"http://www.w3.org/1999/xhtml\"><span><a href=\"/@username\">@username</a> (<a href=\"/@a1b2\">@a1b2</a>, whatever</span></xml>';\n        const res = HtmlReady(textwithmentions).html;\n        expect(res).toEqual(htmlified);\n    });\n\n    it('should detect only valid mentions', () => {\n        const textwithmentions =\n            '@abc @xx (@aaa1) @_x @eee, @fff! https://x.com/@zzz/test';\n        const res = HtmlReady(textwithmentions, { mutate: false });\n        const usertags = Array.from(res.usertags).join(',');\n        expect(usertags).toEqual('abc,aaa1,eee,fff');\n    });\n\n    it('should not link usernames at the front of linked text', () => {\n        const nameinsidelinkfirst =\n            '<xml xmlns=\"http://www.w3.org/1999/xhtml\"><a href=\"https://steemit.com/signup\">@hihi</a></xml>';\n        const htmlified =\n            '<xml xmlns=\"http://www.w3.org/1999/xhtml\"><a href=\"https://steemit.com/signup\">@hihi</a></xml>';\n        const res = HtmlReady(nameinsidelinkfirst).html;\n        expect(res).toEqual(htmlified);\n    });\n\n    it('should not link usernames in the middle of linked text', () => {\n        const nameinsidelinkmiddle =\n            '<xml xmlns=\"http://www.w3.org/1999/xhtml\"><a href=\"https://steemit.com/signup\">hi @hihi</a></xml>';\n        const htmlified =\n            '<xml xmlns=\"http://www.w3.org/1999/xhtml\"><a href=\"https://steemit.com/signup\">hi @hihi</a></xml>';\n        const res = HtmlReady(nameinsidelinkmiddle).html;\n        expect(res).toEqual(htmlified);\n    });\n\n    it('should make relative links absolute with https by default', () => {\n        const noRelativeHttpHttpsOrSteem =\n            '<xml xmlns=\"http://www.w3.org/1999/xhtml\"><a href=\"land.com\"> zippy </a> </xml>';\n        const cleansedRelativeHttpHttpsOrSteem =\n            '<xml xmlns=\"http://www.w3.org/1999/xhtml\"><a href=\"https://land.com\"> zippy </a> </xml>';\n        const resNoRelativeHttpHttpsOrSteem = HtmlReady(\n            noRelativeHttpHttpsOrSteem\n        ).html;\n        expect(resNoRelativeHttpHttpsOrSteem).toEqual(\n            cleansedRelativeHttpHttpsOrSteem\n        );\n    });\n\n    it('should allow the steem uri scheme for vessel links', () => {\n        const noRelativeHttpHttpsOrSteem =\n            '<xml xmlns=\"http://www.w3.org/1999/xhtml\"><a href=\"steem://veins.com\"> arteries </a> </xml>';\n        const cleansedRelativeHttpHttpsOrSteem =\n            '<xml xmlns=\"http://www.w3.org/1999/xhtml\"><a href=\"steem://veins.com\"> arteries </a> </xml>';\n        const resNoRelativeHttpHttpsOrSteem = HtmlReady(\n            noRelativeHttpHttpsOrSteem\n        ).html;\n        expect(resNoRelativeHttpHttpsOrSteem).toEqual(\n            cleansedRelativeHttpHttpsOrSteem\n        );\n    });\n\n    it('should not mistake usernames in valid comment urls as mentions', () => {\n        const url =\n            'https://steemit.com/spam/@test-safari/34gfex-december-spam#@test-safari/re-test-safari-34gfex-december-spam-20180110t234627522z';\n        const prefix = '<xml xmlns=\"http://www.w3.org/1999/xhtml\">';\n        const suffix = '</xml>';\n        const input = prefix + url + suffix;\n        const expected =\n            prefix +\n            '<span><a href=\"' +\n            url +\n            '\">' +\n            url +\n            '</a></span>' +\n            suffix;\n        const result = HtmlReady(input).html;\n        expect(result).toEqual(expected);\n    });\n\n    it('should not modify text when mention contains invalid username', () => {\n        const body =\n            'valid mention match but invalid username..@usernamewaytoolong';\n        const prefix = '<xml xmlns=\"http://www.w3.org/1999/xhtml\">';\n        const suffix = '</xml>';\n        const input = prefix + body + suffix;\n        const result = HtmlReady(input).html;\n        expect(result).toEqual(input);\n    });\n\n    it('should detect urls that are phishy', () => {\n        const dirty =\n            '<xml xmlns=\"http://www.w3.org/1999/xhtml\"><a href=\"https://steewit.com/signup\" xmlns=\"http://www.w3.org/1999/xhtml\">https://steemit.com/signup</a></xml>';\n        const cleansed =\n            '<xml xmlns=\"http://www.w3.org/1999/xhtml\"><div title=\"missing translation: en.g.phishy_message\" class=\"phishy\">https://steemit.com/signup / https://steewit.com/signup</div></xml>';\n        const res = HtmlReady(dirty).html;\n        expect(res).toEqual(cleansed);\n    });\n\n    it('should not omit text on same line as youtube link', () => {\n        const testString =\n            '<html><p>before text https://www.youtube.com/watch?v=NrS9vvNgx7I after text</p></html>';\n        const htmlified =\n            '<html xmlns=\"http://www.w3.org/1999/xhtml\"><p>before text ~~~ embed:NrS9vvNgx7I youtube ~~~ after text</p></html>';\n        const res = HtmlReady(testString).html;\n        expect(res).toEqual(htmlified);\n    });\n\n    it('should not omit text on same line as vimeo link', () => {\n        const testString =\n            '<html><p>before text https://vimeo.com/193628816/ after text</p></html>';\n        const htmlified =\n            '<html xmlns=\"http://www.w3.org/1999/xhtml\"><p>before text ~~~ embed:193628816 vimeo ~~~ after text</p></html>';\n        const res = HtmlReady(testString).html;\n        expect(res).toEqual(htmlified);\n    });\n});\n"]}