{"version":3,"sources":["../../../src/db/utils/find_user.js"],"names":["findUser","findByProvider","provider_user_id","resolve","query","attributes","where","models","Identity","findOne","then","identity","User","id","user_id","u","email","uid","name","console","log","where_or","push","length","$or","user"],"mappings":";;;;;;;;;;kBAoBwBA,Q;;AApBxB;;;;;;AAEA,SAASC,cAAT,CAAwBC,gBAAxB,EAA0CC,OAA1C,EAAmD;AAC/C,QAAI,CAACD,gBAAL,EAAuBC,QAAQ,IAAR;AACvB,QAAMC,QAAQ;AACVC,oBAAY,CAAC,SAAD,CADF;AAEVC,eAAO,EAAEJ,kCAAF;AAFG,KAAd;AAIAK,qBAAOC,QAAP,CAAgBC,OAAhB,CAAwBL,KAAxB,EAA+BM,IAA/B,CAAoC,oBAAY;AAC5C,YAAIC,QAAJ,EAAc;AACVJ,6BAAOK,IAAP,CAAYH,OAAZ,CAAoB;AAChBJ,4BAAY,CAAC,IAAD,CADI;AAEhBC,uBAAO,EAAEO,IAAIF,SAASG,OAAf;AAFS,aAApB,EAGGJ,IAHH,CAGQ;AAAA,uBAAKP,QAAQY,CAAR,CAAL;AAAA,aAHR;AAIH,SALD,MAKO;AACHZ,oBAAQ,IAAR;AACH;AACJ,KATD;AAUH;;AAEc,SAASH,QAAT,OAMZ;AAAA,QALCc,OAKD,QALCA,OAKD;AAAA,QAJCE,KAID,QAJCA,KAID;AAAA,QAHCC,GAGD,QAHCA,GAGD;AAAA,QAFCf,gBAED,QAFCA,gBAED;AAAA,QADCgB,IACD,QADCA,IACD;;AACCC,YAAQC,GAAR,CACI,kBADJ,EAEIN,OAFJ,EAGIE,KAHJ,EAIIC,GAJJ,EAKIf,gBALJ,EAMIgB,IANJ;AAQA,WAAO,sBAAY,mBAAW;AAC1B,YAAId,cAAJ;AACA,YAAMiB,WAAW,EAAjB;AACA,YAAIP,OAAJ,EAAaO,SAASC,IAAT,CAAc,EAAET,IAAIC,OAAN,EAAd;AACb,YAAIE,KAAJ,EAAWK,SAASC,IAAT,CAAc,EAAEN,YAAF,EAAd;AACX,YAAIE,IAAJ,EAAUG,SAASC,IAAT,CAAc,EAAEJ,UAAF,EAAd;AACV,YAAID,GAAJ,EAASI,SAASC,IAAT,CAAc,EAAEL,QAAF,EAAd;AACT,YAAII,SAASE,MAAT,GAAkB,CAAtB,EAAyB;AACrBnB,oBAAQ;AACJC,4BAAY,CAAC,IAAD,CADR;AAEJC,uBAAO,EAAEkB,KAAKH,QAAP;AAFH,aAAR;AAIAF,oBAAQC,GAAR,CAAY,uBAAZ,EAAqChB,KAArC;AACAG,6BAAOK,IAAP,CAAYH,OAAZ,CAAoBL,KAApB,EAA2BM,IAA3B,CAAgC,gBAAQ;AACpC,oBAAIe,IAAJ,EAAUtB,QAAQsB,IAAR,EAAV,KACK;AACDxB,mCAAeC,gBAAf,EAAiCC,OAAjC;AACH;AACJ,aALD;AAMH,SAZD,MAYO;AACHF,2BAAeC,gBAAf,EAAiCC,OAAjC;AACH;AACJ,KAtBM,CAAP;AAuBH","file":"find_user.js","sourcesContent":["import models from '../models';\n\nfunction findByProvider(provider_user_id, resolve) {\n    if (!provider_user_id) resolve(null);\n    const query = {\n        attributes: ['user_id'],\n        where: { provider_user_id },\n    };\n    models.Identity.findOne(query).then(identity => {\n        if (identity) {\n            models.User.findOne({\n                attributes: ['id'],\n                where: { id: identity.user_id },\n            }).then(u => resolve(u));\n        } else {\n            resolve(null);\n        }\n    });\n}\n\nexport default function findUser({\n    user_id,\n    email,\n    uid,\n    provider_user_id,\n    name,\n}) {\n    console.log(\n        '-- findUser  -->',\n        user_id,\n        email,\n        uid,\n        provider_user_id,\n        name\n    );\n    return new Promise(resolve => {\n        let query;\n        const where_or = [];\n        if (user_id) where_or.push({ id: user_id });\n        if (email) where_or.push({ email });\n        if (name) where_or.push({ name });\n        if (uid) where_or.push({ uid });\n        if (where_or.length > 0) {\n            query = {\n                attributes: ['id'],\n                where: { $or: where_or },\n            };\n            console.log('-- findUser query -->', query);\n            models.User.findOne(query).then(user => {\n                if (user) resolve(user);\n                else {\n                    findByProvider(provider_user_id, resolve);\n                }\n            });\n        } else {\n            findByProvider(provider_user_id, resolve);\n        }\n    });\n}\n"]}