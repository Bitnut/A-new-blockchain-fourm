{"version":3,"sources":["../../../src/app/utils/ParsersAndFormatters.js"],"names":["formatDecimal","parsePayoutAmount","countDecimals","translateError","fractional_part_len","value","parts","Number","split","length","decPlaces","truncate0s","decSeparator","fl","i","j","sign","thouSeparator","abs_value","isNaN","Math","abs","parseInt","toFixed","decPart","slice","substr","replace","amount","parseFloat","String","log10","str","leadingDigits","substring","log","LN10","n","repLog10","rep2","rep","neg","charAt","out","max","match","join","undefined","string"],"mappings":"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","file":"ParsersAndFormatters.js","sourcesContent":["import tt from 'counterpart';\n\nfunction fractional_part_len(value) {\n    const parts = (Number(value) + '').split('.');\n    return parts.length < 2 ? 0 : parts[1].length;\n}\n\n// FIXME this should be unit tested.. here is one bug: 501,695,.505\nexport function formatDecimal(value, decPlaces = 2, truncate0s = true) {\n    let decSeparator, fl, i, j, sign, thouSeparator, abs_value;\n    if (value === null || value === void 0 || isNaN(value)) {\n        return ['N', 'a', 'N'];\n    }\n    if (truncate0s) {\n        fl = fractional_part_len(value);\n        if (fl < 2) fl = 2;\n        if (fl < decPlaces) decPlaces = fl;\n    }\n    decSeparator = '.';\n    thouSeparator = ',';\n    sign = value < 0 ? '-' : '';\n    abs_value = Math.abs(value);\n    i = parseInt(abs_value.toFixed(decPlaces), 10) + '';\n    j = i.length;\n    j = i.length > 3 ? j % 3 : 0;\n    const decPart = decPlaces\n        ? decSeparator +\n          Math.abs(abs_value - i)\n              .toFixed(decPlaces)\n              .slice(2)\n        : '';\n    return [\n        sign +\n            (j ? i.substr(0, j) + thouSeparator : '') +\n            i.substr(j).replace(/(\\d{3})(?=\\d)/g, '$1' + thouSeparator),\n        decPart,\n    ];\n}\n\nexport function parsePayoutAmount(amount) {\n    return parseFloat(String(amount).replace(/\\s[A-Z]*$/, ''));\n}\n\n/**\n    This is a rough approximation of log10 that works with huge digit-strings.\n    Warning: Math.log10(0) === NaN\n    The 0.00000001 offset fixes cases of Math.log(1000)/Math.LN10 = 2.99999999~\n*/\nfunction log10(str) {\n    const leadingDigits = parseInt(str.substring(0, 4));\n    const log = Math.log(leadingDigits) / Math.LN10 + 0.00000001;\n    const n = str.length - 1;\n    return n + (log - parseInt(log));\n}\n\nexport const repLog10 = rep2 => {\n    if (rep2 == null) return rep2;\n    let rep = String(rep2);\n    const neg = rep.charAt(0) === '-';\n    rep = neg ? rep.substring(1) : rep;\n\n    let out = log10(rep);\n    if (isNaN(out)) out = 0;\n    out = Math.max(out - 9, 0); // @ -9, $0.50 earned is approx magnitude 1\n    out = (neg ? -1 : 1) * out;\n    out = out * 9 + 25; // 9 points per magnitude. center at 25\n    // base-line 0 to darken and < 0 to auto hide (grep rephide)\n    out = parseInt(out);\n    return out;\n};\n\nexport function countDecimals(amount) {\n    if (amount == null) return amount;\n    amount = String(amount)\n        .match(/[\\d\\.]+/g)\n        .join(''); // just dots and digits\n    const parts = amount.split('.');\n    return parts.length > 2\n        ? undefined\n        : parts.length === 1 ? 0 : parts[1].length;\n}\n\n// this function searches for right translation of provided error (usually from back-end)\nexport function translateError(string) {\n    if (typeof string != 'string') return string;\n    switch (string) {\n        case 'Account not found':\n            return tt('g.account_not_found');\n        case 'Incorrect Password':\n            return tt('g.incorrect_password');\n        case 'Username does not exist':\n            return tt('g.username_does_not_exist');\n        case 'Account name should be longer.':\n            return tt('g.account_name_should_be_longer');\n        case 'Account name should be shorter.':\n            return tt('g.account_name_should_be_shorter');\n        case 'Account name should start with a letter.':\n            return tt('g.account_name_should_start_with_a_letter');\n        case 'Account name should have only letters, digits, periods or dashes.':\n            return tt(\n                'g.account_name_should_have_only_letters_digits_or_dashes'\n            );\n        case 'vote currently exists, user must be indicate a desire to reject witness':\n            return tt(\n                'g.vote_currently_exists_user_must_be_indicate_a_to_reject_witness'\n            );\n        case 'Only one Steem account allowed per IP address every 10 minutes':\n            return tt(\n                'g.only_one_APP_NAME_account_allowed_per_ip_address_every_10_minutes'\n            );\n        case 'Cannot increase reward of post within the last minute before payout':\n            return tt(\n                'g.cannot_increase_reward_of_post_within_the_last_minute_before_payout'\n            );\n        default:\n            return string;\n    }\n}\n"]}