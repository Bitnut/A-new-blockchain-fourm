{"version":3,"sources":["../../../src/app/utils/ExtractMeta.js"],"names":["extractMeta","site_desc","addSiteMeta","metas","push","title","name","content","property","$STM_Config","fb_app","chain_data","rp","username","slug","post","author","accounts","profile","id","d","objAccessor","url","link","canonicalUrl","desc","image","image_link","profile_image","category","created","canonical","accountname","account","about"],"mappings":"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","file":"ExtractMeta.js","sourcesContent":["import extractContent from 'app/utils/ExtractContent';\nimport { objAccessor } from 'app/utils/Accessors';\nimport normalizeProfile from 'app/utils/NormalizeProfile';\nimport { makeCanonicalLink } from 'app/utils/CanonicalLinker.js';\n\nconst site_desc =\n    'Steemit is a social media platform where everyone gets paid for creating and curating content. It leverages a robust digital points system (Steem) for digital rewards.';\n\nfunction addSiteMeta(metas) {\n    metas.push({ title: 'Steemit' });\n    metas.push({ name: 'description', content: site_desc });\n    metas.push({ property: 'og:type', content: 'website' });\n    metas.push({ property: 'og:site_name', content: 'Steemit' });\n    metas.push({ property: 'og:title', content: 'Steemit' });\n    metas.push({ property: 'og:description', content: site_desc });\n    metas.push({\n        property: 'og:image',\n        content: 'https://steemit.com/images/steemit.png',\n    });\n    metas.push({ property: 'fb:app_id', content: $STM_Config.fb_app });\n    metas.push({ name: 'twitter:card', content: 'summary' });\n    metas.push({ name: 'twitter:site', content: '@steemit' });\n    metas.push({ name: 'twitter:title', content: '#Steemit' });\n    metas.push({ name: 'twitter:description', site_desc });\n    metas.push({\n        name: 'twitter:image',\n        content: 'https://steemit.com/images/steemit.png',\n    });\n}\n\nexport default function extractMeta(chain_data, rp) {\n    const metas = [];\n    if (rp.username && rp.slug) {\n        // post\n        const post = `${rp.username}/${rp.slug}`;\n        const content = chain_data.content[post];\n        const author = chain_data.accounts[rp.username];\n        const profile = normalizeProfile(author);\n        if (content && content.id !== '0.0.0') {\n            // API currently returns 'false' data with id 0.0.0 for posts that do not exist\n            const d = extractContent(objAccessor, content, false);\n            const url = 'https://steemit.com' + d.link;\n            const canonicalUrl = makeCanonicalLink(d);\n            const title = d.title + ' â€” Steemit';\n            const desc = d.desc + ' by ' + d.author;\n            const image = d.image_link || profile.profile_image;\n            const { category, created } = d;\n\n            // Standard meta\n            metas.push({ title });\n            metas.push({ canonical: canonicalUrl });\n            metas.push({ name: 'description', content: desc });\n\n            // Open Graph data\n            metas.push({ name: 'og:title', content: title });\n            metas.push({ name: 'og:type', content: 'article' });\n            metas.push({ name: 'og:url', content: url });\n            metas.push({\n                name: 'og:image',\n                content: image || 'https://steemit.com/images/steemit.png',\n            });\n            metas.push({ name: 'og:description', content: desc });\n            metas.push({ name: 'og:site_name', content: 'Steemit' });\n            metas.push({ name: 'fb:app_id', content: $STM_Config.fb_app });\n            metas.push({ name: 'article:tag', content: category });\n            metas.push({\n                name: 'article:published_time',\n                content: created,\n            });\n\n            // Twitter card data\n            metas.push({\n                name: 'twitter:card',\n                content: image ? 'summary_large_image' : 'summary',\n            });\n            metas.push({ name: 'twitter:site', content: '@steemit' });\n            metas.push({ name: 'twitter:title', content: title });\n            metas.push({ name: 'twitter:description', content: desc });\n            metas.push({\n                name: 'twitter:image',\n                content:\n                    image || 'https://steemit.com/images/steemit-twshare-2.png',\n            });\n        } else {\n            addSiteMeta(metas);\n        }\n    } else if (rp.accountname) {\n        // user profile root\n        const account = chain_data.accounts[rp.accountname];\n        let { name, about, profile_image } = normalizeProfile(account);\n        if (name == null) name = account.name;\n        if (about == null)\n            about =\n                'Join thousands on steemit who share, post and earn rewards.';\n        if (profile_image == null)\n            profile_image = 'https://steemit.com/images/steemit-twshare-2.png';\n        // Set profile tags\n        const title = `@${account.name}`;\n        const desc = `The latest posts from ${name}. Follow me at @${\n            account.name\n        }. ${about}`;\n        const image = profile_image;\n\n        // Standard meta\n        metas.push({ name: 'description', content: desc });\n\n        // Twitter card data\n        metas.push({ name: 'twitter:card', content: 'summary' });\n        metas.push({ name: 'twitter:site', content: '@steemit' });\n        metas.push({ name: 'twitter:title', content: title });\n        metas.push({ name: 'twitter:description', content: desc });\n        metas.push({ name: 'twitter:image', content: image });\n    } else {\n        // site\n        addSiteMeta(metas);\n    }\n    return metas;\n}\n"]}