{"version":3,"sources":["../../../../src/app/utils/SlateEditor/Schema.js"],"names":["$","require","schema","defaultNode","toolbarMarks","type","label","nodes","paragraph","children","attributes","table","thead","tbody","tr","td","th","hr","HRule","image","Image","link","Link","embed","Iframe","align","Align","marks","bold","props","code","italic","underline","strike","sub","sup","BLOCK_TAGS","p","blockquote","pre","h1","h2","h3","h4","ul","ol","li","MARK_TAGS","em","i","strong","b","u","del","validAligns","HtmlRules","deserialize","el","next","tagName","kind","data","attribs","class","includes","serialize","object","get","noTextChildren","split","filter","center","reduce","out","child","push","block","isVoid","console","log","src","alt","href","ranges","text","closest","length","html","replace","getMarkdownType","chars"],"mappings":"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","file":"Schema.js","sourcesContent":["import React from 'react';\nimport Link from 'app/utils/SlateEditor/Link';\nimport Image from 'app/utils/SlateEditor/Image';\nimport Iframe from 'app/utils/SlateEditor/Iframe';\nimport HRule from 'app/utils/SlateEditor/HRule';\nimport Align from 'app/utils/SlateEditor/Align';\n\nconst $ = require('cheerio');\n\n/**\n * Slate editor/toolbar schema, defaults\n */\nexport const schema = {\n    defaultNode: 'paragraph',\n    toolbarMarks: [\n        { type: 'bold', label: <strong>B</strong> },\n        { type: 'italic', label: <i>i</i> },\n        //{ type: 'underline', label: <u>U</u> },\n        //{ type: 'strike',    label: <del>S</del> },\n        { type: 'code', label: <code>{'{}'}</code> },\n        {\n            type: 'sup',\n            label: (\n                <span>\n                    x<sup>2</sup>\n                </span>\n            ),\n        },\n        {\n            type: 'sub',\n            label: (\n                <span>\n                    x<sub>2</sub>\n                </span>\n            ),\n        },\n    ],\n\n    // blockTypes: {...Blocks,},\n    // toolbarTypes: [],\n    // sidebarTypes: [],\n\n    nodes: {\n        paragraph: ({ children, attributes }) => (\n            <p {...attributes}>{children}</p>\n        ),\n        'code-block': ({ children, attributes }) => (\n            <pre {...attributes}>\n                <code>{children}</code>\n            </pre>\n        ),\n        'block-quote': ({ children, attributes }) => (\n            <blockquote {...attributes}>{children}</blockquote>\n        ),\n        'bulleted-list': ({ children, attributes }) => (\n            <ul {...attributes}>{children}</ul>\n        ),\n        'numbered-list': ({ children, attributes }) => (\n            <ol {...attributes}>{children}</ol>\n        ),\n        'heading-one': ({ children, attributes }) => (\n            <h1 {...attributes}>{children}</h1>\n        ),\n        'heading-two': ({ children, attributes }) => (\n            <h2 {...attributes}>{children}</h2>\n        ),\n        'heading-three': ({ children, attributes }) => (\n            <h3 {...attributes}>{children}</h3>\n        ),\n        'heading-four': ({ children, attributes }) => (\n            <h4 {...attributes}>{children}</h4>\n        ),\n        'list-item': ({ children, attributes }) => (\n            <li {...attributes}>{children}</li>\n        ),\n        table: ({ children, attributes }) => (\n            <table {...attributes}>{children}</table>\n        ),\n        thead: ({ children, attributes }) => (\n            <thead {...attributes}>{children}</thead>\n        ),\n        tbody: ({ children, attributes }) => (\n            <tbody {...attributes}>{children}</tbody>\n        ),\n        tr: ({ children, attributes }) => <tr {...attributes}>{children}</tr>,\n        td: ({ children, attributes }) => <td {...attributes}>{children}</td>,\n        th: ({ children, attributes }) => <th {...attributes}>{children}</th>,\n        hr: HRule,\n        image: Image,\n        link: Link,\n        embed: Iframe,\n        align: Align,\n    },\n\n    marks: {\n        bold: props => <strong>{props.children}</strong>,\n        code: props => <code>{props.children}</code>,\n        italic: props => <em>{props.children}</em>,\n        underline: props => <u>{props.children}</u>,\n        strike: props => <del>{props.children}</del>,\n        sub: props => <sub>{props.children}</sub>,\n        sup: props => <sup>{props.children}</sup>,\n    },\n};\n\n/**\n * Rules for de/serializing editor state to and from HTML\n */\n\n// Map html --> block type\nconst BLOCK_TAGS = {\n    p: 'paragraph',\n    blockquote: 'block-quote',\n    pre: 'code-block',\n    h1: 'heading-one',\n    h2: 'heading-two',\n    h3: 'heading-three',\n    h4: 'heading-four',\n    ul: 'bulleted-list',\n    ol: 'numbered-list',\n    li: 'list-item',\n    hr: 'hr',\n    table: 'table',\n    thead: 'thead',\n    tbody: 'tbody',\n    tr: 'tr',\n    td: 'td',\n    th: 'th',\n};\n\n// Map HTML --> mark type\nconst MARK_TAGS = {\n    em: 'italic',\n    i: 'italic',\n    strong: 'bold',\n    b: 'bold',\n    u: 'underline',\n    del: 'strike',\n    strike: 'strike',\n    sup: 'sup',\n    sub: 'sub',\n};\n\nconst validAligns = [\n    'pull-right',\n    'pull-left',\n    'text-justify',\n    'text-rtl',\n    'text-center',\n    'text-right',\n];\n\n/**\n * Rules for converting from and to HTML. The first rules are highest priority,\n * with unmatched cases (i.e. null return) falling through to those below.\n */\nexport const HtmlRules = [\n    // Catch-all debug wrapper\n    {\n        //deserialize: (el, next) => console.log(\"** deserialize: \", $.html(el).replace(/\\n/g, \"\\\\n\")),\n        //serialize: (object, children) => console.log(\"** serialize:\", object.type, object.kind, 'data:', JSON.stringify(object.data))\n    },\n\n    // Alignment wrapper\n    {\n        deserialize: (el, next) => {\n            if (el.tagName == 'center') {\n                return {\n                    kind: 'block',\n                    type: 'align',\n                    data: { align: 'text-center' },\n                    nodes: next(el.children),\n                };\n            }\n            if (el.tagName == 'div') {\n                const align = el.attribs.class;\n                if (!validAligns.includes(align)) return;\n                return {\n                    kind: 'block',\n                    type: 'align',\n                    data: { align },\n                    nodes: next(el.children),\n                };\n            }\n        },\n        serialize: (object, children) => {\n            if (object.kind == 'block' && object.type == 'align') {\n                const align = object.data.get('align');\n                return <div className={align}>{children}</div>;\n            }\n        },\n    },\n\n    // Block rules\n    {\n        deserialize: (el, next) => {\n            const type = BLOCK_TAGS[el.tagName];\n            if (!type) return;\n\n            // Special case for <pre>: ignore its inner <code> element.\n            const code = el.tagName == 'pre' ? el.children[0] : null;\n            let children =\n                code && code.tagName == 'code' ? code.children : el.children;\n\n            // due to disabled/broken whitespace normalization in cheerio/htmlparser2, perform basic cleaning...\n            //   i.e. removal of text nodes where they are invalid -- otherwise they may convert to <br />s in bad places\n            const noTextChildren = 'ol,ul,table,thead,tbody,tr'.split(',');\n            if (noTextChildren.includes(el.tagName)) {\n                children = children.filter(el => el.type !== 'text');\n            }\n\n            // If this block-level node contains *any* <center> tags, strip them out and wrap-align node\n            let center = false;\n            children = children.reduce((out, child) => {\n                if (child.tagName == 'center') {\n                    center = true;\n                    //child.children.map(c => out.push(c))\n                    out.push(...child.children);\n                } else {\n                    out.push(child);\n                }\n                return out;\n            }, []);\n\n            // Generate output block with clean children\n            const block = {\n                kind: 'block',\n                type: type,\n                isVoid: type == 'hr',\n                nodes: next(children),\n            };\n\n            // Wrap output block with align node if needed\n            if (center) {\n                console.log('** force-centering node');\n                return {\n                    kind: 'block',\n                    type: 'align',\n                    data: { align: 'text-center' },\n                    nodes: [block],\n                };\n            }\n\n            // Otherwise return plain block\n            return block;\n        },\n\n        serialize: (object, children) => {\n            if (object.kind !== 'block') return;\n            switch (object.type) {\n                case 'paragraph':\n                    return <p>{children}</p>;\n                case 'block-quote':\n                    return <blockquote>{children}</blockquote>;\n                case 'code-block':\n                    return (\n                        <pre>\n                            <code>{children}</code>\n                        </pre>\n                    );\n                case 'heading-one':\n                    return <h1>{children}</h1>;\n                case 'heading-two':\n                    return <h2>{children}</h2>;\n                case 'heading-three':\n                    return <h3>{children}</h3>;\n                case 'heading-four':\n                    return <h4>{children}</h4>;\n                case 'bulleted-list':\n                    return <ul>{children}</ul>;\n                case 'numbered-list':\n                    return <ol>{children}</ol>;\n                case 'list-item':\n                    return <li>{children}</li>;\n                case 'hr':\n                    return <hr />;\n                case 'table':\n                    return <table>{children}</table>;\n                case 'thead':\n                    return <thead>{children}</thead>;\n                case 'tbody':\n                    return <tbody>{children}</tbody>;\n                case 'tr':\n                    return <tr>{children}</tr>;\n                case 'td':\n                    return <td>{children}</td>;\n                case 'th':\n                    return <th>{children}</th>;\n            }\n        },\n    },\n\n    // Mark rules\n    {\n        deserialize: (el, next) => {\n            const type = MARK_TAGS[el.tagName];\n            if (!type) return;\n            return {\n                kind: 'mark',\n                type: type,\n                nodes: next(el.children),\n            };\n        },\n        serialize: (object, children) => {\n            if (object.kind !== 'mark') return;\n            switch (object.type) {\n                case 'bold':\n                    return <strong>{children}</strong>;\n                case 'italic':\n                    return <em>{children}</em>;\n                case 'underline':\n                    return <u>{children}</u>;\n                case 'strike':\n                    return <del>{children}</del>;\n                case 'code':\n                    return <code>{children}</code>;\n                case 'sup':\n                    return <sup>{children}</sup>;\n                case 'sub':\n                    return <sub>{children}</sub>;\n            }\n        },\n    },\n\n    // Custom\n    {\n        deserialize: (el, next) => {\n            switch (el.tagName) {\n                case 'iframe':\n                    return {\n                        kind: 'block',\n                        type: 'embed',\n                        isVoid: true,\n                        data: { src: el.attribs.src },\n                        nodes: next(el.children),\n                    };\n                case 'img':\n                    return {\n                        kind: 'inline',\n                        type: 'image',\n                        isVoid: true,\n                        data: {\n                            src: el.attribs.src,\n                            alt: el.attribs.alt,\n                        },\n                        nodes: next(el.children),\n                    };\n                case 'a':\n                    return {\n                        kind: 'inline',\n                        type: 'link',\n                        data: { href: el.attribs.href },\n                        nodes: next(el.children),\n                    };\n                case 'br':\n                    return {\n                        kind: 'text',\n                        ranges: [{ text: '\\n' }],\n                    };\n                case 'code':\n                    // may not be necessary after pr #406\n                    if ($(el).closest('pre').length == 0) {\n                        return {\n                            kind: 'mark',\n                            type: 'code',\n                            nodes: next(el.children),\n                        };\n                    } else {\n                        console.log('** skipping <code> within a <pre>');\n                    }\n            }\n        },\n\n        serialize: (object, children) => {\n            if (object.kind == 'string') return;\n            if (object.kind == 'inline' && object.type == 'link') {\n                const href = object.data.get('href');\n                return <a href={href}>{children}</a>;\n            }\n            if (object.kind == 'block' && object.type == 'embed') {\n                const src = object.data.get('src');\n                return <iframe src={src} />;\n            }\n            if (object.kind == 'inline' && object.type == 'image') {\n                const src = object.data.get('src');\n                const alt = object.data.get('alt');\n                if (!src)\n                    console.log(\n                        '** ERR: serializing image with no src...',\n                        JSON.stringify(object)\n                    );\n                return <img src={src} alt={alt} />;\n            }\n        },\n    },\n\n    // debug uncaught nodes/elements\n    {\n        deserialize: (el, next) => {\n            if (el.type !== 'text')\n                console.log(\n                    '** no deserializer for: ',\n                    $.html(el).replace(/\\n/g, '\\\\n')\n                );\n        },\n        serialize: (object, children) => {\n            if (object.kind != 'string')\n                console.log(\n                    '** no serializer for:',\n                    object.type,\n                    object.kind,\n                    'data:',\n                    JSON.stringify(object)\n                );\n        },\n    },\n];\n\nexport const getMarkdownType = chars => {\n    switch (chars) {\n        case '1.':\n        case '*':\n        case '-':\n            return 'list-item';\n        case '>':\n            return 'block-quote';\n        case '#':\n            return 'heading-one';\n        case '##':\n            return 'heading-two';\n        case '###':\n            return 'heading-three';\n        case '####':\n            return 'heading-four';\n        case '   ':\n            return 'code-block';\n        case '---':\n            return 'hr';\n        default:\n            return null;\n    }\n};\n"]}