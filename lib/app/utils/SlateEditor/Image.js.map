{"version":3,"sources":["../../../../src/app/utils/SlateEditor/Image.js"],"names":["state","ownProps","uploadImage","file","dataUrl","filename","progress","dispatch","type","payload","load","console","log","reader","FileReader","addEventListener","result","setImageSrc","name","readAsDataURL","data","props","node","src","get","test","setState","uploading","url","editor","getState","next","transform","setNodeByKey","key","alt","apply","onChange","attributes","isFocused","selection","hasEdgeIn","className","prefix","$STM_Config","img_proxy_prefix","substring","img","error","React","Component"],"mappings":"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","file":"Image.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\n\nexport default connect(\n    (state, ownProps) => ownProps,\n    dispatch => ({\n        uploadImage: (file, dataUrl, filename, progress) => {\n            dispatch({\n                type: 'user/UPLOAD_IMAGE',\n                payload: { file, dataUrl, filename, progress },\n            });\n        },\n    })\n)(\n    class Image extends React.Component {\n        state = {\n            progress: {},\n        };\n\n        componentWillMount() {\n            const file = this.props.node.data.get('file');\n            // Save `file` for \"Retry\"\n            // Try to load incase data url was loaded from a draft\n            this.setState({ file });\n        }\n\n        componentDidMount() {\n            console.log('** image mounted..', this.state, this.props);\n            this.load();\n        }\n\n        setImageSrc(src, filename) {\n            const { editor, node } = this.props;\n            const state = editor.getState();\n            const next = state\n                .transform()\n                .setNodeByKey(node.key, { data: { src, alt: filename } })\n                .apply();\n            editor.onChange(next);\n        }\n\n        load = () => {\n            let dataUrl, filename;\n            const { file } = this.state;\n            if (file) {\n                // image dropped -- show a quick preview\n                console.log('** image being loaded.. ----->', file);\n                const reader = new FileReader();\n                reader.addEventListener('load', () => {\n                    dataUrl = reader.result;\n                    this.setImageSrc(dataUrl, file.name);\n                });\n                reader.readAsDataURL(file);\n                filename = file.name;\n            } else {\n                // draft, recover data using the preview data url\n                const { data } = this.props.node;\n                const src = data.get('src');\n                if (/^data:/.test(src)) {\n                    dataUrl = src;\n                    filename = data.get('alt');\n                }\n            }\n\n            if (!file && !dataUrl) return;\n            this.setState({ progress: {}, uploading: true }, () => {\n                const { uploadImage } = this.props;\n                uploadImage(file, dataUrl, filename, progress => {\n                    this.setState({ progress, uploading: false });\n                    if (progress.url) {\n                        this.setImageSrc(progress.url, filename);\n                    }\n                });\n            });\n        };\n\n        render() {\n            const { node, state, attributes } = this.props;\n\n            const isFocused = state.selection.hasEdgeIn(node);\n            const className = isFocused ? 'active' : null;\n\n            const prefix = $STM_Config.img_proxy_prefix\n                ? $STM_Config.img_proxy_prefix + '0x0/'\n                : '';\n\n            const alt = node.data.get('alt');\n            const src = node.data.get('src');\n\n            console.log(\n                '** rendering image... src:',\n                src ? src.substring(0, 30) + '...' : '(null)',\n                state\n            );\n\n            if (!src)\n                return <small className=\"info\">Loading Image&hellip;</small>;\n\n            if (/^https?:\\/\\//.test(src))\n                return (\n                    <img\n                        {...attributes}\n                        src={prefix + src}\n                        alt={alt}\n                        className={className}\n                    />\n                );\n\n            const img = <img src={src} alt={alt} className={className} />;\n\n            const { uploading } = this.state;\n            if (uploading)\n                return (\n                    <div {...attributes}>\n                        {img}\n                        <br />\n                        <small className=\"info\">Uploading Image&hellip;</small>\n                    </div>\n                );\n\n            const { error } = this.state.progress;\n            return (\n                <div {...attributes}>\n                    {img}\n                    <div className=\"error\">\n                        <small>\n                            Image was not Saved (<a onClick={this.load}>\n                                retry\n                            </a>)\n                            <br />\n                            {error}\n                        </small>\n                    </div>\n                </div>\n            );\n        }\n    }\n);\n"]}