{"version":3,"sources":["../../../../src/app/utils/SlateEditor/Iframe.js"],"names":["Iframe","normalizeEmbedUrl","match","url","linksRe","youTubeId","length","vimeoId","twitch","undefined","console","log","onChange","props","node","state","editor","value","e","target","src","next","getState","transform","setNodeByKey","key","data","apply","onClick","stopPropagation","render","attributes","isFocused","selection","hasEdgeIn","className","lockStyle","position","top","left","width","height","background","renderFrame","renderInput","get","style","fontFamily","margin","padding","display","textAlign","color","borderRadius","React","Component"],"mappings":"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","file":"Iframe.js","sourcesContent":["import React from 'react';\nimport linksRe from 'app/utils/Links';\n\nexport default class Iframe extends React.Component {\n    normalizeEmbedUrl = url => {\n        let match;\n\n        // Detect youtube URLs\n        match = url.match(linksRe.youTubeId);\n        if (match && match.length >= 2) {\n            return 'https://www.youtube.com/embed/' + match[1];\n        }\n\n        // Detect vimeo\n        match = url.match(linksRe.vimeoId);\n        if (match && match.length >= 2) {\n            return 'https://player.vimeo.com/video/' + match[1];\n        }\n\n        // Detect twitch stream\n        match = url.match(linksRe.twitch);\n        if (match && match.length >= 3) {\n            if (match[1] === undefined) {\n                return (\n                    'https://player.twitch.tv/?autoplay=false&channel=' +\n                    match[2]\n                );\n            } else {\n                return (\n                    'https://player.twitch.tv/?autoplay=false&video=' + match[1]\n                );\n            }\n        }\n\n        console.log('unable to auto-detect embed url', url);\n        return null;\n    };\n\n    onChange = e => {\n        const { node, state, editor } = this.props;\n        const value = e.target.value;\n\n        const src = this.normalizeEmbedUrl(value) || value;\n\n        const next = editor\n            .getState()\n            .transform()\n            .setNodeByKey(node.key, { data: { src } })\n            .apply();\n\n        editor.onChange(next);\n    };\n\n    onClick = e => {\n        // stop propagation so that the void node itself isn't focused, since that would unfocus the input.\n        e.stopPropagation();\n    };\n\n    render = () => {\n        const { node, state, attributes } = this.props;\n        const isFocused = state.selection.hasEdgeIn(node);\n        const className = isFocused ? 'active' : null;\n\n        const lockStyle = {\n            position: 'absolute',\n            top: '0px',\n            left: '0px',\n            width: '100%',\n            height: '100%',\n            background: 'rgba(0,0,0,0.1)',\n        };\n\n        return (\n            <div {...attributes} className={className}>\n                <div className=\"videoWrapper\">\n                    {this.renderFrame()}\n                    <div style={lockStyle}>\n                        {isFocused && <span>{this.renderInput()}</span>}\n                    </div>\n                </div>\n            </div>\n        );\n    };\n\n    renderFrame = () => {\n        let src = this.props.node.data.get('src');\n        src = this.normalizeEmbedUrl(src) || src;\n\n        return (\n            <iframe\n                type=\"text/html\"\n                width=\"640\"\n                height=\"360\"\n                src={src}\n                frameBorder=\"0\"\n                webkitallowfullscreen\n                mozallowfullscreen\n                allowfullscreen\n            />\n        );\n    };\n\n    renderInput = () => {\n        const src = this.props.node.data.get('src');\n\n        const style = {\n            fontFamily: 'Arial',\n            margin: '200px auto',\n            width: '90%',\n            padding: '1rem 0.5rem',\n            background: 'rgba(255,255,255,0.9)',\n            display: 'block',\n            textAlign: 'center',\n            color: 'black',\n            borderRadius: '5px',\n        };\n\n        return (\n            <input\n                value={src}\n                onChange={this.onChange}\n                onClick={this.onClick}\n                placeholder=\"Enter a YouTube or Vimeo URL...\"\n                style={style}\n            />\n        );\n    };\n}\n"]}