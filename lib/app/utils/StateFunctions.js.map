{"version":3,"sources":["../../../src/app/utils/StateFunctions.js"],"names":["vestsToSpf","vestsToSp","spToVestsf","spToVests","vestingSteem","delegatedSteem","assetFloat","isFetchingOrRecentlyUpdated","contentStats","filterTags","pricePerSteem","numberWithCommas","x","replace","state","vesting_shares","global","vests","VEST_TICKER","total_vests","getIn","total_vest_steem","LIQUID_TICKER","toFixed","steem_power","power","account","gprops","parseFloat","split","total_vesting_shares","total_vesting_fund_steem","vesting_steemf","delegated_vests","delegated_vesting_shares","received_vests","received_vesting_shares","str","asset","assert","equal","RegExp","test","e","console","log","undefined","global_status","order","category","status","fetching","last_fetch","res","Date","constants","FETCH_DATA_EXPIRE_SEC","content","net_rshares_adj","Long","ZERO","neg_rshares","total_votes","up_votes","get","forEach","sign","v","rshares","String","add","substring","length","flagWeight","Math","max","div","grayThreshold","meetsGrayThreshold","compare","hasPositiveRshares","fromString","gt","allowDelete","hasPendingPayout","authorRepLog10","gray","hide","json","tags","JSON","parse","Array","isArray","push","isNsfw","filter","tag","match","value","index","self","indexOf","feed_price","user","has","formatter","toJS"],"mappings":"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","file":"StateFunctions.js","sourcesContent":["import assert from 'assert';\nimport constants from 'app/redux/constants';\nimport { parsePayoutAmount, repLog10 } from 'app/utils/ParsersAndFormatters';\nimport { Long } from 'bytebuffer';\nimport { VEST_TICKER, LIQUID_TICKER } from 'app/client_config';\nimport { fromJS } from 'immutable';\nimport { formatter } from '@steemit/steem-js';\n\nexport const numberWithCommas = x => x.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n\nexport function vestsToSpf(state, vesting_shares) {\n    const { global } = state;\n    let vests = vesting_shares;\n    if (typeof vesting_shares === 'string') {\n        vests = assetFloat(vesting_shares, VEST_TICKER);\n    }\n    const total_vests = assetFloat(\n        global.getIn(['props', 'total_vesting_shares']),\n        VEST_TICKER\n    );\n    const total_vest_steem = assetFloat(\n        global.getIn(['props', 'total_vesting_fund_steem']),\n        LIQUID_TICKER\n    );\n    return total_vest_steem * (vests / total_vests);\n}\n\nexport function vestsToSp(state, vesting_shares) {\n    return vestsToSpf(state, vesting_shares).toFixed(3);\n}\n\nexport function spToVestsf(state, steem_power) {\n    const { global } = state;\n    let power = steem_power;\n    if (typeof power === 'string') {\n        power = assetFloat(power, LIQUID_TICKER);\n    }\n    const total_vests = assetFloat(\n        global.getIn(['props', 'total_vesting_shares']),\n        VEST_TICKER\n    );\n    const total_vest_steem = assetFloat(\n        global.getIn(['props', 'total_vesting_fund_steem']),\n        LIQUID_TICKER\n    );\n    return steem_power / total_vest_steem * total_vests;\n}\n\nexport function spToVests(state, vesting_shares) {\n    return spToVestsf(state, vesting_shares).toFixed(6);\n}\n\nexport function vestingSteem(account, gprops) {\n    const vests = parseFloat(account.vesting_shares.split(' ')[0]);\n    const total_vests = parseFloat(gprops.total_vesting_shares.split(' ')[0]);\n    const total_vest_steem = parseFloat(\n        gprops.total_vesting_fund_steem.split(' ')[0]\n    );\n    const vesting_steemf = total_vest_steem * (vests / total_vests);\n    return vesting_steemf;\n}\n\n// How much STEEM this account has delegated out (minus received).\nexport function delegatedSteem(account, gprops) {\n    const delegated_vests = parseFloat(\n        account.delegated_vesting_shares.split(' ')[0]\n    );\n    const received_vests = parseFloat(\n        account.received_vesting_shares.split(' ')[0]\n    );\n    const vests = delegated_vests - received_vests;\n    const total_vests = parseFloat(gprops.total_vesting_shares.split(' ')[0]);\n    const total_vest_steem = parseFloat(\n        gprops.total_vesting_fund_steem.split(' ')[0]\n    );\n    const vesting_steemf = total_vest_steem * (vests / total_vests);\n    return vesting_steemf;\n}\n\nexport function assetFloat(str, asset) {\n    try {\n        assert.equal(typeof str, 'string');\n        assert.equal(typeof asset, 'string');\n        assert(\n            new RegExp(`^\\\\d+(\\\\.\\\\d+)? ${asset}$`).test(str),\n            'Asset should be formatted like 99.99 ' + asset + ': ' + str\n        );\n        return parseFloat(str.split(' ')[0]);\n    } catch (e) {\n        console.log(e);\n        return undefined;\n    }\n}\n\nexport function isFetchingOrRecentlyUpdated(global_status, order, category) {\n    const status = global_status\n        ? global_status.getIn([category || '', order])\n        : null;\n    if (!status) return false;\n    if (status.fetching) return true;\n    if (status.last_fetch) {\n        const res =\n            new Date() - status.last_fetch <\n            constants.FETCH_DATA_EXPIRE_SEC * 1000;\n        return res;\n    }\n    return false;\n}\n\nexport function contentStats(content) {\n    if (!content) return {};\n    if (!(content instanceof Map)) content = fromJS(content);\n\n    let net_rshares_adj = Long.ZERO;\n    let neg_rshares = Long.ZERO;\n    let total_votes = 0;\n    let up_votes = 0;\n\n    // TODO: breaks if content has no active_votes attribute.\n\n    content.get('active_votes').forEach(v => {\n        const sign = Math.sign(v.get('percent'));\n        if (sign === 0) return;\n        total_votes += 1;\n        if (sign > 0) up_votes += 1;\n\n        const rshares = String(v.get('rshares'));\n\n        // For flag weight: count total neg rshares\n        if (sign < 0) {\n            neg_rshares = neg_rshares.add(rshares);\n        }\n\n        // For graying: sum up total rshares from voters with non-neg reputation.\n        if (String(v.get('reputation')).substring(0, 1) !== '-') {\n            // And also ignore tiny downvotes (9 digits or less)\n            if (!(rshares.substring(0, 1) === '-' && rshares.length < 11)) {\n                net_rshares_adj = net_rshares_adj.add(rshares);\n            }\n        }\n    });\n\n    // take negative rshares, divide by 2, truncate 10 digits (plus neg sign), count digits.\n    // creates a cheap log10, stake-based flag weight. 1 = approx $400 of downvoting stake; 2 = $4,000; etc\n    const flagWeight = Math.max(String(neg_rshares.div(2)).length - 11, 0);\n\n    // post must have non-trivial negative rshares to be grayed out. (more than 10 digits)\n    const grayThreshold = -9999999999;\n    const meetsGrayThreshold = net_rshares_adj.compare(grayThreshold) < 0;\n\n    // to be eligible for deletion, a comment must have non-positive rshares and no replies\n    const hasPositiveRshares = Long.fromString(\n        String(content.get('net_rshares'))\n    ).gt(Long.ZERO);\n    const allowDelete = !hasPositiveRshares && content.get('children') === 0;\n    const hasPendingPayout =\n        parsePayoutAmount(content.get('pending_payout_value')) >= 0.02;\n    const authorRepLog10 = repLog10(content.get('author_reputation'));\n\n    const gray =\n        !hasPendingPayout && (authorRepLog10 < 1 || meetsGrayThreshold);\n    const hide = !hasPendingPayout && authorRepLog10 < 0; // rephide\n\n    // Combine tags+category to check nsfw status\n    const json = content.get('json_metadata');\n    let tags = [];\n    try {\n        tags = (json && JSON.parse(json).tags) || [];\n        if (typeof tags == 'string') {\n            tags = [tags];\n        }\n        if (!Array.isArray(tags)) {\n            tags = [];\n        }\n    } catch (e) {\n        tags = [];\n    }\n    tags.push(content.get('category'));\n    tags = filterTags(tags);\n    const isNsfw = tags.filter(tag => tag && tag.match(/^nsfw$/i)).length > 0;\n\n    return {\n        hide,\n        gray,\n        authorRepLog10,\n        allowDelete,\n        isNsfw,\n        flagWeight,\n        total_votes,\n        up_votes,\n        hasPendingPayout,\n    };\n}\n\nexport function filterTags(tags) {\n    return tags\n        .filter(tag => typeof tag === 'string')\n        .filter((value, index, self) => value && self.indexOf(value) === index);\n}\n\nexport function pricePerSteem(state) {\n    const feed_price = state.user.get(\n        'latest_feed_price',\n        state.global.get('feed_price')\n    );\n    if (feed_price && feed_price.has('base') && feed_price.has('quote')) {\n        return formatter.pricePerSteem(feed_price.toJS());\n    }\n    return undefined;\n}\n"]}