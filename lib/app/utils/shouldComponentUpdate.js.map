{"version":3,"sources":["../../../src/app/utils/shouldComponentUpdate.js"],"names":["instance","name","mixin","PureRenderMixin","shouldComponentUpdate","bind","process","env","BROWSER","window","steemDebug_shouldComponentUpdate","undefined","nextProps","nextState","upd","filter","test","compare","props","state","a","b","aKeys","bKeys","ab","forEach","hasA","has","key","hasB","desc","console","log","aKey","bKey","toJS","Iterable","isIterable","o"],"mappings":";;;;;;;;;;;;;;;;;;kBAOe,UAASA,QAAT,EAAmBC,IAAnB,EAAyB;AACpC,QAAMC,QAAQC,qCAAgBC,qBAAhB,CAAsCC,IAAtC,CAA2CL,QAA3C,CAAd;AACA,QACIM,QAAQC,GAAR,CAAYC,OAAZ,IACAC,OAAOC,gCAAP,KAA4CC,SAFhD,EAGE;AACEF,eAAOC,gCAAP,GAA0C,KAA1C,CADF,CACmD;AACpD;AACD,WAAO,UAACE,SAAD,EAAYC,SAAZ,EAA0B;AAC7B,YAAMC,MAAMZ,MAAMU,SAAN,EAAiBC,SAAjB,CAAZ;AACA;AACA;AACA,YACIC,OACAR,QAAQC,GAAR,CAAYC,OADZ,IAEAC,OAAOC,gCAHX,EAIE;AACE,gBAAMK,SAASN,OAAOC,gCAAtB;AACA,gBAAIK,OAAOC,IAAX,EAAiB;AACb,oBAAI,CAACD,OAAOC,IAAP,CAAYf,IAAZ,CAAL,EAAwB,OAAOa,GAAP;AAC3B;AACDG,oBAAQhB,IAAR,EAAcD,SAASkB,KAAvB,EAA8BN,SAA9B;AACAK,oBAAQhB,IAAR,EAAcD,SAASmB,KAAvB,EAA8BN,SAA9B;AACH;AACD,eAAOC,GAAP;AACH,KAjBD;AAkBH,C;;QAEeG,O,GAAAA,O;;AAnChB;;;;AACA;;;;AAkCO,SAASA,OAAT,CAAiBhB,IAAjB,EAAuBmB,CAAvB,EAA0BC,CAA1B,EAA6B;AAChC,QAAMC,QAAQ,kBAAQF,KAAK,oBAAYA,CAAZ,CAAb,CAAd;AACA,QAAMG,QAAQ,kBAAQF,KAAK,oBAAYA,CAAZ,CAAb,CAAd;AACA,QAAMG,KAAK,6DAAYF,KAAZ,oCAAsBA,KAAtB,GAAX;AACAE,OAAGC,OAAH,CAAW,eAAO;AACd,YAAMC,OAAOJ,MAAMK,GAAN,CAAUC,GAAV,CAAb;AACA,YAAMC,OAAON,MAAMI,GAAN,CAAUC,GAAV,CAAb;AACA,YAAI,CAACF,IAAD,IAAS,CAACG,IAAd,EAAoB;AACpB,YAAIH,QAAQG,IAAR,IAAgBT,EAAEQ,GAAF,MAAWP,EAAEO,GAAF,CAA/B,EAAuC;AACvC,YAAME,OAAO,CAACJ,IAAD,GAAQ,OAAR,GAAkB,CAACG,IAAD,GAAQ,SAAR,GAAoB,SAAnD;AACAE,gBAAQC,GAAR,CAAY/B,IAAZ,EAAkB2B,GAAlB,EAAuBE,IAAvB;AACA,YAAMG,OAAOb,EAAEQ,GAAF,CAAb;AACA,YAAMM,OAAOb,EAAEO,GAAF,CAAb;AACA,YAAI,OAAOK,IAAP,KAAgB,UAAhB,IAA8B,OAAOC,IAAP,KAAgB,UAAlD,EAA8D;AAC1D;AACAH,oBAAQC,GAAR,CAAYJ,GAAZ,EAAiB,KAAjB,EAAwBR,KAAKe,KAAKF,IAAL,CAA7B;AACAF,oBAAQC,GAAR,CAAYJ,GAAZ,EAAiB,IAAjB,EAAuBP,KAAKc,KAAKD,IAAL,CAA5B;AACH;AACJ,KAdD;AAeH;;AAnDD;;;;;;AAqDA,IAAMC,OAAO,SAAPA,IAAO;AAAA,WAAMC,oBAASC,UAAT,CAAoBC,CAApB,IAAyBA,EAAEH,IAAF,EAAzB,GAAoCG,CAA1C;AAAA,CAAb","file":"shouldComponentUpdate.js","sourcesContent":["import PureRenderMixin from 'react-addons-pure-render-mixin';\nimport { Iterable } from 'immutable';\n\n/**\n    Wrapper for PureRenderMixin.\n    This allows debugging that will show which properties changed.\n*/\nexport default function(instance, name) {\n    const mixin = PureRenderMixin.shouldComponentUpdate.bind(instance);\n    if (\n        process.env.BROWSER &&\n        window.steemDebug_shouldComponentUpdate === undefined\n    ) {\n        window.steemDebug_shouldComponentUpdate = false; // console command line completion\n    }\n    return (nextProps, nextState) => {\n        const upd = mixin(nextProps, nextState);\n        // Usage: steemDebug_shouldComponentUpdate = true\n        // Or: steemDebug_shouldComponentUpdate = /Comment/\n        if (\n            upd &&\n            process.env.BROWSER &&\n            window.steemDebug_shouldComponentUpdate\n        ) {\n            const filter = window.steemDebug_shouldComponentUpdate;\n            if (filter.test) {\n                if (!filter.test(name)) return upd;\n            }\n            compare(name, instance.props, nextProps);\n            compare(name, instance.state, nextState);\n        }\n        return upd;\n    };\n}\n\nexport function compare(name, a, b) {\n    const aKeys = new Set(a && Object.keys(a));\n    const bKeys = new Set(b && Object.keys(b));\n    const ab = new Set([...aKeys, ...aKeys]);\n    ab.forEach(key => {\n        const hasA = aKeys.has(key);\n        const hasB = bKeys.has(key);\n        if (!hasA && !hasB) return;\n        if (hasA && hasB && a[key] === b[key]) return;\n        const desc = !hasA ? 'added' : !hasB ? 'removed' : 'changed';\n        console.log(name, key, desc);\n        const aKey = a[key];\n        const bKey = b[key];\n        if (typeof aKey !== 'function' && typeof bKey !== 'function') {\n            //functions are too verbose\n            console.log(key, 'was', a && toJS(aKey));\n            console.log(key, 'is', b && toJS(bKey));\n        }\n    });\n}\n\nconst toJS = o => (Iterable.isIterable(o) ? o.toJS() : o);\n"]}