{"version":3,"sources":["../../../src/app/utils/ReactForm.js"],"names":["reactForm","name","instance","fields","initialValues","validation","TypeError","Array","isArray","bind","formState","state","handleSubmit","event","preventDefault","setFormState","valid","data","getData","formValid","fs","submitting","updateInitialValues","setInitialValuesFromForm","resetForm","setState","ret","submitCallback","fieldName","error","value","touched","field","n","f","def","props","onChange","clearForm","fieldType","t","initialValue","toString","checked","toBoolean","selected","e","target","v","onBlur","blur","formTouched","validate","split","type","hasValue","trim","JSON","parse"],"mappings":"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","file":"ReactForm.js","sourcesContent":["/**\n    @arg {string} name - form state will appear in this.state[name]\n    @arg {object} instance - `this` for the component\n    @arg {array} fields - ['username', 'save', ...]\n    @arg {object} initialValues required for checkboxes {save: false, ...}\n    @arg {function} validation - values => ({ username: ! values.username ? 'Required' : null, ... })\n*/\nexport default function reactForm({\n    name,\n    instance,\n    fields,\n    initialValues,\n    validation = () => {},\n}) {\n    if (typeof instance !== 'object')\n        throw new TypeError('instance is a required object');\n    if (!Array.isArray(fields))\n        throw new TypeError('fields is a required array');\n    if (typeof initialValues !== 'object')\n        throw new TypeError('initialValues is a required object');\n\n    // Give API users access to this.props, this.state, this.etc..\n    validation = validation.bind(instance);\n\n    const formState = (instance.state = instance.state || {});\n    formState[name] = {\n        // validate: () => setFormState(instance, fields, validation),\n        handleSubmit: submitCallback => event => {\n            event.preventDefault();\n            const { valid } = setFormState(name, instance, fields, validation);\n            if (!valid) return;\n            const data = getData(fields, instance.state);\n            let formValid = true;\n            const fs = instance.state[name] || {};\n            fs.submitting = true;\n\n            // User can call this function upon successful submission\n            const updateInitialValues = () => {\n                setInitialValuesFromForm(name, instance, fields, initialValues);\n                formState[name].resetForm();\n            };\n\n            instance.setState({ [name]: fs }, () => {\n                // TODO, support promise ret\n                const ret =\n                    submitCallback({ data, event, updateInitialValues }) || {};\n                // Look for field level errors\n                for (const fieldName of Object.keys(ret)) {\n                    const error = ret[fieldName];\n                    if (!error) continue;\n                    const value = instance.state[fieldName] || {};\n                    value.error = error;\n                    value.touched = true;\n                    if (error) formValid = false;\n                    instance.setState({ [fieldName]: value });\n                }\n                fs.submitting = false;\n                fs.valid = formValid;\n                instance.setState({ [name]: fs });\n            });\n        },\n        resetForm: () => {\n            for (const field of fields) {\n                const fieldName = n(field);\n                const f = instance.state[fieldName];\n                const def = initialValues[fieldName];\n                f.props.onChange(def);\n            }\n        },\n        clearForm: () => {\n            for (const field of fields) {\n                const fieldName = n(field);\n                const f = instance.state[fieldName];\n                f.props.onChange();\n            }\n        },\n    };\n\n    for (const field of fields) {\n        const fieldName = n(field);\n        const fieldType = t(field);\n\n        const fs = (formState[fieldName] = {\n            value: null,\n            error: null,\n            touched: false,\n        });\n\n        // Caution: fs.props is expanded <input {...fieldName.props} />, so only add valid props for the component\n        fs.props = { name: fieldName };\n\n        {\n            const initialValue = initialValues[fieldName];\n            if (fieldType === 'checked') {\n                fs.value = toString(initialValue);\n                fs.props.checked = toBoolean(initialValue);\n            } else if (fieldType === 'selected') {\n                fs.props.selected = toString(initialValue);\n                fs.value = fs.props.selected;\n            } else {\n                fs.props.value = toString(initialValue);\n                fs.value = fs.props.value;\n            }\n        }\n\n        fs.props.onChange = e => {\n            const value = e && e.target ? e.target.value : e; // API may pass value directly\n            const v = { ...(instance.state[fieldName] || {}) };\n            const initialValue = initialValues[fieldName];\n\n            if (fieldType === 'checked') {\n                v.touched = toString(value) !== toString(initialValue);\n                v.value = v.props.checked = toBoolean(value);\n                v.value = value;\n            } else if (fieldType === 'selected') {\n                v.touched = toString(value) !== toString(initialValue);\n                v.value = v.props.selected = toString(value);\n            } else {\n                v.touched = toString(value) !== toString(initialValue);\n                v.value = v.props.value = toString(value);\n            }\n\n            instance.setState({ [fieldName]: v }, () => {\n                setFormState(name, instance, fields, validation);\n            });\n        };\n\n        fs.props.onBlur = () => {\n            // Some errors are better shown only after blur === true\n            const v = { ...(instance.state[fieldName] || {}) };\n            v.blur = true;\n            instance.setState({ [fieldName]: v });\n        };\n    }\n}\n\nfunction setFormState(name, instance, fields, validation) {\n    let formValid = true;\n    let formTouched = false;\n    const v = validation(getData(fields, instance.state));\n    for (const field of fields) {\n        const fieldName = n(field);\n        const validate = v[fieldName];\n        const error = validate ? validate : null;\n        const value = { ...(instance.state[fieldName] || {}) };\n        value.error = error;\n        formTouched = formTouched || value.touched;\n        if (error) formValid = false;\n        instance.setState({ [fieldName]: value });\n    }\n    const fs = { ...(instance.state[name] || {}) };\n    fs.valid = formValid;\n    fs.touched = formTouched;\n    instance.setState({ [name]: fs });\n    return fs;\n}\n\nfunction setInitialValuesFromForm(name, instance, fields, initialValues) {\n    const data = getData(fields, instance.state);\n    for (const field of fields) {\n        const fieldName = n(field);\n        initialValues[fieldName] = data[fieldName];\n    }\n}\n\nfunction getData(fields, state) {\n    const data = {};\n    for (const field of fields) {\n        const fieldName = n(field);\n        data[fieldName] = state[fieldName].value;\n    }\n    return data;\n}\n\n/*\n    @arg {string} field - field:type\n    <pre>\n        type = checked (for checkbox or radio)\n        type = selected (for seelct option)\n        type = string\n    </pre>\n    @return {string} type\n*/\nfunction t(field) {\n    const [, type = 'string'] = field.split(':');\n    return type;\n}\n\n/**\n    @return {string} name\n*/\nfunction n(field) {\n    const [name] = field.split(':');\n    return name;\n}\n\nconst hasValue = v =>\n    v == null\n        ? false\n        : (typeof v === 'string' ? v.trim() : v) === '' ? false : true;\nconst toString = v => (hasValue(v) ? v : '');\nconst toBoolean = v => (hasValue(v) ? JSON.parse(v) : '');\n"]}