{"version":3,"sources":["../../../src/app/utils/ChainValidation.js"],"names":["validate_account_name","validate_account_name_with_memo","validate_memo_field","value","i","label","len","length","ref","BadActorList","includes","split","test","name","memo","VerifiedExchangeList","username","memokey","filter","v","w","PrivateKey","isWif","fromSeed","toPublicKey","toString"],"mappings":";;;;;QAKgBA,qB,GAAAA,qB;QAwDAC,+B,GAAAA,+B;QAOAC,mB,GAAAA,mB;;AApEhB;;;;AACA;;;;AACA;;;;AACA;;;;AAEO,SAASF,qBAAT,CAA+BG,KAA/B,EAAsC;AACzC,QAAIC,UAAJ;AAAA,QAAOC,cAAP;AAAA,QAAcC,YAAd;AAAA,QAAmBC,eAAnB;AAAA,QAA2BC,YAA3B;;AAEA,QAAI,CAACL,KAAL,EAAY;AACR,eAAO,2BAAG,qDAAH,CAAP;AACH;AACDI,aAASJ,MAAMI,MAAf;AACA,QAAIA,SAAS,CAAb,EAAgB;AACZ,eAAO,2BAAG,kDAAH,CAAP;AACH;AACD,QAAIA,SAAS,EAAb,EAAiB;AACb,eAAO,2BAAG,mDAAH,CAAP;AACH;AACD,QAAIE,uBAAaC,QAAb,CAAsBP,KAAtB,CAAJ,EAAkC;AAC9B,eAAO,2BAAG,6BAAH,CAAP;AACH;AACDK,UAAML,MAAMQ,KAAN,CAAY,GAAZ,CAAN;AACA,SAAKP,IAAI,CAAJ,EAAOE,MAAME,IAAID,MAAtB,EAA8BH,IAAIE,GAAlC,EAAuCF,GAAvC,EAA4C;AACxCC,gBAAQG,IAAIJ,CAAJ,CAAR;AACA,YAAI,CAAC,SAASQ,IAAT,CAAcP,KAAd,CAAL,EAA2B;AACvB,mBAAO,2BACH,oEADG,CAAP;AAGH;AACD,YAAI,CAAC,eAAeO,IAAf,CAAoBP,KAApB,CAAL,EAAiC;AAC7B,mBAAO,2BACH,mFADG,CAAP;AAGH;AACD,YAAI,KAAKO,IAAL,CAAUP,KAAV,CAAJ,EAAsB;AAClB,mBAAO,2BACH,4EADG,CAAP;AAGH;AACD,YAAI,CAAC,YAAYO,IAAZ,CAAiBP,KAAjB,CAAL,EAA8B;AAC1B,mBAAO,2BACH,2EADG,CAAP;AAGH;AACD,YAAI,EAAEA,MAAME,MAAN,IAAgB,CAAlB,CAAJ,EAA0B;AACtB,mBAAO,2BACH,0DADG,CAAP;AAGH;AACJ;AACD,WAAO,IAAP;AACH;;AAED;;;;;;;;AAQO,SAASN,+BAAT,CAAyCY,IAAzC,EAA+CC,IAA/C,EAAqD;AACxD,QAAIC,+BAAqBL,QAArB,CAA8BG,IAA9B,KAAuC,CAACC,IAA5C,EAAkD;AAC9C,eAAO,2BAAG,8CAAH,CAAP;AACH;AACD,WAAOd,sBAAsBa,IAAtB,CAAP;AACH;;AAEM,SAASX,mBAAT,CAA6BC,KAA7B,EAAoCa,QAApC,EAA8CC,OAA9C,EAAuD;AAC1Dd,YAAQA,MAAMQ,KAAN,CAAY,GAAZ,EAAiBO,MAAjB,CAAwB;AAAA,eAAKC,KAAK,EAAV;AAAA,KAAxB,CAAR;AACA,SAAK,IAAIC,CAAT,IAAcjB,KAAd,EAAqB;AACjB;AACA,YAAIA,MAAMiB,CAAN,EAASb,MAAT,IAAmB,EAAvB,EAA2B;AACvB,gBAAI,mBAAmBK,IAAnB,CAAwBT,MAAMiB,CAAN,CAAxB,CAAJ,EAAuC;AACnC,uBAAO,2BAAG,wCAAH,CAAP;AACH;AACD,gBAAIC,gBAAWC,KAAX,CAAiBnB,MAAMiB,CAAN,CAAjB,CAAJ,EAAgC;AAC5B,uBAAO,2BAAG,uCAAH,CAAP;AACH;AACD,gBACIH,YACAI,gBAAWE,QAAX,CAAoBP,WAAW,MAAX,GAAoBb,MAAMiB,CAAN,CAAxC,EACKI,WADL,GAEKC,QAFL,EAFJ,EAKE;AACE,uBAAO,2BAAG,qCAAH,CAAP;AACH;AACJ;AACJ;AACD,WAAO,IAAP;AACH","file":"ChainValidation.js","sourcesContent":["import tt from 'counterpart';\nimport BadActorList from 'app/utils/BadActorList';\nimport VerifiedExchangeList from 'app/utils/VerifiedExchangeList';\nimport { PrivateKey, PublicKey } from '@steemit/steem-js/lib/auth/ecc';\n\nexport function validate_account_name(value) {\n    let i, label, len, length, ref;\n\n    if (!value) {\n        return tt('chainvalidation_js.account_name_should_not_be_empty');\n    }\n    length = value.length;\n    if (length < 3) {\n        return tt('chainvalidation_js.account_name_should_be_longer');\n    }\n    if (length > 16) {\n        return tt('chainvalidation_js.account_name_should_be_shorter');\n    }\n    if (BadActorList.includes(value)) {\n        return tt('chainvalidation_js.badactor');\n    }\n    ref = value.split('.');\n    for (i = 0, len = ref.length; i < len; i++) {\n        label = ref[i];\n        if (!/^[a-z]/.test(label)) {\n            return tt(\n                'chainvalidation_js.each_account_segment_should_start_with_a_letter'\n            );\n        }\n        if (!/^[a-z0-9-]*$/.test(label)) {\n            return tt(\n                'chainvalidation_js.each_account_segment_should_have_only_letters_digits_or_dashes'\n            );\n        }\n        if (/--/.test(label)) {\n            return tt(\n                'chainvalidation_js.each_account_segment_should_have_only_one_dash_in_a_row'\n            );\n        }\n        if (!/[a-z0-9]$/.test(label)) {\n            return tt(\n                'chainvalidation_js.each_account_segment_should_end_with_a_letter_or_digit'\n            );\n        }\n        if (!(label.length >= 3)) {\n            return tt(\n                'chainvalidation_js.each_account_segment_should_be_longer'\n            );\n        }\n    }\n    return null;\n}\n\n/**\n * Do some additional validation for situations where an account name is used along with a memo.\n * Currently only used in the Transfers compoonent.\n *\n * @param {string} name\n * @param {string} memo\n * @returns {null|string} string if there's a validation error\n */\nexport function validate_account_name_with_memo(name, memo) {\n    if (VerifiedExchangeList.includes(name) && !memo) {\n        return tt('chainvalidation_js.verified_exchange_no_memo');\n    }\n    return validate_account_name(name);\n}\n\nexport function validate_memo_field(value, username, memokey) {\n    value = value.split(' ').filter(v => v != '');\n    for (var w in value) {\n        // Only perform key tests if it might be a key, i.e. it is a long string.\n        if (value[w].length >= 39) {\n            if (/5[HJK]\\w{40,45}/i.test(value[w])) {\n                return tt('chainvalidation_js.memo_has_privatekey');\n            }\n            if (PrivateKey.isWif(value[w])) {\n                return tt('chainvalidation_js.memo_is_privatekey');\n            }\n            if (\n                memokey ===\n                PrivateKey.fromSeed(username + 'memo' + value[w])\n                    .toPublicKey()\n                    .toString()\n            ) {\n                return tt('chainvalidation_js.memo_is_password');\n            }\n        }\n    }\n    return null;\n}\n"]}