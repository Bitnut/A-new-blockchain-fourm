{"version":3,"sources":["../../../src/app/utils/BrowserTests.js"],"names":["runTests","browserTests","rpt","pass","it","name","fn","console","log","error","stack","private_key","public_key","wif","pubkey","config","get","PrivateKey","fromSeed","assert","equal","toWif","fromWif","toPublicKey","toString","PublicKey","fromString"],"mappings":";;;;;;kBAOwBA,Q;;AAPxB;;;;AACA;;AACA;;AACA;;;;AAEO,IAAMC,sCAAe,EAArB;;AAEQ,SAASD,QAAT,GAAoB;AAC/B,QAAIE,MAAM,EAAV;AACA,QAAIC,OAAO,IAAX;AACA,aAASC,EAAT,CAAYC,IAAZ,EAAkBC,EAAlB,EAAsB;AAClBC,gBAAQC,GAAR,CAAY,SAAZ,EAAuBH,IAAvB;AACAH,eAAO,aAAaG,IAAb,GAAoB,IAA3B;AACA,YAAI;AACAC;AACH,SAFD,CAEE,OAAOG,KAAP,EAAc;AACZF,oBAAQE,KAAR,CAAcA,KAAd;AACAN,mBAAO,KAAP;AACAD,mBAAOO,MAAMC,KAAN,GAAc,MAArB;AACA,uDAAqB,cAArB,EAAqCD,KAArC;AACH;AACJ;;AAED,QAAIE,oBAAJ;AAAA,QAAiBC,mBAAjB;AACA,QAAMC,MAAM,qDAAZ;AACA,QAAMC,SACFC,gBAAOC,GAAP,CAAW,gBAAX,IACA,oDAFJ;;AAIAZ,OAAG,oBAAH,EAAyB,YAAM;AAC3BO,sBAAcM,gBAAWC,QAAX,CAAoB,GAApB,CAAd;AACAC,yBAAOC,KAAP,CAAaT,YAAYU,KAAZ,EAAb,EAAkCR,GAAlC;AACH,KAHD;AAIAT,OAAG,qBAAH,EAA0B,YAAM;AAC5B,8BAAOa,gBAAWK,OAAX,CAAmBT,GAAnB,CAAP;AACH,KAFD;AAGAT,OAAG,+BAAH,EAAoC,YAAM;AACtCQ,qBAAaD,YAAYY,WAAZ,EAAb;AACA;AACAJ,yBAAOC,KAAP,CAAaR,WAAWY,QAAX,EAAb,EAAoCV,MAApC,EAA4C,0BAA5C;AACH,KAJD;AAKAV,OAAG,mBAAH,EAAwB,YAAM;AAC1B,8BAAOqB,eAAUC,UAAV,CAAqBd,WAAWY,QAAX,EAArB,CAAP;AACH,KAFD;AAGA,QAAI,CAACrB,IAAL,EAAW,OAAOD,GAAP;AACd","file":"BrowserTests.js","sourcesContent":["import assert from 'assert';\nimport { serverApiRecordEvent } from 'app/utils/ServerApiClient';\nimport { PrivateKey, PublicKey } from '@steemit/steem-js/lib/auth/ecc';\nimport { config } from '@steemit/steem-js';\n\nexport const browserTests = {};\n\nexport default function runTests() {\n    let rpt = '';\n    let pass = true;\n    function it(name, fn) {\n        console.log('Testing', name);\n        rpt += 'Testing ' + name + '\\n';\n        try {\n            fn();\n        } catch (error) {\n            console.error(error);\n            pass = false;\n            rpt += error.stack + '\\n\\n';\n            serverApiRecordEvent('client_error', error);\n        }\n    }\n\n    let private_key, public_key;\n    const wif = '5JdeC9P7Pbd1uGdFVEsJ41EkEnADbbHGq6p1BwFxm6txNBsQnsw';\n    const pubkey =\n        config.get('address_prefix') +\n        '8m5UgaFAAYQRuaNejYdS8FVLVp9Ss3K1qAVk5de6F8s3HnVbvA';\n\n    it('create private key', () => {\n        private_key = PrivateKey.fromSeed('1');\n        assert.equal(private_key.toWif(), wif);\n    });\n    it('supports WIF format', () => {\n        assert(PrivateKey.fromWif(wif));\n    });\n    it('finds public from private key', () => {\n        public_key = private_key.toPublicKey();\n        // substring match ignore prefix\n        assert.equal(public_key.toString(), pubkey, 'Public key did not match');\n    });\n    it('parses public key', () => {\n        assert(PublicKey.fromString(public_key.toString()));\n    });\n    if (!pass) return rpt;\n}\n"]}