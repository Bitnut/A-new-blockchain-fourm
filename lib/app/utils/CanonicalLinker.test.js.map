{"version":3,"sources":["../../../src/app/utils/CanonicalLinker.test.js"],"names":["describe","post_data","author","permlink","category","link","test_cases","json_metadata","app","this_is","forEach","it","v","expect","toBe"],"mappings":";;;;;;AAAA;;;;AAEAA,SAAS,mBAAT,EAA8B,YAAM;AAChC,QAAMC,YAAY;AACdC,gBAAQ,MADM;AAEdC,kBAAU,WAFI;AAGdC,kBAAU,SAHI;AAIdC,cAAM;AAJQ,KAAlB;AAMA,QAAMC,aAAa,CACf,CACI,2BADJ,6BAESL,SAFT,IAEoBM,eAAe,EAFnC,KAGI,6CAHJ,CADe,EAMf,CACI,8BADJ,6BAESN,SAFT,IAEoBM,eAAe,EAAEC,KAAK,EAAP,EAFnC,KAGI,6CAHJ,CANe,EAWf,CACI,+BADJ,6BAESP,SAFT,IAEoBM,eAAe,EAAEC,KAAK,eAAP,EAFnC,KAGI,6CAHJ,CAXe,EAgBf,CACI,8CADJ,6BAESP,SAFT,IAEoBM,eAAe,EAAEC,KAAK,SAAP,EAFnC,KAGI,6CAHJ,CAhBe,EAqBf,CACI,4BADJ,6BAESP,SAFT,IAEoBM,eAAe,EAAEC,KAAK,YAAP,EAFnC,KAGI,kCAHJ,CArBe,EA0Bf,CACI,4BADJ,6BAESP,SAFT,IAEoBM,eAAe,EAAEC,KAAK,aAAP,EAFnC,KAGI,6CAHJ,CA1Be,EA+Bf,CACI,qCADJ,6BAESP,SAFT,IAEoBM,eAAe,EAAEC,KAAK,qBAAP,EAFnC,KAGI,6CAHJ,CA/Be,EAoCf,CACI,yBADJ,6BAESP,SAFT,IAEoBM,eAAe,EAAEC,KAAK,EAAEC,SAAS,UAAX,EAAP,EAFnC,KAGI,6CAHJ,CApCe,CAAnB;AA0CAH,eAAWI,OAAX,CAAmB,aAAK;AACpBC,WAAGC,EAAE,CAAF,CAAH,EAAS,YAAM;AACXC,mBAAO,wCAAkBD,EAAE,CAAF,CAAlB,CAAP,EAAgCE,IAAhC,CAAqCF,EAAE,CAAF,CAArC;AACH,SAFD;AAGH,KAJD;AAKH,CAtDD","file":"CanonicalLinker.test.js","sourcesContent":["import { makeCanonicalLink } from './CanonicalLinker';\n\ndescribe('makeCanonicalLink', () => {\n    const post_data = {\n        author: 'test',\n        permlink: 'test-post',\n        category: 'testing',\n        link: '/testing/@test/test-post',\n    };\n    const test_cases = [\n        [\n            'handles posts without app',\n            { ...post_data, json_metadata: {} },\n            'https://steemit.com/testing/@test/test-post',\n        ],\n        [\n            'handles empty strings as app',\n            { ...post_data, json_metadata: { app: '' } },\n            'https://steemit.com/testing/@test/test-post',\n        ],\n        [\n            \"handles apps that don't exist\",\n            { ...post_data, json_metadata: { app: 'fakeapp/1.2.3' } },\n            'https://steemit.com/testing/@test/test-post',\n        ],\n        [\n            \"handles app that don't exist without version\",\n            { ...post_data, json_metadata: { app: 'fakeapp' } },\n            'https://steemit.com/testing/@test/test-post',\n        ],\n        [\n            'handles apps that do exist',\n            { ...post_data, json_metadata: { app: 'busy/1.1.1' } },\n            'https://busy.org/@test/test-post',\n        ],\n        [\n            'handles posts from steemit',\n            { ...post_data, json_metadata: { app: 'steemit/0.1' } },\n            'https://steemit.com/testing/@test/test-post',\n        ],\n        [\n            'handles badly formatted app strings',\n            { ...post_data, json_metadata: { app: 'fakeapp/0.0.1/a////' } },\n            'https://steemit.com/testing/@test/test-post',\n        ],\n        [\n            'handles objects as apps',\n            { ...post_data, json_metadata: { app: { this_is: 'an objct' } } },\n            'https://steemit.com/testing/@test/test-post',\n        ],\n    ];\n    test_cases.forEach(v => {\n        it(v[0], () => {\n            expect(makeCanonicalLink(v[1])).toBe(v[2]);\n        });\n    });\n});\n"]}