{"version":3,"sources":["../../../src/app/utils/ExtractContent.js"],"names":["extractContent","remarkable","Remarkable","html","linkify","getValidImage","array","Array","isArray","length","get","content","author","permlink","parent_author","parent_permlink","json_metadata","category","title","created","net_rshares","children","author_link","link","body","jsonMetadata","image_link","JSON","parse","image","error","rtags","isHtml","test","htmlText","render","replace","mutate","images","desc","desc_complete","body2","remarkableStripper","allowedTags","trim","split","substring","dotSpace","lastIndexOf","pending_payout"],"mappings":"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","file":"ExtractContent.js","sourcesContent":["import remarkableStripper from 'app/utils/RemarkableStripper';\nimport links from 'app/utils/Links';\nimport sanitize from 'sanitize-html';\nimport { htmlDecode } from 'app/utils/Html';\nimport HtmlReady from 'shared/HtmlReady';\nimport Remarkable from 'remarkable';\n\nconst remarkable = new Remarkable({ html: true, linkify: false });\n\nconst getValidImage = array => {\n    return array &&\n        Array.isArray(array) &&\n        array.length >= 1 &&\n        typeof array[0] === 'string'\n        ? array[0]\n        : null;\n};\n\nexport default function extractContent(get, content) {\n    const {\n        author,\n        permlink,\n        parent_author,\n        parent_permlink,\n        json_metadata,\n        category,\n        title,\n        created,\n        net_rshares,\n        children,\n    } = get(\n        content,\n        'author',\n        'permlink',\n        'parent_author',\n        'parent_permlink',\n        'json_metadata',\n        'category',\n        'title',\n        'created',\n        'net_rshares',\n        'children'\n    );\n    const author_link = '/@' + get(content, 'author');\n    let link = `/@${author}/${permlink}`;\n    if (category) link = `/${category}${link}`;\n    const body = get(content, 'body');\n    let jsonMetadata = {};\n    let image_link;\n    try {\n        jsonMetadata = JSON.parse(json_metadata);\n        if (typeof jsonMetadata == 'string') {\n            // At least one case where jsonMetadata was double-encoded: #895\n            jsonMetadata = JSON.parse(jsonMetadata);\n        }\n        // First, attempt to find an image url in the json metadata\n        if (jsonMetadata && jsonMetadata.image) {\n            image_link = getValidImage(jsonMetadata.image);\n        }\n    } catch (error) {\n        // console.error('Invalid json metadata string', json_metadata, 'in post', author, permlink);\n    }\n\n    // If nothing found in json metadata, parse body and check images/links\n    if (!image_link) {\n        let rtags;\n        {\n            const isHtml = /^<html>([\\S\\s]*)<\\/html>$/.test(body);\n            const htmlText = isHtml\n                ? body\n                : remarkable.render(\n                      body.replace(\n                          /<!--([\\s\\S]+?)(-->|$)/g,\n                          '(html comment removed: $1)'\n                      )\n                  );\n            rtags = HtmlReady(htmlText, { mutate: false });\n        }\n\n        [image_link] = Array.from(rtags.images);\n    }\n\n    // Was causing broken thumnails.  IPFS was not finding images uploaded to another server until a restart.\n    // if(config.ipfs_prefix && image_link) // allow localhost nodes to see ipfs images\n    //     image_link = image_link.replace(links.ipfsPrefix, config.ipfs_prefix)\n\n    let desc;\n    let desc_complete = false;\n    if (!desc) {\n        // Short description.\n        // Remove bold and header, etc.\n        // Stripping removes links with titles (so we got the links above)..\n        // Remove block quotes if detected at beginning of comment preview if comment has a parent\n        const body2 = remarkableStripper.render(\n            get(content, 'depth') > 1\n                ? body.replace(/(^(\\n|\\r|\\s)*)>([\\s\\S]*?).*\\s*/g, '')\n                : body\n        );\n        desc = sanitize(body2, { allowedTags: [] }); // remove all html, leaving text\n        desc = htmlDecode(desc);\n\n        // Strip any raw URLs from preview text\n        desc = desc.replace(/https?:\\/\\/[^\\s]+/g, '');\n\n        // Grab only the first line (not working as expected. does rendering/sanitizing strip newlines?)\n        desc = desc.trim().split('\\n')[0];\n\n        if (desc.length > 140) {\n            desc = desc.substring(0, 140).trim();\n\n            const dotSpace = desc.lastIndexOf('. ');\n            if (dotSpace > 80 && !get(content, 'depth') > 1) {\n                desc = desc.substring(0, dotSpace + 1);\n            } else {\n                // Truncate, remove the last (likely partial) word (along with random punctuation), and add ellipses\n                desc = desc\n                    .substring(0, 120)\n                    .trim()\n                    .replace(/[,!\\?]?\\s+[^\\s]+$/, 'â€¦');\n            }\n        }\n        desc_complete = body2 === desc; // is the entire body in desc?\n    }\n    const pending_payout = get(content, 'pending_payout_value');\n    return {\n        author,\n        author_link,\n        permlink,\n        parent_author,\n        parent_permlink,\n        json_metadata: jsonMetadata,\n        category,\n        title,\n        created,\n        net_rshares,\n        children,\n        link,\n        image_link,\n        desc,\n        desc_complete,\n        body,\n        pending_payout,\n    };\n}\n"]}