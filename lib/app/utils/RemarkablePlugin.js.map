{"version":3,"sources":["../../../src/app/utils/RemarkablePlugin.js"],"names":[],"mappings":"AAAA;AACA;AACA;;AAEA;;;;;;;;;;;;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"RemarkablePlugin.js","sourcesContent":["// import {validate_account_name} from 'app/utils/ChainValidation'\n// import linksRe from 'app/utils/Links'\n// import config from 'config'\n\n/** usage\n<code>\nimport {plugin, tagRules} from 'app/utils/RemarkablePlugin'\nimport Remarkable from 'remarkable'\nconst remarkable = new Remarkable()\nremarkable.use(plugin(tagRules))\nconst renderedText = remarkable.render(`#jsc @user`)\nconsole.log('hashtags', tagRules.hashtags())\nconsole.log('usertags', tagRules.usertags())\nconsole.log('renderedText', renderedText)\n</code>\n*/\n// export const tagRules = {\n//     done: () => {\n//         const ret = {\n//             tags: Array.from(hashtags),\n//             users: Array.from(usertags),\n//         }\n//         hashtags = new Set()\n//         usertags = new Set()\n//         return ret\n//     },\n//     link_open: (tokens, i, options, env, renderer) => {\n//         tagLinkOpen = true\n//         const link = tokens[i + 1].content\n//         tagRules.youtubeId = null\n//         tagRules.youtubeTime = null\n//         if(link) link.replace(linksRe.youTube, url => {\n//             const match = url.match(linksRe.youTubeId)\n//             if(match && match.length >= 2) {\n//                 const id = match[1]\n//                 tagRules.youtubeId = id\n//                 const [, query] = link.split('?')\n//                 if(query) {\n//                     const params = query.split('&')\n//                     for(const param of params) {\n//                         if(/^t=/.test(param)) tagRules.youtubeTime = param.substring(2)\n//                     }\n//                 }\n//                 return\n//             }\n//             console.log(\"Youtube link without ID?\", url);\n//         })\n//         if(tagRules.youtubeId) return ''\n//         return renderer.rules.link_open(tokens, i, options, env, renderer)\n//     },\n//     text: (tokens, i, options, env, renderer) => {\n//         if(tagRules.youtubeId)\n//             return `youtube:${tagRules.youtubeId}${tagRules.youtubeTime ? ',' + tagRules.youtubeTime : ''}`\n//\n//         if(tagLinkOpen)\n//             return renderer.rules.text(tokens, i, options, env, renderer)\n//         let content = tokens[i].content\n//         // hashtag\n//         content = content.replace(/(^|\\s)(#[-a-z\\d]+)/ig, tag => {\n//             if(/#[\\d]+$/.test(tag)) return tag // Don't allow numbers to be tags\n//             const space = /^\\s/.test(tag) ? tag[0] : ''\n//             tag = tag.trim().substring(1)\n//             hashtags.add(tag)\n//             return space + `<a href=\"/trending/${tag.toLowerCase()}\">#${tag}</a>`\n//         })\n//         // usertag (mention)\n//         content = content.replace(/(^|\\s)(@[-\\.a-z\\d]+)/ig, user => {\n//             const space = /^\\s/.test(user) ? user[0] : ''\n//             user = user.trim().substring(1)\n//             const valid = validate_account_name(user) == null\n//             if(valid) usertags.add(user)\n//             return space + (valid ?\n//                 `<a href=\"/@${user}\">@${user}</a>` :\n//                 '@' + user\n//             )\n//         })\n//         // unescapted ipfs links (temp, until the reply editor categorizes the image)\n//         //if(config.ipfs_prefix)\n//         //    content = content.replace(linksRe.ipfsPrefix, config.ipfs_prefix)\n//\n//         return content\n//     },\n//     link_close: (tokens, i, options, env, renderer) => {\n//         tagLinkOpen = false\n//         if(tagRules.youtubeId) {\n//             tagRules.youtubeId = null\n//             tagRules.youtubeTime = null\n//             return ''\n//         }\n//         return renderer.rules.link_close(tokens, i, options, env, renderer)\n//     },\n// }\n// let hashtags = new Set()\n// let usertags = new Set()\n// let tagLinkOpen\n//\n// export const imageLinks = {\n//     done: () => {\n//         if(image.length > 1) links.delete(image[1])\n//         const ret = {\n//             image: Array.from(image),\n//             links: Array.from(links)\n//         }\n//         image = []\n//         links = new Set()\n//         return ret\n//     },\n//     image: (tokens, i) => {\n//         // ![Image Alt](https://duckduckgo.com/assets/badges/logo_square.64.png)\n//         const token = tokens[i]\n//         const {content} = token\n//         if(image.length) return content // only first one\n//         image.push(token.src)\n//         return content\n//     },\n//     link_open: (tokens, i) => {\n//         // [inline link](http://www.duckduckgo.com \"Example Title\")\n//         const token = tokens[i]\n//         const {content} = token\n//         // console.log('token(link_open)', token)\n//         const {href} = token\n//         if(linksRe.image.test(href) && !image.length)\n//             // looks like an image link, no markup though\n//             image.push(href)\n//         else\n//             links.add(href)\n//         // [![Foo](http://www.google.com.au/images/nav_logo7.png)](http://google.com.au/)\n//         if(image.length) return content // only the first image and link combo\n//         // link around an image\n//         const next = tokens[i + 1]\n//         if(next && next.type === 'image') {\n//             const {src} = next\n//             image.push(src)\n//             image.push(href)\n//         }\n//         return content\n//     }\n// }\n// let image = []\n// let links = new Set()\n\n/**\nUsage...\n<code>\nimport Remarkable from 'remarkable'\nconst remarkable = new Remarkable()\nconst customRules = {\n    text: (tokens, i, options, env, ctx) => {\n        const token = tokens[i]\n        const content = token.content\n        console.log('token(2)', token)\n        return content\n    }\n}\nremarkable.use(plugin(customRules))\nconst renderedText = remarkable.render(`#jsc`)\nconsole.log('renderedText', renderedText)\n</code>\n*/\n// export const plugin = rules => md => {\n//     // const render = md.renderer.render\n//     md.renderer.render = (tokens, options, env) => {\n//         let str = ''\n//         for (let i = 0; i < tokens.length; i++) {\n//             if (tokens[i].type === 'inline') {\n//                 str += md.renderer.render(tokens[i].children, options, env);\n//             } else {\n//                 const token = tokens[i]\n//                 // console.log('token(plugin)', token, rules)\n//                 const customRule = rules[token.type]\n//                 if(customRule)\n//                     str += customRule(tokens, i, options, env, md.renderer)\n//                 else {\n//                     str += md.renderer.rules[token.type](tokens, i, options, env, md.renderer)\n//                 }\n//             }\n//         }\n//         return str\n//     }\n// }\n"]}