{"version":3,"sources":["../../../src/app/utils/Links.test.js"],"names":["linksRe","describe","it","match","any","all","exec","assert","equal","locals","local","matchNot","remote","remotes","image","makeParams","bop","troll","determineViewMode","PARAM_VIEW_MODE","VIEW_MODE_WHISTLE","largeData","secureRandom","randomBuffer","toString","length","i","youTube","links","youTubeId","args","compare","matching","re","input","output","pos","Array","isArray","m"],"mappings":"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","file":"Links.test.js","sourcesContent":["import assert from 'assert';\nimport secureRandom from 'secure-random';\nimport links, * as linksRe from 'app/utils/Links';\nimport { PARAM_VIEW_MODE, VIEW_MODE_WHISTLE } from '../../shared/constants';\n\ndescribe('Links', () => {\n    it('all', () => {\n        match(\n            linksRe.any(),\n            \"https://example.com/wiki/Poe's_law\",\n            \"https://example.com/wiki/Poe's_law\"\n        );\n        match(linksRe.any(), \"https://example.com'\", 'https://example.com');\n        match(linksRe.any(), '\"https://example.com', 'https://example.com');\n        match(linksRe.any(), 'https://example.com\"', 'https://example.com');\n        match(linksRe.any(), \"https://example.com'\", 'https://example.com');\n        match(linksRe.any(), 'https://example.com<', 'https://example.com');\n        match(linksRe.any(), 'https://example.com>', 'https://example.com');\n        match(linksRe.any(), 'https://example.com\\n', 'https://example.com');\n        match(linksRe.any(), ' https://example.com ', 'https://example.com');\n        match(linksRe.any(), 'https://example.com ', 'https://example.com');\n        match(linksRe.any(), 'https://example.com.', 'https://example.com');\n        match(\n            linksRe.any(),\n            'https://example.com/page.',\n            'https://example.com/page'\n        );\n        match(linksRe.any(), 'https://example.com,', 'https://example.com');\n        match(\n            linksRe.any(),\n            'https://example.com/page,',\n            'https://example.com/page'\n        );\n    });\n    it('multiple matches', () => {\n        const all = linksRe.any('ig');\n        let match = all.exec('\\nhttps://example.com/1\\nhttps://example.com/2');\n        assert.equal(match[0], 'https://example.com/1');\n        match = all.exec('https://example.com/1 https://example.com/2');\n        assert.equal(match[0], 'https://example.com/2');\n    });\n    it('by domain', () => {\n        const locals = [\n            'https://localhost/',\n            'http://steemit.com',\n            'http://steemit.com/group',\n        ];\n        match(linksRe.local(), locals);\n        matchNot(linksRe.remote(), locals);\n\n        const remotes = ['https://example.com/', 'http://abc.co'];\n        match(linksRe.remote(), remotes);\n        matchNot(linksRe.local(), remotes);\n        // match(linksRe({external: false}), largeData + 'https://steemit.com2/next', 'https://steemit.com2/next')\n    });\n    it('by image', () => {\n        match(linksRe.image(), 'https://example.com/a.jpeg');\n        match(linksRe.image(), 'https://example.com/a/b.jpeg');\n        match(\n            linksRe.image(),\n            '![](https://example.com/img2/nehoshtanit.jpg)',\n            'https://example.com/img2/nehoshtanit.jpg'\n        );\n        match(\n            linksRe.image(),\n            '<img src=\"https://example.com/img2/nehoshtanit.jpg\"',\n            'https://example.com/img2/nehoshtanit.jpg'\n        );\n        match(\n            linksRe.image(),\n            'http://example.com\\nhttps://example.com/a.jpeg',\n            'https://example.com/a.jpeg'\n        );\n        match(\n            linksRe.image(),\n            'http://i.imgur.com/MWufFQi.jpg\")',\n            'http://i.imgur.com/MWufFQi.jpg'\n        );\n        matchNot(linksRe.image(), [\n            'http://imgur.com/iznWRVq',\n            'https://openmerchantaccount.com/',\n        ]);\n    });\n});\n\ndescribe('makeParams', () => {\n    it('creates an empty string when there are no params', () => {\n        assert(linksRe.makeParams([]) === '', 'not empty on array');\n        assert(linksRe.makeParams({}) === '', 'not empty on object');\n        assert(\n            linksRe.makeParams({}, false) === '',\n            'not empty on object with prefix false'\n        );\n        assert(\n            linksRe.makeParams([], false) === '',\n            'not empty on array with prefix false'\n        );\n        assert(\n            linksRe.makeParams([], '?') === '',\n            'not empty on array with prefix string'\n        );\n        assert(\n            linksRe.makeParams({}, '?') === '',\n            'not empty on object  with prefix string'\n        );\n    });\n    it('creates the correct string when passed an array', () => {\n        assert(\n            linksRe.makeParams(['bop=boop', 'troll=bridge']) ===\n                '?bop=boop&troll=bridge',\n            'incorrect string with'\n        );\n        assert(\n            linksRe.makeParams(['bop=boop', 'troll=bridge'], false) ===\n                'bop=boop&troll=bridge',\n            'incorrect string with prefix false'\n        );\n        assert(\n            linksRe.makeParams(['bop=boop', 'troll=bridge'], '&') ===\n                '&bop=boop&troll=bridge',\n            'incorrect string with prefix &'\n        );\n    });\n    it('creates the correct string when passed an object', () => {\n        assert(\n            linksRe.makeParams({ bop: 'boop', troll: 'bridge' }) ===\n                '?bop=boop&troll=bridge',\n            'incorrect string'\n        );\n        assert(\n            linksRe.makeParams({ bop: 'boop', troll: 'bridge' }, false) ===\n                'bop=boop&troll=bridge',\n            'incorrect string with prefix false'\n        );\n        assert(\n            linksRe.makeParams({ bop: 'boop', troll: 'bridge' }, '&') ===\n                '&bop=boop&troll=bridge',\n            'incorrect string with prefix &'\n        );\n    });\n});\n\ndescribe('determineViewMode', () => {\n    it('returns empty string when no parameter in search', () => {\n        assert(\n            linksRe.determineViewMode('') === '',\n            linksRe.determineViewMode('') + 'not empty on empty string'\n        );\n        assert(\n            linksRe.determineViewMode('?afs=asdf') === '',\n            'not empty on incorrect parameter'\n        );\n        assert(\n            linksRe.determineViewMode('?afs=asdf&apple=sauce') === '',\n            'not empty on incorrect parameter'\n        );\n    });\n\n    it('returns empty string when unrecognized value for parameter in search', () => {\n        assert(\n            linksRe.determineViewMode(`?${PARAM_VIEW_MODE}=asd`) === '',\n            'not empty on incorrect parameter value'\n        );\n        assert(\n            linksRe.determineViewMode(\n                `?${PARAM_VIEW_MODE}=${VIEW_MODE_WHISTLE}1`\n            ) === '',\n            'not empty on incorrect parameter value'\n        );\n        assert(\n            linksRe.determineViewMode(\n                `?${PARAM_VIEW_MODE}=asdf&apple=sauce`\n            ) === '',\n            'not empty on incorrect parameter value'\n        );\n        assert(\n            linksRe.determineViewMode(\n                `?apple=sauce&${PARAM_VIEW_MODE}=asdf`\n            ) === '',\n            'not empty on incorrect parameter value'\n        );\n    });\n    it('returns correct value when recognized value for parameter in search', () => {\n        assert(\n            linksRe.determineViewMode(\n                `?${PARAM_VIEW_MODE}=${VIEW_MODE_WHISTLE}`\n            ) === VIEW_MODE_WHISTLE,\n            'wrong response on correct parameter'\n        );\n        assert(\n            linksRe.determineViewMode(\n                `?${PARAM_VIEW_MODE}=${VIEW_MODE_WHISTLE}&apple=sauce`\n            ) === VIEW_MODE_WHISTLE,\n            'wrong response on correct parameter'\n        );\n        assert(\n            linksRe.determineViewMode(\n                `?apple=sauce&${PARAM_VIEW_MODE}=${VIEW_MODE_WHISTLE}`\n            ) === VIEW_MODE_WHISTLE,\n            'wrong response on correct parameter'\n        );\n    });\n});\n\n// 1st in the browser it is very expensive to re-create a regular expression many times, however, in nodejs is is very in-expensive (it is as if it is caching it).\ndescribe('Performance', () => {\n    const largeData = secureRandom.randomBuffer(1024 * 10).toString('hex');\n    it('any, ' + largeData.length + ' bytes x 10,000', () => {\n        for (let i = 0; i < 10000; i++) {\n            const match = (largeData + 'https://example.com').match(\n                linksRe.any()\n            );\n            assert(match, 'no match');\n            assert(match[0] === 'https://example.com', 'no match');\n        }\n    });\n    it('image (large), ' + largeData.length + ' bytes x 10,000', () => {\n        for (let i = 0; i < 10000; i++) {\n            matchNot(\n                linksRe.image(),\n                'https://lh3.googleusercontent.com/OehcduRZPcVIX_2tlOKgYHADtBvorTfL4JtjfGAPWZyiiI9p_g2ZKEUKfuv3By-aiVfirXaYvEsViJEbxts6IeVYqidnpgkkkXAe0Q79_ARXX6CU5hBK2sZaHKa20U3jBzYbMxT-OVNX8-JYf-GYa2geUQa6pVpUDY35iaiiNBObF-TMIUOqm0P61gCdukTFwLgld2BBlxoVNNt_w6VglYHJP0W4izVNkEu7ugrU-qf2Iw9hb22SGIFNpbzL_ldomDMthIuYfKSYGsqe2ClvNKRz-_vVCQr7ggRXra16uQOdUUv5IVnkK67p9yR8ioajJ4tiGdzazYVow46pbeZ76i9_NoEYnOEX2_a7niofnC5BgAjoQEeoes1cMWVM7V8ZSexBA-cxmi0EVLds4RBkInvaUZjVL7h3oJ5I19GugPTzlyVyYtkf1ej6LNttkagqHgMck87UQGvCbwDX9ECTngffwQPYZlZKnthW0DlkFGgHN8T9uqEpl-3ki50gTa6gC0Q16mEeDRKZe7_g5Sw52OjMsfWxmBBWWMSHzlQKKAIKMKKaD6Td0O_zpiXXp7Fyl7z_iESvCpOAUAIKnyJyF_Y0UYktEmw=w2066-h1377-no'\n            );\n        }\n    });\n    it('image, ' + largeData.length + ' bytes x 10,000', () => {\n        for (let i = 0; i < 10000; i++) {\n            const match = (largeData + 'https://example.com/img.jpeg').match(\n                linksRe.image()\n            );\n            assert(match, 'no match');\n            assert(match[0] === 'https://example.com/img.jpeg', 'no match');\n        }\n    });\n    it('remote, ' + largeData.length + ' bytes x 10,000', () => {\n        for (let i = 0; i < 10000; i++) {\n            const match = (largeData + 'https://example.com').match(\n                linksRe.remote()\n            );\n            assert(match, 'no match');\n            assert(match[0] === 'https://example.com', 'no match');\n        }\n    });\n    it('youTube', () => {\n        match(linksRe.youTube(), 'https://youtu.be/xG7ajrbj4zs?t=7s');\n        match(\n            linksRe.youTube(),\n            'https://www.youtube.com/watch?v=xG7ajrbj4zs&t=14s'\n        );\n        match(\n            linksRe.youTube(),\n            'https://www.youtube.com/watch?v=xG7ajrbj4zs&feature=youtu.be&t=14s'\n        );\n    });\n    it('youTubeId', () => {\n        match(\n            links.youTubeId,\n            'https://youtu.be/xG7ajrbj4zs?t=7s',\n            'xG7ajrbj4zs',\n            1\n        );\n        match(\n            links.youTubeId,\n            'https://www.youtube.com/watch?v=xG7ajrbj4zs&t=14s',\n            'xG7ajrbj4zs',\n            1\n        );\n        match(\n            links.youTubeId,\n            'https://www.youtube.com/watch?v=xG7ajrbj4zs&feature=youtu.be&t=14s',\n            'xG7ajrbj4zs',\n            1\n        );\n    });\n});\n\nconst match = (...args) => compare(true, ...args);\nconst matchNot = (...args) => compare(false, ...args);\nconst compare = (matching, re, input, output = input, pos = 0) => {\n    if (Array.isArray(input)) {\n        for (let i = 0; i < input.length; i++)\n            compare(matching, re, input[i], output[i]);\n        return;\n    }\n    // console.log('compare, input', input)\n    // console.log('compare, output', output)\n    const m = input.match(re);\n    if (matching) {\n        assert(\n            m,\n            `No match --> ${input} --> output ${\n                output\n            } --> using ${re.toString()}`\n        );\n        // console.log('m', m)\n        assert.equal(\n            m[pos],\n            output,\n            `Unmatched ${m[pos]} --> input ${input} --> output ${\n                output\n            } --> using ${re.toString()}`\n        );\n    } else {\n        assert(\n            !m,\n            `False match --> input ${input} --> output ${\n                output\n            } --> using ${re.toString()}`\n        );\n    }\n};\n"]}