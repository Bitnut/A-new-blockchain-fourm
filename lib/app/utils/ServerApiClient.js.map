{"version":3,"sources":["../../../src/app/utils/ServerApiClient.js"],"names":["serverApiLogin","serverApiLogout","serverApiRecordEvent","recordPageView","saveCords","setUserPreferences","isTosAccepted","acceptTos","request_base","method","mode","credentials","headers","Accept","account","signatures","process","env","BROWSER","window","$STM_ServerBusy","request","body","csrf","$STM_csrf","fetch","last_call","type","val","rate_limit_ms","Date","value","stack","toString","api","call","collection","metadata","last_page","last_views","last_page_promise","page","referer","resolve","ga","callAsync","x","y","payload","then","res","json"],"mappings":"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","file":"ServerApiClient.js","sourcesContent":["import { api } from '@steemit/steem-js';\n\nconst request_base = {\n    method: 'post',\n    mode: 'no-cors',\n    credentials: 'same-origin',\n    headers: {\n        Accept: 'application/json',\n        'Content-type': 'application/json',\n    },\n};\n\nexport function serverApiLogin(account, signatures) {\n    if (!process.env.BROWSER || window.$STM_ServerBusy) return;\n    const request = Object.assign({}, request_base, {\n        body: JSON.stringify({ account, signatures, csrf: $STM_csrf }),\n    });\n    return fetch('/api/v1/login_account', request);\n}\n\nexport function serverApiLogout() {\n    if (!process.env.BROWSER || window.$STM_ServerBusy) return;\n    const request = Object.assign({}, request_base, {\n        body: JSON.stringify({ csrf: $STM_csrf }),\n    });\n    return fetch('/api/v1/logout_account', request);\n}\n\nlet last_call;\nexport function serverApiRecordEvent(type, val, rate_limit_ms = 5000) {\n    if (!process.env.BROWSER || window.$STM_ServerBusy) return;\n    if (last_call && new Date() - last_call < rate_limit_ms) return;\n    last_call = new Date();\n    const value = val && val.stack ? `${val.toString()} | ${val.stack}` : val;\n    api.call(\n        'overseer.collect',\n        { collection: 'event', metadata: { type, value } },\n        error => {\n            // if (error) console.warn('overseer error', error, error.data);\n        }\n    );\n}\n\nlet last_page, last_views, last_page_promise;\nexport function recordPageView(page, referer, account) {\n    if (last_page_promise && page === last_page) return last_page_promise;\n\n    if (!process.env.BROWSER) return Promise.resolve(0);\n    if (window.ga) {\n        // virtual pageview\n        window.ga('set', 'page', page);\n        window.ga('send', 'pageview');\n    }\n    last_page_promise = api.callAsync('overseer.pageview', {\n        page,\n        referer,\n        account,\n    });\n    last_page = page;\n    return last_page_promise;\n}\n\nexport function saveCords(x, y) {\n    const request = Object.assign({}, request_base, {\n        body: JSON.stringify({ csrf: $STM_csrf, x: x, y: y }),\n    });\n    fetch('/api/v1/save_cords', request);\n}\n\nexport function setUserPreferences(payload) {\n    if (!process.env.BROWSER || window.$STM_ServerBusy)\n        return Promise.resolve();\n    const request = Object.assign({}, request_base, {\n        body: JSON.stringify({ csrf: window.$STM_csrf, payload }),\n    });\n    return fetch('/api/v1/setUserPreferences', request);\n}\n\nexport function isTosAccepted() {\n    const request = Object.assign({}, request_base, {\n        body: JSON.stringify({ csrf: window.$STM_csrf }),\n    });\n    return fetch('/api/v1/isTosAccepted', request).then(res => res.json());\n}\n\nexport function acceptTos() {\n    const request = Object.assign({}, request_base, {\n        body: JSON.stringify({ csrf: window.$STM_csrf }),\n    });\n    return fetch('/api/v1/acceptTos', request);\n}\n"]}