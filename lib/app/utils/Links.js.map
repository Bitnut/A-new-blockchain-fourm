{"version":3,"sources":["../../../src/app/utils/Links.js"],"names":["urlChar","urlCharEnd","replace","imagePath","domainPath","urlChars","urlSet","domain","path","any","flags","RegExp","local","remote","youTube","image","imageFile","youTubeId","vimeo","vimeoId","ipfsPrefix","twitch","addToParams","outputParams","inputParams","key","allowedValues","respParams","indexOf","makeParams","params","prefix","paramsList","constructor","Array","forEach","value","push","length","join","determineViewMode","searchList","search","substr","split","i","PARAM_VIEW_MODE","VIEW_MODE_WHISTLE"],"mappings":"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","file":"Links.js","sourcesContent":["import { PARAM_VIEW_MODE, VIEW_MODE_WHISTLE } from '../../shared/constants';\n\nconst urlChar = '[^\\\\s\"<>\\\\]\\\\[\\\\(\\\\)]';\nconst urlCharEnd = urlChar.replace(/\\]$/, \".,']\"); // insert bad chars to end on\nconst imagePath =\n    '(?:(?:\\\\.(?:tiff?|jpe?g|gif|png|svg|ico)|ipfs/[a-z\\\\d]{40,}))';\nconst domainPath = '(?:[-a-zA-Z0-9\\\\._]*[-a-zA-Z0-9])';\nconst urlChars = '(?:' + urlChar + '*' + urlCharEnd + ')?';\n\nconst urlSet = ({ domain = domainPath, path } = {}) => {\n    // urlChars is everything but html or markdown stop chars\n    return `https?:\\/\\/${domain}(?::\\\\d{2,5})?(?:[/\\\\?#]${urlChars}${\n        path ? path : ''\n    })${path ? '' : '?'}`;\n};\n\n/**\n    Unless your using a 'g' (glob) flag you can store and re-use your regular expression.  Use the cache below.  If your using a glob (for example: replace all), the regex object becomes stateful and continues where it left off when called with the same string so naturally the regexp object can't be cached for long.\n*/\nexport const any = (flags = 'i') => new RegExp(urlSet(), flags);\nexport const local = (flags = 'i') =>\n    new RegExp(\n        urlSet({ domain: '(?:localhost|(?:.*\\\\.)?steemit.com)' }),\n        flags\n    );\nexport const remote = (flags = 'i') =>\n    new RegExp(\n        urlSet({ domain: `(?!localhost|(?:.*\\\\.)?steemit.com)${domainPath}` }),\n        flags\n    );\nexport const youTube = (flags = 'i') =>\n    new RegExp(urlSet({ domain: '(?:(?:.*.)?youtube.com|youtu.be)' }), flags);\nexport const image = (flags = 'i') =>\n    new RegExp(urlSet({ path: imagePath }), flags);\nexport const imageFile = (flags = 'i') => new RegExp(imagePath, flags);\n// export const nonImage = (flags = 'i') => new RegExp(urlSet({path: '!' + imageFile}), flags)\n// export const markDownImageRegExp = (flags = 'i') => new RegExp('\\!\\[[\\w\\s]*\\]\\(([^\\)]+)\\)', flags);\n\nexport default {\n    any: any(),\n    local: local(),\n    remote: remote(),\n    image: image(),\n    imageFile: imageFile(),\n    youTube: youTube(),\n    youTubeId: /(?:(?:youtube.com\\/watch\\?v=)|(?:youtu.be\\/)|(?:youtube.com\\/embed\\/))([A-Za-z0-9\\_\\-]+)/i,\n    vimeo: /https?:\\/\\/(?:vimeo.com\\/|player.vimeo.com\\/video\\/)([0-9]+)\\/*/,\n    vimeoId: /(?:vimeo.com\\/|player.vimeo.com\\/video\\/)([0-9]+)/,\n    // simpleLink: new RegExp(`<a href=\"(.*)\">(.*)<\\/a>`, 'ig'),\n    ipfsPrefix: /(https?:\\/\\/.*)?\\/ipfs/i,\n    twitch: /https?:\\/\\/(?:www.)?twitch.tv\\/(?:(videos)\\/)?([a-zA-Z0-9][\\w]{3,24})/i,\n};\n\n//TODO: possible this should go somewhere else.\n/**\n * Returns a new object extended from outputParams with [key] == inputParams[key] if the value is in allowedValues\n * @param outputParams\n * @param inputParams\n * @param key\n * @param allowedValues\n * @returns {*}\n */\nexport const addToParams = (outputParams, inputParams, key, allowedValues) => {\n    const respParams = Object.assign({}, outputParams);\n    if (inputParams[key] && allowedValues.indexOf(inputParams[key]) > -1) {\n        respParams[key] = inputParams[key];\n    }\n    return respParams;\n};\n\n//TODO: possible this should go somewhere else.\nexport const makeParams = (params, prefix) => {\n    let paramsList = [];\n    if (params.constructor === Array) {\n        paramsList = params;\n    } else {\n        Object.entries(params).forEach(([key, value]) => {\n            paramsList.push(`${key}=${value}`);\n        });\n    }\n    if (paramsList.length > 0) {\n        return (\n            (prefix !== false\n                ? typeof prefix === 'string' ? prefix : '?'\n                : '') + paramsList.join('&')\n        );\n    }\n    return '';\n};\n\n/**\n *\n * @param {string} search - window.location.search formatted string (may omit '?')\n * @returns {string}\n */\nexport const determineViewMode = search => {\n    const searchList =\n        search.indexOf('?') === 0\n            ? search.substr(1).split('&')\n            : search.split('&');\n    for (let i = 0; i < searchList.length; i++) {\n        if (searchList[i].indexOf(PARAM_VIEW_MODE) === 0) {\n            if (searchList[i] == PARAM_VIEW_MODE + '=' + VIEW_MODE_WHISTLE) {\n                //we only want to support known view modes.\n                return VIEW_MODE_WHISTLE;\n            }\n            return '';\n        }\n    }\n    return '';\n};\n\n// Original regex\n// const urlRegex = '^(?!mailto:)(?:(?:http|https|ftp)://)(?:\\\\S+(?::\\\\S*)?@)?(?:(?:(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}(?:\\\\.(?:[0-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))|(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]+-?)*[a-z\\\\u00a1-\\\\uffff0-9]+)(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]+-?)*[a-z\\\\u00a1-\\\\uffff0-9]+)*(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,})))|localhost)(?::\\\\d{2,5})?(?:(/|\\\\?|#)[^\\\\s]*)?$';\n\n// About performance\n// Using exec on the same regex object requires a new regex to be created and compile for each text (ex: post).  Instead replace can be used `body.replace(remoteRe, l => {` discarding the result for better performance`}).  Re-compiling is a chrome bottleneck but did not effect nodejs.\n"]}