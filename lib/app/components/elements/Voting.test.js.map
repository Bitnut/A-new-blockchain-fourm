{"version":3,"sources":["../../../../src/app/components/elements/Voting.test.jsx"],"names":["global","window","localStorage","adapter","Adapter","mockGlobal","props","sbd_print_rate","feed_price","base","quote","content","test","author","permlink","active_votes","stats","total_votes","max_accepted_payout","percent_steem_dollars","pending_payout_value","cashout_time","pending_payout_sbd","mockUser","current","username","voteTestObj","describe","it","mockStore","market","offchain","user","transaction","discussion","routing","app","wrapped","w","p","dive","expect","isEmptyRender","toEqual","find","length","html","toContain","setState","weight","showWeight","simulate","state","myVote","getActions","type","payload","operation","voter","post_obj","store","rootReducer","component","renderer","create","toJSON"],"mappings":"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","file":"Voting.test.js","sourcesContent":["import React from 'react';\nimport { IntlProvider } from 'react-intl';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport { configure, mount, shallow } from 'enzyme';\nimport Adapter from 'enzyme-adapter-react-15';\nimport { fromJS, Map } from 'immutable';\nimport renderer from 'react-test-renderer';\nimport rootReducer from 'app/redux/RootReducer';\nimport Voting from './Voting';\nimport configureMockStore from 'redux-mock-store';\n\nglobal.window = {};\nimport localStorage from 'mock-local-storage';\nwindow.localStorage = global.localStorage;\n\nconfigure({ adapter: new Adapter() });\n\nconst mockGlobal = Map({\n    props: Map({ sbd_print_rate: 99 }),\n    feed_price: Map({\n        base: '5 SBD',\n        quote: '10 STEEM',\n    }),\n    content: Map({\n        test: Map({\n            author: 'Jane Doe',\n            permlink: 'zip',\n            active_votes: Map({}),\n            stats: {\n                total_votes: 1,\n            },\n            max_accepted_payout: '999999 SBD',\n            percent_steem_dollars: 0,\n            pending_payout_value: '10 SBD',\n            cashout_time: '2018-03-30T10:00:00Z',\n            pending_payout_sbd: 99,\n        }),\n    }),\n});\n\nconst mockUser = Map({ current: Map({ username: 'Janice' }) });\n\nconst voteTestObj = fromJS({\n    stats: {\n        total_votes: 1,\n    },\n    max_accepted_payout: '999999 SBD',\n    percent_steem_dollars: 0,\n    pending_payout_value: '10 SBD',\n    cashout_time: '2018-03-30T10:00:00Z',\n});\n\ndescribe('Voting', () => {\n    it('should render nothing if flag prop is true and user is not logged in.', () => {\n        const mockStore = configureMockStore()({\n            global: Map({}),\n            market: {},\n            offchain: {},\n            user: {},\n            transaction: {},\n            discussion: {},\n            routing: {},\n            app: {},\n        });\n        let wrapped = shallow(\n            <Voting\n                post=\"test\"\n                flag={true}\n                vote={(w, p) => {}}\n                post_obj={voteTestObj}\n                price_per_steem={1}\n                sbd_print_rate={10000}\n                store={mockStore}\n            />\n        ).dive();\n        expect(wrapped.isEmptyRender()).toEqual(true);\n    });\n\n    it('should render flag if user is logged in and flag prop is true.', () => {\n        const mockStore = configureMockStore()({\n            global: mockGlobal,\n            market: {},\n            offchain: {},\n            user: mockUser,\n            transaction: {},\n            discussion: {},\n            routing: {},\n            app: {},\n        });\n        let wrapped = shallow(\n            <Voting\n                post=\"test\"\n                flag={true}\n                vote={(w, p) => {}}\n                post_obj={voteTestObj}\n                price_per_steem={1}\n                sbd_print_rate={10000}\n                store={mockStore}\n            />\n        ).dive();\n        expect(wrapped.find('.Voting').length).toEqual(1);\n        expect(wrapped.find('Dropdown').html()).toContain(\n            '<span href=\"#\" title=\"Flag\" id=\"downvote_button\" class=\"flag\">'\n        );\n    });\n\n    it('should change state.weight and state.showWeight as expected when flag is clicked', () => {\n        const mockStore = configureMockStore()({\n            global: mockGlobal,\n            market: {},\n            offchain: {},\n            user: mockUser,\n            transaction: {},\n            discussion: {},\n            routing: {},\n            app: {},\n        });\n        let wrapped = shallow(\n            <Voting\n                post=\"test\"\n                flag={true}\n                vote={(w, p) => {}}\n                post_obj={voteTestObj}\n                price_per_steem={1}\n                sbd_print_rate={10000}\n                store={mockStore}\n            />\n        ).dive();\n        wrapped.setState({ weight: 666, showWeight: false });\n        expect(\n            wrapped\n                .find('Dropdown')\n                .dive()\n                .find('#downvote_button').length\n        ).toEqual(1);\n        wrapped\n            .find('Dropdown')\n            .dive()\n            .find('#downvote_button')\n            .simulate('click');\n        expect(wrapped.state().weight).toEqual(666);\n        expect(wrapped.state().showWeight).toEqual(true);\n    });\n\n    it('should not dispatch an action when flag is clicked and myVote is 0.', () => {\n        const mockStore = configureMockStore()({\n            global: mockGlobal,\n            market: {},\n            offchain: {},\n            user: mockUser,\n            transaction: {},\n            discussion: {},\n            routing: {},\n            app: {},\n        });\n        let wrapped = shallow(\n            <Voting\n                post=\"test\"\n                flag={true}\n                vote={(w, p) => {}}\n                post_obj={voteTestObj}\n                price_per_steem={1}\n                sbd_print_rate={10000}\n                store={mockStore}\n            />\n        ).dive();\n        wrapped.setState({ myVote: 0 });\n        wrapped\n            .find('Dropdown')\n            .dive()\n            .find('#downvote_button')\n            .simulate('click');\n        expect(mockStore.getActions()).toEqual([]);\n    });\n\n    it('should dispatch an action when flag is clicked and myVote is negative', () => {\n        const mockStore = configureMockStore()({\n            global: mockGlobal,\n            market: {},\n            offchain: {},\n            user: mockUser,\n            transaction: {},\n            discussion: {},\n            routing: {},\n            app: {},\n        });\n        let wrapped = shallow(\n            <Voting\n                post=\"test\"\n                flag={true}\n                vote={(w, p) => {}}\n                post_obj={voteTestObj}\n                price_per_steem={1}\n                sbd_print_rate={10000}\n                store={mockStore}\n            />\n        ).dive();\n        wrapped.setState({ myVote: -666 });\n        wrapped.find('#revoke_downvote_button').simulate('click');\n        expect(mockStore.getActions()[0].type).toEqual(\n            'transaction/BROADCAST_OPERATION'\n        );\n        expect(mockStore.getActions()[0].payload.operation.weight).toEqual(0);\n        expect(mockStore.getActions()[0].payload.operation.voter).toEqual(\n            'Janice'\n        );\n    });\n\n    it('should render upvote and should not render flag if user is logged in and flag prop is false.', () => {\n        const mockStore = configureMockStore()({\n            global: mockGlobal,\n            market: {},\n            offchain: {},\n            user: mockUser,\n            transaction: {},\n            discussion: {},\n            routing: {},\n            app: {},\n        });\n        let wrapped = shallow(\n            <Voting\n                post=\"test\"\n                flag={false}\n                vote={(w, p) => {}}\n                post_obj={voteTestObj}\n                price_per_steem={1}\n                sbd_print_rate={10000}\n                store={mockStore}\n            />\n        ).dive();\n        expect(wrapped.find('.flag').length).toEqual(0);\n        expect(wrapped.find('.upvote').length).toEqual(1);\n    });\n\n    it('should dispatch an action with payload when upvote button is clicked.', () => {\n        const mockStore = configureMockStore()({\n            global: mockGlobal,\n            market: {},\n            offchain: {},\n            user: mockUser,\n            transaction: {},\n            discussion: {},\n            routing: {},\n            app: {},\n        });\n        let wrapped = shallow(\n            <Voting\n                post=\"test\"\n                flag={false}\n                vote={(w, p) => {}}\n                post_obj={voteTestObj}\n                price_per_steem={1}\n                sbd_print_rate={10000}\n                store={mockStore}\n            />\n        ).dive();\n        wrapped.find('#upvote_button').simulate('click');\n        expect(mockStore.getActions()[0].type).toEqual(\n            'transaction/BROADCAST_OPERATION'\n        );\n        expect(mockStore.getActions()[0].payload.operation.weight).toEqual(\n            10000\n        );\n        expect(mockStore.getActions()[0].payload.operation.voter).toEqual(\n            'Janice'\n        );\n    });\n\n    it('should show all SP if percent_steem_dollars is 0', () => {\n        const post_obj = fromJS({\n            stats: {\n                total_votes: 1,\n            },\n            max_accepted_payout: '999999 SBD',\n            percent_steem_dollars: 0,\n            pending_payout_value: '10 SBD',\n            cashout_time: '2018-03-30T10:00:00Z',\n        });\n        const store = createStore(rootReducer);\n        const component = renderer.create(\n            <Provider store={store}>\n                <IntlProvider locale=\"en\">\n                    <Voting\n                        post=\"Test post\"\n                        vote={(w, p) => {}}\n                        post_obj={post_obj}\n                        price_per_steem={1}\n                        sbd_print_rate={10000}\n                    />\n                </IntlProvider>\n            </Provider>\n        );\n        expect(JSON.stringify(component.toJSON())).toContain(\n            '(0.00 SBD, 10.00 SP)'\n        );\n    });\n\n    it('should omit liquid steem if print rate is 10000', () => {\n        const store = createStore(rootReducer);\n        const post_obj = fromJS({\n            stats: {\n                total_votes: 1,\n            },\n            max_accepted_payout: '999999 SBD',\n            percent_steem_dollars: 10000,\n            pending_payout_value: '10 SBD',\n            cashout_time: '2018-03-30T10:00:00Z',\n        });\n        const component = renderer.create(\n            <Provider store={store}>\n                <IntlProvider locale=\"en\">\n                    <Voting\n                        post=\"Test post\"\n                        vote={(w, p) => {}}\n                        post_obj={post_obj}\n                        price_per_steem={1}\n                        sbd_print_rate={10000}\n                    />\n                </IntlProvider>\n            </Provider>\n        );\n        expect(JSON.stringify(component.toJSON())).toContain(\n            '(5.00 SBD, 5.00 SP)'\n        );\n    });\n\n    it('should show liquid steem if print rate is < 10000', () => {\n        const post_obj = fromJS({\n            stats: {\n                total_votes: 1,\n            },\n            max_accepted_payout: '999999 SBD',\n            percent_steem_dollars: 10000,\n            pending_payout_value: '10 SBD',\n            cashout_time: '2018-03-30T10:00:00Z',\n        });\n        const store = createStore(rootReducer);\n        const component = renderer.create(\n            <Provider store={store}>\n                <IntlProvider locale=\"en\">\n                    <Voting\n                        post=\"Test post\"\n                        vote={(w, p) => {}}\n                        post_obj={post_obj}\n                        price_per_steem={1}\n                        sbd_print_rate={5000}\n                    />\n                </IntlProvider>\n            </Provider>\n        );\n        expect(JSON.stringify(component.toJSON())).toContain(\n            '(2.50 SBD, 2.50 STEEM, 5.00 SP)'\n        );\n    });\n});\n"]}