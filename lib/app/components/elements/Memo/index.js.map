{"version":3,"sources":["../../../../../src/app/components/elements/Memo/index.jsx"],"names":["MINIMUM_REPUTATION","Memo","onRevealMemo","e","preventDefault","setState","revealMemo","shouldComponentUpdate","state","memo_private","text","memo","decode","console","error","decodeMemo","props","myAccount","fromAccount","fromNegativeRepUser","isEncoded","test","isFromBadActor","BadActorList","indexOf","length","classes","renderText","React","Component","propTypes","PropTypes","string","username","bool","object","isRequired","ownProps","currentUser","user","get","getIn","global"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AAEA,IAAMA,qBAAqB,EAA3B;;IAEaC,I,WAAAA,I;;;AAWT,oBAAc;AAAA;;AAAA;;AAAA,cAiBdC,YAjBc,GAiBC,aAAK;AAChBC,cAAEC,cAAF;AACA,kBAAKC,QAAL,CAAc,EAAEC,YAAY,IAAd,EAAd;AACH,SApBa;;AAEV,cAAKC,qBAAL,GAA6B,4CAA4B,MAA5B,CAA7B;AACA,cAAKC,KAAL,GAAa;AACTF,wBAAY;AADH,SAAb;AAHU;AAMb;;;;mCAEUG,Y,EAAcC,I,EAAM;AAC3B,gBAAI;AACA,uBAAOC,cAAKC,MAAL,CAAYH,YAAZ,EAA0BC,IAA1B,CAAP;AACH,aAFD,CAEE,OAAOP,CAAP,EAAU;AACRU,wBAAQC,KAAR,CAAc,uBAAd,EAAuCJ,IAAvC,EAA6CP,CAA7C;AACA,uBAAO,cAAP;AACH;AACJ;;;iCAOQ;AAAA,gBACGY,UADH,GACkB,IADlB,CACGA,UADH;AAAA,yBAQD,KAAKC,KARJ;AAAA,gBAGDP,YAHC,UAGDA,YAHC;AAAA,gBAIDC,IAJC,UAIDA,IAJC;AAAA,gBAKDO,SALC,UAKDA,SALC;AAAA,gBAMDC,WANC,UAMDA,WANC;AAAA,gBAODC,mBAPC,UAODA,mBAPC;;AASL,gBAAMC,YAAY,KAAKC,IAAL,CAAUX,IAAV,CAAlB;;AAEA,gBAAMY,iBAAiBC,uBAAaC,OAAb,CAAqBN,WAArB,IAAoC,CAAC,CAA5D;;AAEA,gBAAI,CAACR,IAAD,IAASA,KAAKe,MAAL,GAAc,CAA3B,EAA8B,OAAO,2CAAP;;AAE9B,gBAAMC,UAAU,0BAAW;AACvBzB,sBAAM,IADiB;AAEvB,kCAAkBqB,cAFK;AAGvB,6CAA6BH,mBAHN;AAIvB,iCAAiBV;AAJM,aAAX,CAAhB;;AAOA,gBAAIkB,aAAa,EAAjB;;AAEA,gBAAI,CAACP,SAAL,EAAgB;AACZO,6BAAajB,IAAb;AACH,aAFD,MAEO,IAAID,YAAJ,EAAkB;AACrBkB,6BAAaV,YACPF,WAAWN,YAAX,EAAyBC,IAAzB,CADO,GAEP,2BAAG,qBAAH,CAFN;AAGH;;AAED,gBAAIY,kBAAkB,CAAC,KAAKd,KAAL,CAAWF,UAAlC,EAA8C;AAC1CqB,6BACI;AAAA;AAAA,sBAAK,WAAU,mBAAf;AACI;AAAA;AAAA,0BAAK,WAAU,mBAAf;AACK,mDAAG,0CAAH;AADL,qBADJ;AAII;AAAA;AAAA,0BAAK,WAAU,qBAAf;AACK,mDAAG,4CAAH;AADL,qBAJJ;AAOI;AAAA;AAAA;AACI,uCAAU,2BADd;AAEI,kCAAK,QAFT;AAGI,qCAAS,KAAKzB;AAHlB;AAKK,mDAAG,8CAAH;AALL;AAPJ,iBADJ;AAiBH,aAlBD,MAkBO,IAAIiB,uBAAuB,CAAC,KAAKX,KAAL,CAAWF,UAAvC,EAAmD;AACtDqB,6BACI;AAAA;AAAA,sBAAK,WAAU,gCAAf;AACI;AAAA;AAAA,0BAAK,WAAU,gCAAf;AACK,mDACG,uDADH;AADL,qBADJ;AAMI;AAAA;AAAA,0BAAK,WAAU,kCAAf;AACK,mDACG,yDADH;AADL,qBANJ;AAWI;AAAA;AAAA;AACI,uCAAU,wCADd;AAEI,kCAAK,QAFT;AAGI,qCAAS,KAAKzB;AAHlB;AAKK,mDACG,2DADH;AALL;AAXJ,iBADJ;AAuBH;;AAED,mBAAO;AAAA;AAAA,kBAAM,WAAWwB,OAAjB;AAA2BC;AAA3B,aAAP;AACH;;;EA9GqBC,gBAAMC,S,UACrBC,S,GAAY;AACfpB,UAAMqB,oBAAUC,MADD;AAEfC,cAAUF,oBAAUC,MAFL;AAGfd,iBAAaa,oBAAUC,MAHR;AAIf;AACAf,eAAWc,oBAAUG,IALN;AAMfzB,kBAAcsB,oBAAUI,MANT;AAOfhB,yBAAqBY,oBAAUG,IAAV,CAAeE;AAPrB,C;kBAgHR,yBAAQ,UAAC5B,KAAD,EAAQ6B,QAAR,EAAqB;AACxC,QAAMC,cAAc9B,MAAM+B,IAAN,CAAWC,GAAX,CAAe,SAAf,CAApB;AACA,QAAMvB,YACFqB,eAAeD,SAASJ,QAAT,KAAsBK,YAAYE,GAAZ,CAAgB,UAAhB,CADzC;AAEA,QAAM/B,eACFQ,aAAaqB,WAAb,GACMA,YAAYG,KAAZ,CAAkB,CAAC,cAAD,EAAiB,cAAjB,CAAlB,CADN,GAEM,IAHV;AAIA,QAAMtB,sBACF,oCACIX,MAAMkC,MAAN,CAAaD,KAAb,CAAmB,CAAC,UAAD,EAAaJ,SAASnB,WAAtB,EAAmC,YAAnC,CAAnB,CADJ,IAEIlB,kBAHR;AAIA,sCAAYqC,QAAZ,IAAsB5B,0BAAtB,EAAoCQ,oBAApC,EAA+CE,wCAA/C;AACH,CAbc,EAaZlB,IAbY,C","file":"index.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport shouldComponentUpdate from 'app/utils/shouldComponentUpdate';\nimport tt from 'counterpart';\nimport classnames from 'classnames';\nimport { memo } from '@steemit/steem-js';\nimport BadActorList from 'app/utils/BadActorList';\nimport { repLog10 } from 'app/utils/ParsersAndFormatters';\n\nconst MINIMUM_REPUTATION = 15;\n\nexport class Memo extends React.Component {\n    static propTypes = {\n        text: PropTypes.string,\n        username: PropTypes.string,\n        fromAccount: PropTypes.string,\n        // redux props\n        myAccount: PropTypes.bool,\n        memo_private: PropTypes.object,\n        fromNegativeRepUser: PropTypes.bool.isRequired,\n    };\n\n    constructor() {\n        super();\n        this.shouldComponentUpdate = shouldComponentUpdate(this, 'Memo');\n        this.state = {\n            revealMemo: false,\n        };\n    }\n\n    decodeMemo(memo_private, text) {\n        try {\n            return memo.decode(memo_private, text);\n        } catch (e) {\n            console.error('memo decryption error', text, e);\n            return 'Invalid memo';\n        }\n    }\n\n    onRevealMemo = e => {\n        e.preventDefault();\n        this.setState({ revealMemo: true });\n    };\n\n    render() {\n        const { decodeMemo } = this;\n        const {\n            memo_private,\n            text,\n            myAccount,\n            fromAccount,\n            fromNegativeRepUser,\n        } = this.props;\n        const isEncoded = /^#/.test(text);\n\n        const isFromBadActor = BadActorList.indexOf(fromAccount) > -1;\n\n        if (!text || text.length < 1) return <span />;\n\n        const classes = classnames({\n            Memo: true,\n            'Memo--badActor': isFromBadActor,\n            'Memo--fromNegativeRepUser': fromNegativeRepUser,\n            'Memo--private': memo_private,\n        });\n\n        let renderText = '';\n\n        if (!isEncoded) {\n            renderText = text;\n        } else if (memo_private) {\n            renderText = myAccount\n                ? decodeMemo(memo_private, text)\n                : tt('g.login_to_see_memo');\n        }\n\n        if (isFromBadActor && !this.state.revealMemo) {\n            renderText = (\n                <div className=\"bad-actor-warning\">\n                    <div className=\"bad-actor-caution\">\n                        {tt('transferhistoryrow_jsx.bad_actor_caution')}\n                    </div>\n                    <div className=\"bad-actor-explained\">\n                        {tt('transferhistoryrow_jsx.bad_actor_explained')}\n                    </div>\n                    <div\n                        className=\"ptc bad-actor-reveal-memo\"\n                        role=\"button\"\n                        onClick={this.onRevealMemo}\n                    >\n                        {tt('transferhistoryrow_jsx.bad_actor_reveal_memo')}\n                    </div>\n                </div>\n            );\n        } else if (fromNegativeRepUser && !this.state.revealMemo) {\n            renderText = (\n                <div className=\"from-negative-rep-user-warning\">\n                    <div className=\"from-negative-rep-user-caution\">\n                        {tt(\n                            'transferhistoryrow_jsx.from_negative_rep_user_caution'\n                        )}\n                    </div>\n                    <div className=\"from-negative-rep-user-explained\">\n                        {tt(\n                            'transferhistoryrow_jsx.from_negative_rep_user_explained'\n                        )}\n                    </div>\n                    <div\n                        className=\"ptc from-negative-rep-user-reveal-memo\"\n                        role=\"button\"\n                        onClick={this.onRevealMemo}\n                    >\n                        {tt(\n                            'transferhistoryrow_jsx.from_negative_rep_user_reveal_memo'\n                        )}\n                    </div>\n                </div>\n            );\n        }\n\n        return <span className={classes}>{renderText}</span>;\n    }\n}\n\nexport default connect((state, ownProps) => {\n    const currentUser = state.user.get('current');\n    const myAccount =\n        currentUser && ownProps.username === currentUser.get('username');\n    const memo_private =\n        myAccount && currentUser\n            ? currentUser.getIn(['private_keys', 'memo_private'])\n            : null;\n    const fromNegativeRepUser =\n        repLog10(\n            state.global.getIn(['accounts', ownProps.fromAccount, 'reputation'])\n        ) < MINIMUM_REPUTATION;\n    return { ...ownProps, memo_private, myAccount, fromNegativeRepUser };\n})(Memo);\n"]}