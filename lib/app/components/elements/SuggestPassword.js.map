{"version":3,"sources":["../../../../src/app/components/elements/SuggestPassword.jsx"],"names":["globalActions","bool","PropTypes","steemitCannotRecoverPasswords","SuggestPassword","shouldComponentUpdate","props","suggestedPassword","createSuggestedPassword","print","printed","window","render","APP_ICON","APP_NAME","openPP","React","Component","propTypes","el","yourDOCTYPE","printPreview","open","printDocument","document","write","close","state","ownProps","global","get","PASSWORD_LENGTH","private_key","key_utils","get_random_key","toWif","substring","dispatch","set","key","value"],"mappings":"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","file":"SuggestPassword.js","sourcesContent":["/* eslint react/prop-types: 0 */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { renderToString } from 'react-dom/server';\nimport * as globalActions from 'app/redux/GlobalReducer';\nimport shouldComponentUpdate from 'app/utils/shouldComponentUpdate';\nimport Icon from 'app/components/elements/Icon';\nimport tt from 'counterpart';\nimport { APP_NAME, APP_ICON } from 'app/client_config';\nimport { key_utils } from '@steemit/steem-js/lib/auth/ecc';\n\nconst { bool } = PropTypes;\nexport const steemitCannotRecoverPasswords = tt(\n    'suggestpassword_jsx.APP_NAME_cannot_recover_passwords_keep_this_page_in_a_secure_location'\n);\n\nclass SuggestPassword extends React.Component {\n    static propTypes = {\n        print: bool,\n    };\n    componentWillMount() {\n        const { suggestedPassword, createSuggestedPassword } = this.props;\n        if (!suggestedPassword) createSuggestedPassword();\n    }\n    shouldComponentUpdate = shouldComponentUpdate(this, 'SuggestPassword');\n    componentDidUpdate() {\n        const { print } = this.props;\n        if (print && !this.printed) {\n            this.printed = true;\n            window.print();\n        }\n    }\n    render() {\n        const { suggestedPassword } = this.props;\n        const render = print => (\n            <span className=\"SuggestPassword\">\n                <Icon name={APP_ICON} size=\"2x\" /> {APP_NAME}\n                <hr />\n                <div>\n                    <h5>\n                        {print\n                            ? tt(\n                                  'suggestpassword_jsx.APP_NAME_password_backup',\n                                  { APP_NAME }\n                              )\n                            : tt(\n                                  'suggestpassword_jsx.APP_NAME_password_backup_required',\n                                  { APP_NAME }\n                              )}\n                    </h5>\n                    {steemitCannotRecoverPasswords}\n                </div>\n                <br />\n                <div>\n                    {print && (\n                        <div>\n                            <label>{tt('g.username')}</label>\n                            <div>\n                                <code>\n                                    <u>\n                                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                                    </u>\n                                </code>\n                            </div>\n                        </div>\n                    )}\n                    {!print && (\n                        <div>\n                            {tt(\n                                'suggestpassword_jsx.after_printing_write_down_your_user_name'\n                            )}.\n                        </div>\n                    )}\n                </div>\n                <br />\n                <div>\n                    {!print && (\n                        <a onClick={() => openPP(render(true))}>\n                            <Icon name=\"printer\" size=\"3x\" />&nbsp;{tt(\n                                'g.print'\n                            )}&nbsp;&nbsp;\n                            <br />\n                            <br />\n                        </a>\n                    )}\n                    <label>{tt('g.password')}</label>\n                    <div className=\"overflow-ellipsis\">\n                        <code>{suggestedPassword}</code>\n                    </div>\n                </div>\n            </span>\n        );\n        return render();\n    }\n    // <p>\n    //     <label>Password (again)</label>\n    //     {print && <br />}\n    //     {suggestedPassword && <QRCode text={suggestedPassword} />}\n    // </p>\n}\nfunction openPP(el) {\n    const yourDOCTYPE = '<!DOCTYPE html>';\n    const printPreview = window.open(\n        'about:blank',\n        'print_preview',\n        'resizable=yes,scrollbars=yes,status=yes'\n    );\n    const printDocument = printPreview.document;\n    printDocument.open();\n    printDocument.write(`\n        ${yourDOCTYPE}\n        <html>\n            ${renderToString(el)}\n            <script>window.print()</script>\n        </html>`);\n    printDocument.close();\n}\nexport default connect(\n    // mapStateToProps\n    (state, ownProps) => {\n        return {\n            ...ownProps,\n            suggestedPassword: state.global.get('suggestedPassword'),\n        };\n    },\n    // mapDispatchToProps\n    dispatch => ({\n        createSuggestedPassword: () => {\n            const PASSWORD_LENGTH = 32;\n            const private_key = key_utils.get_random_key();\n            const suggestedPassword = private_key\n                .toWif()\n                .substring(3, 3 + PASSWORD_LENGTH);\n            dispatch(\n                globalActions.set({\n                    key: 'suggestedPassword',\n                    value: suggestedPassword,\n                })\n            );\n        },\n    })\n)(SuggestPassword);\n"]}