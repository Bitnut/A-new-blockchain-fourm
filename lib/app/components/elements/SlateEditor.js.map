{"version":3,"sources":["../../../../src/app/components/elements/SlateEditor.jsx"],"names":["serializer","Html","rules","HtmlRules","serializeHtml","serialize","state","render","map","ReactDOMServer","renderToStaticMarkup","el","join","deserializeHtml","deserialize","html","getDemoState","Raw","demoState","terse","DEFAULT_NODE","plugins","process","env","BROWSER","InsertImages","require","default","push","extensions","applyTransform","transform","file","insertInline","type","isVoid","data","kind","nodes","text","ranges","SlateEditor","props","initialState","React","Component","reset","setState","componentDidMount","updateMenu","updateSidebar","componentDidUpdate","onChange","onMenuOpen","menu","portal","firstChild","onSidebarOpen","sidebar","hasMark","isExpanded","marks","some","mark","hasBlock","document","blocks","node","getClosest","parent","hasInline","inlines","inline","onClickMark","e","preventDefault","toggleMark","apply","onClickBlock","isActive","isList","setBlock","unwrapBlock","isType","block","wrapBlock","onClickLink","hasLinks","unwrapInline","href","window","prompt","wrapInline","collapseToEnd","insertText","extendBackward","length","onKeyDown","isMod","onModKeyDown","key","onSpace","onBackspace","isShift","onShiftEnter","onEnter","selection","startText","startBlock","startOffset","chars","slice","extendToStartOf","delete","endOffset","splitBlock","onPaste","console","log","insertFragment","renderSidebar","isOpen","isFocused","renderAddBlockButton","label","handler","onClickInsertImage","onClickInsertVideo","onClickInsertHr","src","focus","collapseToEndOfNextBlock","insertBlock","onMouseDown","renderMenu","schema","toolbarMarks","renderMarkButton","renderInlineButton","renderBlockButton","renderEditor","placeholder","rect","isBlurred","removeAttribute","style","top","scrollY","left","scrollX","offsetWidth","isCollapsed","offsetHeight","width"],"mappings":"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","file":"SlateEditor.js","sourcesContent":["import React from 'react';\nimport Slate, { Editor, Mark, Raw, Html } from 'slate';\nimport Portal from 'react-portal';\nimport position from 'selection-position';\nimport Icon from 'app/components/elements/Icon';\nimport ReactDOMServer from 'react-dom/server';\n\nimport { getCollapsedClientRect } from 'app/utils/SlateEditor/Helpers';\nimport demoState from 'app/utils/SlateEditor/DemoState';\nimport {\n    HtmlRules,\n    schema,\n    getMarkdownType,\n} from 'app/utils/SlateEditor/Schema';\n\nconst serializer = new Html({ rules: HtmlRules });\nexport const serializeHtml = state =>\n    serializer\n        .serialize(state, { render: false })\n        .map(el => ReactDOMServer.renderToStaticMarkup(el))\n        .join('\\n');\nexport const deserializeHtml = html => serializer.deserialize(html);\nexport const getDemoState = () => Raw.deserialize(demoState, { terse: true });\n\nconst DEFAULT_NODE = 'paragraph';\n\nlet plugins = [];\n\nimport InsertBlockOnEnter from 'slate-insert-block-on-enter';\nimport TrailingBlock from 'slate-trailing-block';\n\nif (process.env.BROWSER) {\n    //import InsertImages from 'slate-drop-or-paste-images'\n    const InsertImages = require('slate-drop-or-paste-images').default;\n\n    plugins.push(\n        InsertImages({\n            extensions: ['jpeg', 'png', 'gif'],\n            applyTransform: (transform, file) => {\n                return transform.insertInline({\n                    type: 'image',\n                    isVoid: true,\n                    data: { file },\n                });\n            },\n        })\n    );\n\n    plugins.push(\n        InsertBlockOnEnter({\n            kind: 'block',\n            type: DEFAULT_NODE,\n            nodes: [{ kind: 'text', text: '', ranges: [] }],\n        })\n    );\n    plugins.push(TrailingBlock({ type: DEFAULT_NODE }));\n}\n\nexport default class SlateEditor extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { state: props.initialState };\n    }\n\n    reset = () => {\n        this.setState({ state: this.props.initialState });\n    };\n\n    componentDidMount = () => {\n        this.updateMenu();\n        this.updateSidebar();\n    };\n\n    componentDidUpdate = () => {\n        this.updateMenu();\n        this.updateSidebar();\n    };\n\n    onChange = state => {\n        //this.setState({ state })\n        this.props.onChange(state);\n    };\n\n    // When the portal opens, cache the menu element.\n    onMenuOpen = portal => {\n        this.setState({ menu: portal.firstChild });\n    };\n\n    // When the portal opens, cache the menu element.\n    onSidebarOpen = portal => {\n        this.setState({ sidebar: portal.firstChild });\n    };\n\n    // Check if the current selection has a mark with `type` in it.\n    hasMark = type => {\n        const { state } = this.state;\n        if (!state.isExpanded) return;\n        return state.marks.some(mark => mark.type == type);\n    };\n\n    // Check if the current selection has a block with `type` in it.\n    hasBlock = type => {\n        const { state } = this.state;\n        const { document } = state;\n        return state.blocks.some(\n            node =>\n                node.type == type ||\n                !!document.getClosest(node, parent => parent.type == type)\n        );\n    };\n\n    // Check if the current selection has an inline of `type`.\n    hasInline = type => {\n        const { state } = this.state;\n        return state.inlines.some(inline => inline.type == type);\n    };\n\n    // When a mark button is clicked, toggle the current mark.\n    onClickMark = (e, type) => {\n        e.preventDefault();\n        let { state } = this.state;\n\n        state = state\n            .transform()\n            .toggleMark(type)\n            .apply();\n\n        this.setState({ state });\n    };\n\n    // Toggle block type\n    onClickBlock = (e, type) => {\n        e.preventDefault();\n        let { state } = this.state;\n        let transform = state.transform();\n        const { document } = state;\n\n        // Handle everything but list buttons.\n        if (type != 'bulleted-list' && type != 'numbered-list') {\n            const isActive = this.hasBlock(type);\n            const isList = this.hasBlock('list-item');\n\n            if (isList) {\n                transform = transform\n                    .setBlock(isActive ? DEFAULT_NODE : type)\n                    .unwrapBlock('bulleted-list')\n                    .unwrapBlock('numbered-list');\n            } else {\n                transform = transform.setBlock(isActive ? DEFAULT_NODE : type);\n            }\n        } else {\n            // Handle the extra wrapping required for list buttons.\n            const isList = this.hasBlock('list-item');\n            const isType = state.blocks.some(block => {\n                return !!document.getClosest(\n                    block,\n                    parent => parent.type == type\n                );\n            });\n\n            if (isList && isType) {\n                transform = transform\n                    .setBlock(DEFAULT_NODE)\n                    .unwrapBlock('bulleted-list')\n                    .unwrapBlock('numbered-list');\n            } else if (isList) {\n                transform = transform\n                    .unwrapBlock(\n                        type == 'bulleted-list'\n                            ? 'numbered-list'\n                            : 'bulleted-list'\n                    )\n                    .wrapBlock(type);\n            } else {\n                transform = transform.setBlock('list-item').wrapBlock(type);\n            }\n        }\n\n        state = transform.apply();\n        this.setState({ state });\n    };\n\n    onClickLink = e => {\n        e.preventDefault();\n        let { state } = this.state;\n        const hasLinks = this.hasInline('link');\n\n        if (hasLinks) {\n            state = state\n                .transform()\n                .unwrapInline('link')\n                .apply();\n        } else if (state.isExpanded) {\n            const href = window.prompt(\n                'Enter the URL of the link:',\n                'http://steemit.com'\n            );\n            if (href) {\n                state = state\n                    .transform()\n                    .wrapInline({\n                        type: 'link',\n                        data: { href },\n                    })\n                    .collapseToEnd()\n                    .apply();\n            }\n        } else {\n            const href = window.prompt('Enter the URL of the link:');\n            const text = window.prompt('Enter the text for the link:');\n            state = state\n                .transform()\n                .insertText(text)\n                .extendBackward(text.length)\n                .wrapInline({\n                    type: 'link',\n                    data: { href },\n                })\n                .collapseToEnd()\n                .apply();\n        }\n        this.setState({ state });\n    };\n\n    // Markdown-style quick formatting\n    onKeyDown = (e, data, state) => {\n        if (data.isMod) return this.onModKeyDown(e, data, state);\n        switch (data.key) {\n            case 'space':\n                return this.onSpace(e, state);\n            case 'backspace':\n                return this.onBackspace(e, state);\n            case 'enter':\n                return data.isShift\n                    ? this.onShiftEnter(e, state)\n                    : this.onEnter(e, state);\n        }\n    };\n\n    onModKeyDown = (e, data, state) => {\n        let mark;\n        switch (data.key) {\n            case 'b':\n                mark = 'bold';\n                break;\n            case 'i':\n                mark = 'italic';\n                break;\n            case 'u':\n                mark = 'underline';\n                break;\n            case 'k':\n                return this.onClickLink(e);\n        }\n\n        if (!mark) return;\n\n        state = state\n            .transform()\n            .toggleMark(mark)\n            .apply();\n\n        e.preventDefault();\n        return state;\n    };\n\n    // If space was entered, check if it was a markdown sequence\n    onSpace = (e, state) => {\n        if (state.isExpanded) return;\n        let { selection } = state;\n        const { startText, startBlock, startOffset } = state;\n        const chars = startBlock.text.slice(0, startOffset); //.replace(/\\s*/g, '')\n        const type = getMarkdownType(chars);\n\n        if (!type) return;\n        if (type == 'list-item' && startBlock.type == 'list-item') return;\n        e.preventDefault();\n\n        let transform = state.transform().setBlock(type);\n\n        if (type == 'list-item' && chars != '1.')\n            transform = transform.wrapBlock('bulleted-list');\n        if (type == 'list-item' && chars == '1.')\n            transform = transform.wrapBlock('numbered-list');\n\n        state = transform\n            .extendToStartOf(startBlock)\n            .delete()\n            .apply();\n\n        return state;\n    };\n\n    // On backspace, if at the start of a non-paragraph, convert it back into a paragraph node.\n    onBackspace = (e, state) => {\n        if (state.isExpanded) return;\n        if (state.startOffset != 0) return;\n        const { startBlock } = state;\n\n        if (startBlock.type == 'paragraph') return;\n        e.preventDefault();\n\n        let transform = state.transform().setBlock('paragraph');\n\n        if (startBlock.type == 'list-item')\n            transform = transform\n                .unwrapBlock('bulleted-list')\n                .unwrapBlock('numbered-list');\n\n        state = transform.apply();\n        return state;\n    };\n\n    onShiftEnter = (e, state) => {\n        if (state.isExpanded) return;\n        const { startBlock, startOffset, endOffset } = state;\n\n        // Allow soft returns for certain block types\n        if (\n            startBlock.type == 'paragraph' ||\n            startBlock.type == 'code-block' ||\n            startBlock.type == 'block-quote'\n        ) {\n            let transform = state.transform();\n            if (state.isExpanded) transform = transform.delete();\n            transform = transform.insertText('\\n');\n            return transform.apply();\n        }\n    };\n\n    onEnter = (e, state) => {\n        if (state.isExpanded) return;\n        const { startBlock, startOffset, endOffset } = state;\n\n        // On return, if at the end of a node type that should not be extended, create a new paragraph below it.\n        if (startOffset == 0 && startBlock.length == 0)\n            return this.onBackspace(e, state); //empty block\n        if (endOffset != startBlock.length) return; //not at end of block\n\n        if (\n            startBlock.type != 'heading-one' &&\n            startBlock.type != 'heading-two' &&\n            startBlock.type != 'heading-three' &&\n            startBlock.type != 'heading-four' &&\n            startBlock.type != 'block-quote' &&\n            startBlock.type != 'code-block'\n        )\n            return;\n\n        e.preventDefault();\n        return state\n            .transform()\n            .splitBlock()\n            .setBlock('paragraph')\n            .apply();\n    };\n\n    onPaste = (e, data, state) => {\n        console.log('** onPaste:', data.type, data.html);\n        if (data.type != 'html') return;\n        const { document } = serializer.deserialize(data.html);\n\n        return state\n            .transform()\n            .insertFragment(document)\n            .apply();\n    };\n\n    renderSidebar = () => {\n        const { state } = this.state;\n        const isOpen = state.isExpanded && state.isFocused;\n        return (\n            <Portal isOpened onOpen={this.onSidebarOpen}>\n                <div className=\"SlateEditor__sidebar\">\n                    {this.renderAddBlockButton({\n                        type: 'image',\n                        label: <Icon name=\"photo\" />,\n                        handler: this.onClickInsertImage,\n                    })}\n                    {this.renderAddBlockButton({\n                        type: 'video',\n                        label: <Icon name=\"video\" />,\n                        handler: this.onClickInsertVideo,\n                    })}\n                    {this.renderAddBlockButton({\n                        type: 'hrule',\n                        label: <Icon name=\"line\" />,\n                        handler: this.onClickInsertHr,\n                    })}\n                </div>\n            </Portal>\n        );\n    };\n\n    onClickInsertImage = e => {\n        e.preventDefault();\n        let { state } = this.state;\n\n        const src = window.prompt('Enter the URL of the image:', '');\n        if (!src) return;\n\n        state = state\n            .transform()\n            .insertInline({ type: 'image', isVoid: true, data: { src } })\n            //.insertBlock({type: 'paragraph', isVoid: false, nodes: [Slate.Text.create()]})\n            .focus()\n            .collapseToEndOfNextBlock()\n            .apply();\n\n        this.setState({ state });\n    };\n\n    onClickInsertVideo = (e, type) => {\n        e.preventDefault();\n        let { state } = this.state;\n\n        state = state\n            .transform()\n            .insertBlock({ type: 'embed', isVoid: true, data: { src: '' } })\n            //.insertBlock({type: 'paragraph', isVoid: false})\n            .apply();\n\n        this.setState({ state });\n    };\n\n    onClickInsertHr = (e, type) => {\n        e.preventDefault();\n        let { state } = this.state;\n\n        state = state\n            .transform()\n            .insertBlock({ type: 'hr', isVoid: true })\n            .insertBlock({ type: 'paragraph', isVoid: false })\n            .apply();\n\n        this.setState({ state });\n    };\n\n    renderAddBlockButton = props => {\n        const { type, label, handler } = props;\n        const onMouseDown = e => handler(e);\n\n        return (\n            <span\n                key={type}\n                className=\"SlateEditor__sidebar-button\"\n                onMouseDown={onMouseDown}\n            >\n                {label}\n            </span>\n        );\n    };\n\n    renderMenu = () => {\n        const { state } = this.state;\n        const isOpen = state.isExpanded && state.isFocused;\n\n        return (\n            <Portal isOpened onOpen={this.onMenuOpen}>\n                <div className=\"SlateEditor__menu SlateEditor__menu\">\n                    {schema.toolbarMarks.map(this.renderMarkButton)}\n                    {this.renderInlineButton({\n                        type: 'link',\n                        label: <Icon name=\"link\" />,\n                    })}\n                    {this.renderBlockButton({\n                        type: 'block-quote',\n                        label: <span>&ldquo;</span>,\n                    })}\n                    {this.renderBlockButton({\n                        type: 'heading-one',\n                        label: 'H1',\n                    })}\n                    {this.renderBlockButton({\n                        type: 'heading-two',\n                        label: 'H2',\n                    })}\n                    {/*this.renderBlockButton({type: 'bulleted-list', label: 'ul'})*/}\n                    {/*this.renderBlockButton({type: 'numbered-list', label: 'ol'})*/}\n                    {this.renderBlockButton({\n                        type: 'code-block',\n                        label: '<>',\n                    })}\n                </div>\n            </Portal>\n        );\n    };\n\n    renderMarkButton = props => {\n        const { type, label } = props;\n        const isActive = this.hasMark(type);\n        const onMouseDown = e => this.onClickMark(e, type);\n\n        return (\n            <span\n                key={type}\n                className={\n                    'SlateEditor__menu-button SlateEditor__menu-button-' + type\n                }\n                onMouseDown={onMouseDown}\n                data-active={isActive}\n            >\n                <span>{label}</span>\n            </span>\n        );\n    };\n\n    renderBlockButton = props => {\n        const { type, label } = props;\n        const isActive = this.hasBlock(type);\n        const onMouseDown = e => this.onClickBlock(e, type);\n\n        return (\n            <span\n                key={type}\n                className={\n                    'SlateEditor__menu-button SlateEditor__menu-button-' + type\n                }\n                onMouseDown={onMouseDown}\n                data-active={isActive}\n            >\n                <span>{label}</span>\n            </span>\n        );\n    };\n\n    renderInlineButton = props => {\n        const { type, label } = props;\n        const isActive = this.hasInline(type);\n        const onMouseDown = e => this.onClickLink(e, type);\n\n        return (\n            <span\n                key={type}\n                className={\n                    'SlateEditor__menu-button SlateEditor__menu-button-' + type\n                }\n                onMouseDown={onMouseDown}\n                data-active={isActive}\n            >\n                <span>{label}</span>\n            </span>\n        );\n    };\n\n    renderEditor = () => {\n        return (\n            <div className=\"SlateEditor Markdown\">\n                <Editor\n                    schema={schema}\n                    placeholder={this.props.placeholder || 'Enter some text...'}\n                    plugins={plugins}\n                    state={this.state.state}\n                    onChange={this.onChange}\n                    onKeyDown={this.onKeyDown}\n                    onPaste={this.onPaste}\n                />\n            </div>\n        );\n    };\n\n    // move sidebar to float left of current blank paragraph\n    updateSidebar = () => {\n        const { sidebar, state } = this.state;\n        if (!sidebar) return;\n\n        const rect = getCollapsedClientRect();\n        if (state.isBlurred || state.isExpanded || !rect) {\n            sidebar.removeAttribute('style');\n            return;\n        }\n\n        sidebar.style.top = `${rect.top + window.scrollY}px`;\n        sidebar.style.left = `${rect.left +\n            window.scrollX -\n            sidebar.offsetWidth}px`;\n    };\n\n    // move menu to center above current selection\n    updateMenu = () => {\n        const { menu, state } = this.state;\n        if (!menu) return;\n\n        if (state.isBlurred || state.isCollapsed) {\n            menu.removeAttribute('style');\n            return;\n        }\n\n        const rect = position();\n        menu.style.top = `${rect.top + window.scrollY - menu.offsetHeight}px`;\n        menu.style.left = `${rect.left +\n            window.scrollX -\n            menu.offsetWidth / 2 +\n            rect.width / 2}px`;\n    };\n\n    render = () => {\n        const { state } = this.state;\n        return (\n            <div>\n                {this.renderMenu()}\n                {this.renderSidebar()}\n                {this.renderEditor()}\n            </div>\n        );\n    };\n}\n"]}