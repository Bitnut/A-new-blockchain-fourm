{"version":3,"sources":["../../../../src/app/components/elements/PasswordInput.jsx"],"names":["validatePassword","value","new_password","length","amount","PasswordInput","props","passwd","error","state","oldPassword","newPassword","confirmPassword","oldPasswordChange","bind","newPasswordChange","confirmPasswordChange","valid","inputNewPassword","inputConfirmPassword","res","validatePasswords","onChange","e","target","trim","setState","disabled","passwordLabel","React","Component","propTypes","PropTypes","bool","func","isRequired","string"],"mappings":"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","file":"PasswordInput.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport tt from 'counterpart';\n\nfunction validatePassword(value, new_password) {\n    if (!new_password) return '';\n    const length = 32;\n    return value && value.length < length\n        ? tt('g.password_must_be_characters_or_more', { amount: length })\n        : '';\n}\n\nexport default class PasswordInput extends React.Component {\n    static propTypes = {\n        inputNewPassword: PropTypes.bool,\n        inputConfirmPassword: PropTypes.bool,\n        disabled: PropTypes.bool,\n        onChange: PropTypes.func.isRequired,\n        passwordLabel: PropTypes.string.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        const passwd = { value: '', error: '' };\n        this.state = {\n            oldPassword: passwd,\n            newPassword: passwd,\n            confirmPassword: passwd,\n        };\n        this.oldPasswordChange = this.oldPasswordChange.bind(this);\n        this.newPasswordChange = this.newPasswordChange.bind(this);\n        this.confirmPasswordChange = this.confirmPasswordChange.bind(this);\n    }\n\n    validatePasswords(oldPassword, newPassword, confirmPassword) {\n        let valid = oldPassword.value.length > 0 && oldPassword.error === '';\n        if (this.props.inputNewPassword) {\n            valid =\n                valid &&\n                newPassword.value.length > 0 &&\n                newPassword.error === '';\n        }\n        if (this.props.inputConfirmPassword) {\n            valid = valid && confirmPassword.value === newPassword.value;\n        }\n        return valid;\n    }\n\n    onChange(value) {\n        let { oldPassword, newPassword, confirmPassword } = this.state;\n        if (value.oldPassword) oldPassword = value.oldPassword;\n        if (value.newPassword) newPassword = value.newPassword;\n        if (value.confirmPassword) confirmPassword = value.confirmPassword;\n        const res = {\n            oldPassword: oldPassword.value,\n            newPassword: newPassword.value,\n            confirmPassword: confirmPassword.value,\n        };\n        res.valid = this.validatePasswords(\n            oldPassword,\n            newPassword,\n            confirmPassword\n        );\n        this.props.onChange(res);\n    }\n\n    oldPasswordChange(e) {\n        const value = e.target.value.trim();\n        const error = validatePassword(value, false);\n        const res = { oldPassword: { value, error } };\n        this.setState(res);\n        this.onChange(res);\n    }\n\n    newPasswordChange(e) {\n        const value = e.target.value.trim();\n        const error = validatePassword(value, true);\n        const res = { newPassword: { value, error } };\n        if (value !== this.state.confirmPassword.value) {\n            res.confirmPassword = this.state.confirmPassword;\n            res.confirmPassword.error = tt('g.passwords_do_not_match');\n        }\n        this.setState(res);\n        this.onChange(res);\n    }\n\n    confirmPasswordChange(e) {\n        const value = e.target.value.trim();\n        let error = '';\n        if (value !== this.state.newPassword.value)\n            error = tt('g.passwords_do_not_match');\n        const res = { confirmPassword: { value, error } };\n        this.setState(res);\n        this.onChange(res);\n    }\n\n    render() {\n        const {\n            inputNewPassword,\n            inputConfirmPassword,\n            disabled,\n            passwordLabel,\n        } = this.props;\n        const { oldPassword, newPassword, confirmPassword } = this.state;\n        return (\n            <div className=\"PasswordInput\">\n                <div>\n                    <label>\n                        {passwordLabel}\n                        <input\n                            type=\"password\"\n                            name=\"oldPassword\"\n                            autoComplete=\"off\"\n                            onChange={this.oldPasswordChange}\n                            value={oldPassword.value}\n                            disabled={disabled}\n                        />\n                    </label>\n                    <div className=\"error\">{oldPassword.error}</div>\n                </div>\n                {inputNewPassword && (\n                    <div>\n                        <label>\n                            {tt('g.new_password')}\n                            <input\n                                type=\"password\"\n                                name=\"oldPassword\"\n                                autoComplete=\"off\"\n                                onChange={this.newPasswordChange}\n                                value={newPassword.value}\n                                disabled={disabled}\n                            />\n                        </label>\n                        <div className=\"error\">{newPassword.error}</div>\n                    </div>\n                )}\n                {inputNewPassword &&\n                    inputConfirmPassword && (\n                        <div>\n                            <label>\n                                {tt('g.confirm_password')}\n                                <input\n                                    type=\"password\"\n                                    name=\"confirmPassword\"\n                                    autoComplete=\"off\"\n                                    onChange={this.confirmPasswordChange}\n                                    value={confirmPassword.value}\n                                    disabled={disabled}\n                                />\n                            </label>\n                            <div className=\"error\">{confirmPassword.error}</div>\n                        </div>\n                    )}\n            </div>\n        );\n    }\n}\n"]}