{"version":3,"sources":["../../../../src/app/components/elements/ConvertToSteem.jsx"],"names":["transactionActions","appActions","ConvertToSteem","shouldComponentUpdate","dispatchSubmit","props","convert","owner","onClose","amount","fields","success","setState","loading","error","value","state","ReactDOM","findDOMNode","refs","amt","focus","handleSubmit","submitting","data","LIQUID_TOKEN","DEBT_TOKEN","link","touched","React","Component","form","ownProps","current","user","get","username","account","global","getIn","sbd_balance","max","split","validate","values","isNaN","parseFloat","toFixed","DEBT_TICKER","join","requestid","Math","floor","Date","now","conf","dispatch","broadcastOperation","type","operation","confirm","successCallback","addNotification","key","message","order","dismissAfter","errorCallback"],"mappings":"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","file":"ConvertToSteem.js","sourcesContent":["/* eslint react/prop-types: 0 */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { reduxForm } from 'redux-form'; // @deprecated, instead use: app/utils/ReactForm.js\nimport * as transactionActions from 'app/redux/TransactionReducer';\nimport * as appActions from 'app/redux/AppReducer';\nimport shouldComponentUpdate from 'app/utils/shouldComponentUpdate';\nimport TransactionError from 'app/components/elements/TransactionError';\nimport LoadingIndicator from 'app/components/elements/LoadingIndicator';\nimport { cleanReduxInput } from 'app/utils/ReduxForms';\nimport tt from 'counterpart';\nimport { DEBT_TOKEN, DEBT_TICKER, LIQUID_TOKEN } from 'app/client_config';\n\nclass ConvertToSteem extends React.Component {\n    constructor() {\n        super();\n        this.state = {};\n    }\n    componentDidMount() {\n        ReactDOM.findDOMNode(this.refs.amt).focus();\n    }\n    shouldComponentUpdate = shouldComponentUpdate(this, 'ConvertToSteem');\n    dispatchSubmit = () => {\n        const { convert, owner, onClose } = this.props;\n        const { amount } = this.props.fields;\n        const success = () => {\n            if (onClose) onClose();\n            this.setState({ loading: false });\n        };\n        const error = () => {\n            this.setState({ loading: false });\n        };\n        convert(owner, amount.value, success, error);\n        this.setState({ loading: true });\n    };\n    render() {\n        const { dispatchSubmit } = this;\n        const { onClose, handleSubmit, submitting } = this.props;\n        const { amount } = this.props.fields;\n        const { loading } = this.state;\n        return (\n            <form\n                onSubmit={handleSubmit(data => {\n                    dispatchSubmit(data);\n                })}\n            >\n                <div className=\"row\">\n                    <div className=\"small-12 columns\">\n                        <h1>\n                            {tt('converttosteem_jsx.convert_to_LIQUID_TOKEN', {\n                                LIQUID_TOKEN,\n                            })}\n                        </h1>\n                        <p>\n                            {tt(\n                                'converttosteem_jsx.DEBT_TOKEN_will_be_unavailable',\n                                { DEBT_TOKEN }\n                            )}\n                        </p>\n                        <p>\n                            {tt(\n                                'converttosteem_jsx.your_existing_DEBT_TOKEN_are_liquid_and_transferable',\n                                { link: tt('g.buy_or_sell'), DEBT_TOKEN }\n                            )}\n                        </p>\n                        <p>\n                            {tt(\n                                'converttosteem_jsx.this_is_a_price_feed_conversion'\n                            )}\n                        </p>\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"small-12 columns\">\n                        <label>{tt('g.amount')}</label>\n                        <input\n                            type=\"amount\"\n                            ref=\"amt\"\n                            {...cleanReduxInput(amount)}\n                            autoComplete=\"off\"\n                            disabled={loading}\n                        />\n                        &nbsp;\n                        {DEBT_TOKEN}\n                        <br />\n                        <div className=\"error\">\n                            {amount.touched && amount.error && amount.error}&nbsp;\n                        </div>\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"small-12 columns\">\n                        <TransactionError opType=\"convert\" />\n                        {loading && (\n                            <span>\n                                <LoadingIndicator type=\"circle\" />\n                            </span>\n                        )}\n                        <br />\n                        <div>\n                            <button\n                                type=\"submit\"\n                                className=\"button\"\n                                disabled={loading}\n                            >\n                                {tt('g.convert')}\n                            </button>\n                            <button\n                                type=\"button\"\n                                disabled={submitting}\n                                className=\"button hollow float-right\"\n                                onClick={onClose}\n                            >\n                                {tt('g.cancel')}\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </form>\n        );\n    }\n}\n\nexport default reduxForm(\n    { form: 'convertToSteem', fields: ['amount'] },\n    // mapStateToProps\n    (state, ownProps) => {\n        const current = state.user.get('current');\n        const username = current.get('username');\n        const account = state.global.getIn(['accounts', username]);\n        const sbd_balance = account.get('sbd_balance');\n        const max = sbd_balance.split(' ')[0];\n        const validate = values => ({\n            amount: !values.amount\n                ? tt('g.required')\n                : isNaN(values.amount) || parseFloat(values.amount) <= 0\n                  ? tt('g.invalid_amount')\n                  : parseFloat(values.amount) > parseFloat(max)\n                    ? tt('g.insufficient_balance')\n                    : null,\n        });\n        return {\n            ...ownProps,\n            validate,\n            owner: username,\n        };\n    },\n    // mapDispatchToProps\n    dispatch => ({\n        convert: (owner, amt, success, error) => {\n            const amount = [parseFloat(amt).toFixed(3), DEBT_TICKER].join(' ');\n            const requestid = Math.floor(Date.now() / 1000);\n            const conf = tt(\n                'postfull_jsx.in_week_convert_DEBT_TOKEN_to_LIQUID_TOKEN',\n                { amount: amount.split(' ')[0], DEBT_TOKEN, LIQUID_TOKEN }\n            );\n            dispatch(\n                transactionActions.broadcastOperation({\n                    type: 'convert',\n                    operation: { owner, requestid, amount },\n                    confirm: conf + '?',\n                    successCallback: () => {\n                        success();\n                        dispatch(\n                            appActions.addNotification({\n                                key: 'convert_sd_to_steem_' + Date.now(),\n                                message: tt('g.order_placed', { order: conf }),\n                                dismissAfter: 5000,\n                            })\n                        );\n                    },\n                    errorCallback: () => {\n                        error();\n                    },\n                })\n            );\n        },\n    })\n)(ConvertToSteem);\n"]}