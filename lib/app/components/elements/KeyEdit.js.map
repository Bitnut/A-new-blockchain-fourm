{"version":3,"sources":["../../../../src/app/components/elements/KeyEdit.js"],"names":["KeyEdit","state","onCancel","e","preventDefault","props","bind","onKeyChanged","oldAuth","data","setTimeout","refs","key","focus","nextProps","fields","password","confirm","isWif","PrivateKey","fromWif","value","onChange","setState","authType","accountChanged","handleSubmit","submitting","error","touched","Component","propTypes","PropTypes","string","isRequired","func","bool","shape","object","keyValidate","values","length","amount","PublicKey","fromString","form","validate","ownProps","private_keys","user","getIn","privateKey","find","d","toPublicKey","toString"],"mappings":"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","file":"KeyEdit.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport LoadingIndicator from 'app/components/elements/LoadingIndicator';\nimport { reduxForm } from 'redux-form'; // @deprecated, instead use: app/utils/ReactForm.js\nimport { cleanReduxInput } from 'app/utils/ReduxForms';\nimport tt from 'counterpart';\nimport { PrivateKey, PublicKey } from '@steemit/steem-js/lib/auth/ecc';\n\nclass KeyEdit extends Component {\n    static propTypes = {\n        // HTML\n        authType: PropTypes.string.isRequired,\n        onKeyChanged: PropTypes.func.isRequired,\n        onCancel: PropTypes.func,\n        accountChanged: PropTypes.bool.isRequired,\n\n        // Redux form\n        oldAuth: PropTypes.string.isRequired,\n        fields: PropTypes.shape({\n            password: PropTypes.object.isRequired,\n            confirm: PropTypes.object.isRequired,\n        }),\n        handleSubmit: PropTypes.func.isRequired,\n        submitting: PropTypes.bool.isRequired,\n        error: PropTypes.string,\n    };\n    constructor() {\n        super();\n        this.state = {};\n        this.onCancel = e => {\n            e.preventDefault();\n            if (this.props.onCancel) this.props.onCancel();\n        };\n        this.onCancel = this.onCancel.bind(this);\n\n        this.onKeyChanged = data => {\n            const { onKeyChanged, oldAuth } = this.props;\n            return onKeyChanged({ ...data, oldAuth });\n        };\n        this.onKeyChanged = this.onKeyChanged.bind(this);\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            this.refs.key.focus();\n        }, 300);\n    }\n    componentWillReceiveProps(nextProps) {\n        const { fields: { password, confirm } } = nextProps;\n        let isWif;\n        try {\n            PrivateKey.fromWif(password.value);\n            // A WIF has a checksum, it does not need a confirmation\n            if (confirm.value !== password.value)\n                confirm.onChange(password.value);\n            isWif = true;\n        } catch (e) {\n            isWif = false;\n        }\n        this.setState({ isWif });\n    }\n    render() {\n        const {\n            onCancel,\n            onKeyChanged, // see constructor\n            props: {\n                authType,\n                accountChanged,\n                handleSubmit,\n                submitting,\n                error,\n                fields: { password, confirm },\n            },\n            state: { isWif },\n        } = this;\n        return (\n            <form onSubmit={handleSubmit(data => onKeyChanged(data))}>\n                <div className=\"row\">\n                    <div\n                        className={\n                            'column small-12' +\n                            (password.touched && password.error ? ' error' : '')\n                        }\n                    >\n                        <label>Change “{authType}” Key (Password or WIF)</label>\n                        <input\n                            ref=\"key\"\n                            type=\"password\"\n                            {...cleanReduxInput(password)}\n                            placeholder=\"Password or WIF\"\n                            autoComplete=\"off\"\n                        />\n                        <span className=\"error\">\n                            {password.touched &&\n                                password.error &&\n                                password.error}&nbsp;\n                        </span>\n                    </div>\n                    <div\n                        className={\n                            'column small-12' +\n                            (confirm.touched && confirm.error ? ' error' : '')\n                        }\n                    >\n                        <label>{tt('g.confirm_password')}</label>\n                        <input\n                            ref=\"keyConfirm\"\n                            type=\"password\"\n                            {...cleanReduxInput(confirm)}\n                            disabled={isWif}\n                            placeholder=\"Confirm Password\"\n                            autoComplete=\"off\"\n                        />\n                        <div className=\"error\">\n                            {confirm.touched && confirm.error && confirm.error}&nbsp;\n                        </div>\n                    </div>\n                    <div className=\"column small-12\">\n                        {error && <div className=\"error\">{error}</div>}\n                        {submitting && <LoadingIndicator type=\"circle\" />}\n                        {accountChanged && (\n                            <span>\n                                <div className=\"success\">\n                                    {tt('g.account_updated')}\n                                </div>\n                                <br />\n                                <button\n                                    className=\"button\"\n                                    type=\"button\"\n                                    onClick={onCancel}\n                                >\n                                    {tt('g.close')}\n                                </button>\n                            </span>\n                        )}\n                        {!accountChanged && (\n                            <span>\n                                <button\n                                    className=\"button\"\n                                    type=\"submit\"\n                                    disabled={submitting}\n                                >\n                                    {tt('g.save')}\n                                </button>\n                                <button\n                                    className=\"button\"\n                                    type=\"button\"\n                                    disabled={submitting}\n                                    onClick={onCancel}\n                                >\n                                    {tt('g.cancel')}\n                                </button>\n                            </span>\n                        )}\n                    </div>\n                </div>\n            </form>\n        );\n    }\n}\n\nconst keyValidate = values => ({\n    password: !values.password\n        ? tt('g.required')\n        : values.password.length < 32\n          ? tt('g.password_must_be_characters_or_more', { amount: 32 })\n          : PublicKey.fromString(values.password)\n            ? tt('g.need_password_or_key')\n            : null,\n    confirm:\n        values.confirm !== values.password\n            ? tt('g.passwords_do_not_match')\n            : null,\n});\n\nexport default reduxForm(\n    //config\n    { form: 'KeyEdit', fields: ['password', 'confirm'], validate: keyValidate },\n    (state, ownProps) => {\n        const { oldAuth } = ownProps;\n        const private_keys = state.user.getIn(['current', 'private_keys']);\n        const privateKey =\n            private_keys &&\n            private_keys.find(d => d.toPublicKey().toString() === oldAuth);\n        return { ...ownProps, privateKey, oldAuth };\n    }\n)(KeyEdit);\n"]}