{"version":3,"sources":["../../../../src/app/components/elements/UserKeys.jsx"],"names":["globalActions","keyTypes","UserKeys","showChangePassword","props","accountName","shouldComponentUpdate","state","onKey","forEach","key","wif","pubkey","setState","nextProps","nextState","wifShown","setWifShown","hasWif","keyObj","account","isMyAccount","idx","wifQrs","map","paddingBottom","Posting","Active","Owner","Memo","Component","propTypes","PropTypes","object","isRequired","bool","func","string","ownProps","get","current","user","username","global","dispatch","receiveState","UserKeys_wifShown","shown","name","remove","showDialog","params"],"mappings":"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","file":"UserKeys.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport QRCode from 'react-qr';\nimport tt from 'counterpart';\nimport shouldComponentUpdate from 'app/utils/shouldComponentUpdate';\nimport Keys from 'app/components/elements/Keys';\nimport * as globalActions from 'app/redux/GlobalReducer';\n\nconst keyTypes = ['Posting', 'Active', 'Owner', 'Memo'];\n\nclass UserKeys extends Component {\n    static propTypes = {\n        // HTML\n        account: PropTypes.object.isRequired,\n        // Redux\n        isMyAccount: PropTypes.bool.isRequired,\n        wifShown: PropTypes.bool,\n        setWifShown: PropTypes.func.isRequired,\n        accountName: PropTypes.string.isRequired,\n        showChangePassword: PropTypes.func.isRequired,\n    };\n    constructor() {\n        super();\n        this.shouldComponentUpdate = shouldComponentUpdate(this, 'UserKeys');\n        this.state = {};\n        this.onKey = {};\n        keyTypes.forEach(key => {\n            this.onKey[key] = (wif, pubkey) => {\n                this.setState({ [key]: { wif, pubkey } });\n            };\n        });\n    }\n    componentWillUpdate(nextProps, nextState) {\n        const { wifShown, setWifShown } = nextProps;\n        let hasWif = false;\n        keyTypes.forEach(key => {\n            const keyObj = nextState[key];\n            if (keyObj && keyObj.wif) hasWif = true;\n        });\n        if (wifShown !== hasWif) setWifShown(hasWif);\n    }\n    showChangePassword = () => {\n        this.props.showChangePassword(this.props.accountName);\n    };\n    render() {\n        const { props: { account, isMyAccount } } = this;\n        const { onKey } = this;\n        let idx = 0;\n        const wifQrs = !isMyAccount\n            ? null\n            : keyTypes.map(key => {\n                  const keyObj = this.state[key];\n                  if (!keyObj) return null;\n                  return (\n                      <span key={idx++}>\n                          <hr />\n                          <div className=\"row\">\n                              <div className=\"column small-2\">\n                                  <label>{tt('userkeys_jsx.public')}</label>\n                                  <QRCode text={keyObj.pubkey} />\n                              </div>\n                              <div className=\"column small-8\">\n                                  <label>\n                                      {tt('userkeys_jsx.public_something_key', {\n                                          key,\n                                      })}\n                                  </label>\n                                  <div className=\"overflow-ellipsis\">\n                                      <code>\n                                          <small>{keyObj.pubkey}</small>\n                                      </code>\n                                  </div>\n                                  {keyObj.wif && (\n                                      <div>\n                                          <label>\n                                              {tt(\n                                                  'userkeys_jsx.private_something_key',\n                                                  { key }\n                                              )}\n                                          </label>\n                                          <div className=\"overflow-ellipsis\">\n                                              <code>\n                                                  <small>{keyObj.wif}</small>\n                                              </code>\n                                          </div>\n                                      </div>\n                                  )}\n                              </div>\n                              {keyObj.wif && (\n                                  <div className=\"column small-2\">\n                                      <label>\n                                          {tt('userkeys_jsx.private')}\n                                      </label>\n                                      <QRCode text={keyObj.wif} />\n                                  </div>\n                              )}\n                          </div>\n                      </span>\n                  );\n              });\n        return (\n            <div className=\"UserKeys row\">\n                <div style={{ paddingBottom: 10 }} className=\"column small-12\">\n                    <Keys\n                        account={account}\n                        authType=\"posting\"\n                        onKey={onKey.Posting}\n                    />\n                    <span className=\"secondary\">\n                        {tt(\n                            'userkeys_jsx.posting_key_is_required_it_should_be_different'\n                        )}\n                    </span>\n                </div>\n                <div style={{ paddingBottom: 10 }} className=\"column small-12\">\n                    <Keys\n                        account={account}\n                        authType=\"active\"\n                        onKey={onKey.Active}\n                    />\n                    <span className=\"secondary\">\n                        {tt(\n                            'userkeys_jsx.the_active_key_is_used_to_make_transfers_and_place_orders'\n                        )}\n                    </span>\n                </div>\n                <div style={{ paddingBottom: 10 }} className=\"column small-12\">\n                    <Keys\n                        account={account}\n                        authType=\"owner\"\n                        onKey={onKey.Owner}\n                    />\n                    <span className=\"secondary\">\n                        {tt(\n                            'userkeys_jsx.the_owner_key_is_required_to_change_other_keys'\n                        )}\n                        <br />\n                        {tt(\n                            'userkeys_jsx.the_private_key_or_password_should_be_kept_offline'\n                        )}\n                    </span>\n                </div>\n                <div style={{ paddingBottom: 10 }} className=\"column small-12\">\n                    <Keys\n                        account={account}\n                        authType=\"memo\"\n                        onKey={onKey.Memo}\n                    />\n                    <span className=\"secondary\">\n                        {tt(\n                            'userkeys_jsx.the_memo_key_is_used_to_create_and_read_memos'\n                        )}\n                    </span>\n                </div>\n                {/*\n            <div className=\"column small-12\">\n                {wifQrs && <span>\n                    {wifQrs}\n                </span>}\n            </div>*/}\n            </div>\n        );\n    }\n}\nexport default connect(\n    (state, ownProps) => {\n        const { account } = ownProps;\n        const accountName = account.get('name');\n        const current = state.user.get('current');\n        const username = current && current.get('username');\n        const isMyAccount = username === accountName;\n        const wifShown = state.global.get('UserKeys_wifShown');\n        return { ...ownProps, isMyAccount, wifShown, accountName };\n    },\n    dispatch => ({\n        setWifShown: shown => {\n            dispatch(globalActions.receiveState({ UserKeys_wifShown: shown }));\n        },\n        showChangePassword: username => {\n            const name = 'changePassword';\n            dispatch(globalActions.remove({ key: name }));\n            dispatch(globalActions.showDialog({ name, params: { username } }));\n        },\n    })\n)(UserKeys);\n"]}