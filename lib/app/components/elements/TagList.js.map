{"version":3,"sources":["../../../../src/app/components/elements/TagList.jsx"],"names":["post","horizontal","single","sort_order","process","env","BROWSER","window","last_sort_order","category","json","json_metadata","tags","JSON","parse","split","Array","isArray","e","unshift","list","map","tag","idx","length","value","link"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;AACA;;AACA;;;;;;kBAEe,gBAAkC;AAAA,QAA/BA,IAA+B,QAA/BA,IAA+B;AAAA,QAAzBC,UAAyB,QAAzBA,UAAyB;AAAA,QAAbC,MAAa,QAAbA,MAAa;;AAC7C,QAAIC,aAAa,UAAjB;AACA,QAAIC,QAAQC,GAAR,CAAYC,OAAZ,IAAuBC,OAAOC,eAAlC,EACIL,aAAaI,OAAOC,eAApB;;AAEJ,QAAIN,MAAJ,EACI,OACI;AAAC,yBAAD;AAAA,UAAM,UAAQC,UAAR,SAAsBH,KAAKS,QAAjC;AAA8CT,aAAKS;AAAnD,KADJ;;AAIJ,QAAMC,OAAOV,KAAKW,aAAlB;AACA,QAAIC,OAAO,EAAX;;AAEA,QAAI;AACA,YAAI,QAAOF,IAAP,uDAAOA,IAAP,MAAe,QAAnB,EAA6B;AACzBE,mBAAOF,KAAKE,IAAL,IAAa,EAApB;AACH,SAFD,MAEO;AACHA,mBAAQF,QAAQG,KAAKC,KAAL,CAAWJ,IAAX,EAAiBE,IAA1B,IAAmC,EAA1C;AACH;AACD,YAAI,OAAOA,IAAP,IAAe,QAAnB,EAA6BA,OAAOA,KAAKG,KAAL,CAAW,GAAX,CAAP;AAC7B,YAAI,CAACC,MAAMC,OAAN,CAAcL,IAAd,CAAL,EAA0B;AACtBA,mBAAO,EAAP;AACH;AACJ,KAVD,CAUE,OAAOM,CAAP,EAAU;AACRN,eAAO,EAAP;AACH;;AAED;AACAA,SAAKO,OAAL,CAAanB,KAAKS,QAAlB;;AAEAG,WAAO,gCAAWA,IAAX,CAAP;;AAEA,QAAIX,UAAJ,EAAgB;AACZ;AACA,YAAMmB,QAAOR,KAAKS,GAAL,CAAS,UAACC,GAAD,EAAMC,GAAN;AAAA,mBAClB;AAAC,iCAAD;AAAA,kBAAM,UAAQpB,UAAR,SAAsBmB,GAA5B,EAAmC,KAAKC,GAAxC;AACK,mBADL;AAEKD,mBAFL;AAEU;AAFV,aADkB;AAAA,SAAT,CAAb;AAMA,eAAO;AAAA;AAAA,cAAK,WAAU,qBAAf;AAAsCF;AAAtC,SAAP;AACH;AACD,QAAIR,KAAKY,MAAL,IAAe,CAAnB,EAAsB;AAClB,eAAO;AAAC,6BAAD;AAAA,cAAM,UAAQrB,UAAR,SAAsBS,KAAK,CAAL,CAA5B;AAAwCA,iBAAK,CAAL;AAAxC,SAAP;AACH;AACD,QAAMQ,OAAOR,KAAKS,GAAL,CAAS,eAAO;AACzB,eAAO,EAAEI,OAAOH,GAAT,EAAcI,YAAUvB,UAAV,SAAwBmB,GAAtC,EAAP;AACH,KAFY,CAAb;AAGA,WACI,8BAAC,sBAAD;AACI,kBAAU,MAAMV,KAAK,CAAL,CADpB;AAEI,mBAAU,SAFd;AAGI,eAAOQ,IAHX;AAII,YAAG;AAJP,MADJ;AAQH,C","file":"TagList.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router';\nimport { filterTags } from 'app/utils/StateFunctions';\nimport DropdownMenu from 'app/components/elements/DropdownMenu';\n\nexport default ({ post, horizontal, single }) => {\n    let sort_order = 'trending';\n    if (process.env.BROWSER && window.last_sort_order)\n        sort_order = window.last_sort_order;\n\n    if (single)\n        return (\n            <Link to={`/${sort_order}/${post.category}`}>{post.category}</Link>\n        );\n\n    const json = post.json_metadata;\n    let tags = [];\n\n    try {\n        if (typeof json == 'object') {\n            tags = json.tags || [];\n        } else {\n            tags = (json && JSON.parse(json).tags) || [];\n        }\n        if (typeof tags == 'string') tags = tags.split(' ');\n        if (!Array.isArray(tags)) {\n            tags = [];\n        }\n    } catch (e) {\n        tags = [];\n    }\n\n    // Category should always be first.\n    tags.unshift(post.category);\n\n    tags = filterTags(tags);\n\n    if (horizontal) {\n        // show it as a dropdown in Preview\n        const list = tags.map((tag, idx) => (\n            <Link to={`/${sort_order}/${tag}`} key={idx}>\n                {' '}\n                {tag}{' '}\n            </Link>\n        ));\n        return <div className=\"TagList__horizontal\">{list}</div>;\n    }\n    if (tags.length == 1) {\n        return <Link to={`/${sort_order}/${tags[0]}`}>{tags[0]}</Link>;\n    }\n    const list = tags.map(tag => {\n        return { value: tag, link: `/${sort_order}/${tag}` };\n    });\n    return (\n        <DropdownMenu\n            selected={' ' + tags[0]}\n            className=\"TagList\"\n            items={list}\n            el=\"div\"\n        />\n    );\n};\n"]}