{"version":3,"sources":["../../../../../src/app/components/elements/SortOrder/index.jsx"],"names":["SortOrder","topic","sortOrder","horizontal","pathname","tag","sort","makeRoute","value","handleChange","browserHistory","replace","sorts","label","link","map","i","propTypes","PropTypes","string","bool","defaultProps"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;AAEA;;;;;;AAEA,IAAMA,YAAY,SAAZA,SAAY,OAAgD;AAAA,QAA7CC,KAA6C,QAA7CA,KAA6C;AAAA,QAAtCC,SAAsC,QAAtCA,SAAsC;AAAA,QAA3BC,UAA2B,QAA3BA,UAA2B;AAAA,QAAfC,QAAe,QAAfA,QAAe;;AAC9D;;;;;;;AAOA,QAAIC,MAAMJ,KAAV;AACA,QAAIK,OAAOJ,SAAX;;AAEA,QAAID,UAAU,MAAd,EAAsB;AAClBI,cAAM,EAAN;AACAC,eAAO,SAAP;AACH;;AAED;AACA,QAAIF,aAAa,GAAjB,EAAsB;AAClBC,cAAM,EAAN;AACAC,eAAO,UAAP;AACH;;AAED,QAAMC,YAAY,SAAZA,SAAY,CAACF,GAAD,EAAMC,IAAN;AAAA,eACdD,YAAUC,KAAKE,KAAf,SAAwBH,GAAxB,SAAoCC,KAAKE,KAD3B;AAAA,KAAlB;;AAGA,QAAMC,eAAe,SAAfA,YAAe;AAAA,eAAO,gBAAQ;AAChCC,wCAAeC,OAAf,CAAuBJ,UAAUF,GAAV,EAAeC,IAAf,CAAvB;AACH,SAFoB;AAAA,KAArB;;AAIA,QAAMM,QAAQ,SAARA,KAAQ,MAAO;AACjB,eAAO,CACH;AACIJ,mBAAO,UADX;AAEIK,mBAAO,2BAAG,oBAAH,CAFX;AAGIC,iCAAmBT;AAHvB,SADG,EAMH;AACIG,mBAAO,SADX;AAEIK,mBAAO,2BAAG,OAAH,CAFX;AAGIC,gCAAkBT;AAHtB,SANG,EAWH;AACIG,mBAAO,KADX;AAEIK,mBAAO,2BAAG,eAAH,CAFX;AAGIC,4BAAcT;AAHlB,SAXG,EAgBH;AACIG,mBAAO,UADX;AAEIK,mBAAO,2BAAG,YAAH,CAFX;AAGIC,iCAAmBT;AAHvB,SAhBG,CAAP;AAsBH,KAvBD;;AAyBA,WAAOF,aACH;AAAA;AAAA,UAAI,WAAU,iBAAd;AACKS,cAAMP,GAAN,EAAWU,GAAX,CAAe,aAAK;AACjB,mBACI;AAAA;AAAA;AACI,yBAAKC,EAAER,KADX;AAEI,0DACIQ,EAAER,KAAF,KAAYF,IAAZ,GACM,8BADN,GAEM,EAHV;AAFJ;AAQI;AAAC,qCAAD;AAAA,sBAAM,IAAIU,EAAEF,IAAZ;AAAmBE,sBAAEH;AAArB;AARJ,aADJ;AAYH,SAbA;AADL,KADG,GAkBH,8BAAC,sBAAD;AACI,2BAAmBP,IADvB;AAEI,iBAASM,MAAMP,GAAN,CAFb;AAGI,kBAAUI,aAAaJ,GAAb;AAHd,MAlBJ;AAwBH,CA9ED;;AAgFAL,UAAUiB,SAAV,GAAsB;AAClBhB,WAAOiB,oBAAUC,MADC;AAElBjB,eAAWgB,oBAAUC,MAFH;AAGlBhB,gBAAYe,oBAAUE,IAHJ;AAIlBhB,cAAUc,oBAAUC;AAJF,CAAtB;;AAOAnB,UAAUqB,YAAV,GAAyB;AACrBlB,gBAAY,KADS;AAErBF,WAAO,EAFc;AAGrBC,eAAW,EAHU;AAIrBE,cAAU;AAJW,CAAzB;;kBAOeJ,S","file":"index.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport tt from 'counterpart';\nimport { Link } from 'react-router';\nimport { browserHistory } from 'react-router';\nimport NativeSelect from 'app/components/elements/NativeSelect';\n\nconst SortOrder = ({ topic, sortOrder, horizontal, pathname }) => {\n    /*\n     * We do not sort the user feed by anything other than 'new'.\n     * So don't make links to it from the SortOrder component.\n     * Instead fall back to the 'all tags' route when a user attempts to sort from a feed page.\n     * If a user lands on the 'feed' page and the sort order is displayed (e.g. a mobile user) \n     * display the active sort as 'new'.\n     */\n    let tag = topic;\n    let sort = sortOrder;\n\n    if (topic === 'feed') {\n        tag = '';\n        sort = 'created';\n    }\n\n    // If we are at the homepage, the sort order is 'trending'\n    if (pathname === '/') {\n        tag = '';\n        sort = 'trending';\n    }\n\n    const makeRoute = (tag, sort) =>\n        tag ? `/${sort.value}/${tag}` : `/${sort.value}`;\n\n    const handleChange = tag => sort => {\n        browserHistory.replace(makeRoute(tag, sort));\n    };\n\n    const sorts = tag => {\n        return [\n            {\n                value: 'trending',\n                label: tt('main_menu.trending'),\n                link: `/trending/${tag}`,\n            },\n            {\n                value: 'created',\n                label: tt('g.new'),\n                link: `/created/${tag}`,\n            },\n            {\n                value: 'hot',\n                label: tt('main_menu.hot'),\n                link: `/hot/${tag}`,\n            },\n            {\n                value: 'promoted',\n                label: tt('g.promoted'),\n                link: `/promoted/${tag}`,\n            },\n        ];\n    };\n\n    return horizontal ? (\n        <ul className=\"nav__block-list\">\n            {sorts(tag).map(i => {\n                return (\n                    <li\n                        key={i.value}\n                        className={`nav__block-list-item ${\n                            i.value === sort\n                                ? 'nav__block-list-item--active'\n                                : ''\n                        }`}\n                    >\n                        <Link to={i.link}>{i.label}</Link>\n                    </li>\n                );\n            })}\n        </ul>\n    ) : (\n        <NativeSelect\n            currentlySelected={sort}\n            options={sorts(tag)}\n            onChange={handleChange(tag)}\n        />\n    );\n};\n\nSortOrder.propTypes = {\n    topic: PropTypes.string,\n    sortOrder: PropTypes.string,\n    horizontal: PropTypes.bool,\n    pathname: PropTypes.string,\n};\n\nSortOrder.defaultProps = {\n    horizontal: false,\n    topic: '',\n    sortOrder: '',\n    pathname: '',\n};\n\nexport default SortOrder;\n"]}