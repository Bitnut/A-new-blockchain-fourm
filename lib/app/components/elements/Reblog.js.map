{"version":3,"sources":["../../../../src/app/components/elements/Reblog.jsx"],"names":["transactionActions","string","PropTypes","func","Reblog","props","reblog","e","preventDefault","state","active","setState","loading","account","author","parent_author","permlink","setReblogged","shouldComponentUpdate","isReblogged","nextProps","getRebloggedList","includes","clearRebloggedCache","posts","push","length","shift","localStorage","setItem","React","Component","propTypes","module","exports","ownProps","user","getIn","offchain","get","successCallback","errorCallback","json","dispatch","broadcastOperation","type","confirm","operation","id","required_posting_auths","__config","title","lastAccount","cachedPosts","process","env","BROWSER","getItem","JSON","parse"],"mappings":"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","file":"Reblog.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n// import LoadingIndicator from 'app/components/elements/LoadingIndicator';\nimport shouldComponentUpdate from 'app/utils/shouldComponentUpdate';\nimport * as transactionActions from 'app/redux/TransactionReducer';\nimport Icon from 'app/components/elements/Icon';\nimport tt from 'counterpart';\n\nconst { string, func } = PropTypes;\n\nexport default class Reblog extends React.Component {\n    static propTypes = {\n        account: string,\n        author: string,\n        parent_author: string,\n        permlink: string,\n        reblog: func,\n    };\n    constructor(props) {\n        super(props);\n        this.shouldComponentUpdate = shouldComponentUpdate(this, 'Reblog');\n        this.state = { active: false, loading: false };\n    }\n\n    componentWillMount() {\n        const { account } = this.props;\n        if (account) {\n            this.setState({ active: this.isReblogged(account) });\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.account) {\n            this.setState({ active: this.isReblogged(nextProps.account) });\n        }\n    }\n\n    reblog = e => {\n        e.preventDefault();\n        if (this.state.active) return;\n        this.setState({ loading: true });\n        const { reblog, account, author, parent_author, permlink } = this.props;\n        reblog(\n            account,\n            author,\n            permlink,\n            () => {\n                this.setState({ active: true, loading: false });\n                this.setReblogged(account);\n            },\n            () => {\n                this.setState({ active: false, loading: false });\n            }\n        );\n    };\n\n    isReblogged(account) {\n        const { author, permlink } = this.props;\n        return getRebloggedList(account).includes(author + '/' + permlink);\n    }\n\n    setReblogged(account) {\n        const { author, permlink } = this.props;\n        clearRebloggedCache();\n        let posts = getRebloggedList(account);\n        posts.push(author + '/' + permlink);\n        if (posts.length > 200) posts.shift(1);\n\n        localStorage.setItem('reblogged_' + account, JSON.stringify(posts));\n    }\n\n    render() {\n        if (this.props.author == this.props.account || this.props.parent_author)\n            return null;\n\n        const state = this.state.active ? 'active' : 'inactive';\n        const loading = this.state.loading ? ' loading' : '';\n        return (\n            <span\n                className={'Reblog__button Reblog__button-' + state + loading}\n            >\n                <a href=\"#\" onClick={this.reblog} title={tt('g.reblog')}>\n                    <Icon name=\"reblog\" />\n                </a>\n            </span>\n        );\n    }\n}\nmodule.exports = connect(\n    (state, ownProps) => {\n        const account =\n            state.user.getIn(['current', 'username']) ||\n            state.offchain.get('account');\n        return { ...ownProps, account };\n    },\n    dispatch => ({\n        reblog: (account, author, permlink, successCallback, errorCallback) => {\n            const json = ['reblog', { account, author, permlink }];\n            dispatch(\n                transactionActions.broadcastOperation({\n                    type: 'custom_json',\n                    confirm: tt('g.are_you_sure'),\n                    operation: {\n                        id: 'follow',\n                        required_posting_auths: [account],\n                        json: JSON.stringify(json),\n                        __config: { title: tt('g.resteem_this_post') },\n                    },\n                    successCallback,\n                    errorCallback,\n                })\n            );\n        },\n    })\n)(Reblog);\n\nlet lastAccount;\nlet cachedPosts;\n\nfunction getRebloggedList(account) {\n    if (!process.env.BROWSER) return [];\n\n    if (lastAccount === account) return cachedPosts;\n\n    lastAccount = account;\n    const posts = localStorage.getItem('reblogged_' + account);\n    try {\n        cachedPosts = JSON.parse(posts) || [];\n    } catch (e) {\n        cachedPosts = [];\n    }\n    return cachedPosts;\n}\n\nfunction clearRebloggedCache() {\n    lastAccount = null;\n}\n"]}