{"version":3,"sources":["../../../../src/app/components/elements/ChangePassword.jsx"],"names":["transactionActions","appActions","string","PropTypes","oneOf","ChangePassword","props","dispatchSubmit","changePassword","authType","priorAuthKey","resetForm","notify","fields","password","twofa","accountName","state","success","setState","loading","error","onClose","window","location","e","value","username","nameError","generated","onNameChange","bind","generateWif","newWif","key_utils","get_random_key","toWif","name","promise","length","api","getAccountsAsync","then","res","catch","target","trim","toLowerCase","validateAccountName","process","env","BROWSER","handleSubmit","submitting","confirmPassword","confirmCheck","confirmSaved","console","error2","test","readOnlyAccountName","APP_NAME","touched","display","padding","background","color","wordWrap","fontSize","textAlign","React","Component","propTypes","defaultPassword","keyValidate","values","PublicKey","fromString","form","ownProps","enable2fa","validate","initialValues","ph","PrivateKey","fromSeed","role","auths","oldAuth","newAuth","dispatch","updateAuthorities","signingKey","onSuccess","onError","addNotification","key","Date","now","message","dismissAfter"],"mappings":"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","file":"ChangePassword.js","sourcesContent":["/* eslint react/prop-types: 0 */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport tt from 'counterpart';\nimport {\n    PrivateKey,\n    PublicKey,\n    key_utils,\n} from '@steemit/steem-js/lib/auth/ecc';\nimport { api } from '@steemit/steem-js';\n\nimport * as transactionActions from 'app/redux/TransactionReducer';\nimport * as appActions from 'app/redux/AppReducer';\nimport LoadingIndicator from 'app/components/elements/LoadingIndicator';\nimport { validate_account_name } from 'app/utils/ChainValidation';\nimport { cleanReduxInput } from 'app/utils/ReduxForms';\nimport { APP_NAME } from 'app/client_config';\n\nconst { string, oneOf } = PropTypes;\n\nclass ChangePassword extends React.Component {\n    static propTypes = {\n        // HTML properties\n        username: string,\n        defaultPassword: string,\n        authType: oneOf(['posting', 'active', 'owner', 'memo']), // null for all\n        priorAuthKey: string, // Required pubkey if authType is given\n    };\n    constructor(props) {\n        super(props);\n        this.state = {\n            accountName: props.username,\n            nameError: '',\n            generated: false,\n        };\n        this.onNameChange = this.onNameChange.bind(this);\n        this.generateWif = this.generateWif.bind(this);\n    }\n    componentWillMount() {}\n    componentWillUnmount() {\n        newWif = null;\n    }\n\n    generateWif(e) {\n        newWif = 'P' + key_utils.get_random_key().toWif();\n        this.setState({ generated: true });\n    }\n    validateAccountName(name) {\n        let nameError = '';\n        let promise;\n        if (name.length > 0) {\n            nameError = validate_account_name(name);\n            if (!nameError) {\n                promise = api.getAccountsAsync([name]).then(res => {\n                    return !(res && res.length > 0)\n                        ? tt('g.account_not_found')\n                        : '';\n                });\n            }\n        }\n        if (promise) {\n            promise.then(nameError => this.setState({ nameError })).catch(() =>\n                this.setState({\n                    nameError:\n                        \"Account name can't be verified right now due to server failure. Please try again later.\",\n                })\n            );\n        } else {\n            this.setState({ nameError });\n        }\n    }\n    onNameChange(e) {\n        const accountName = e.target.value.trim().toLowerCase();\n        this.validateAccountName(accountName);\n        this.setState({ accountName });\n    }\n    dispatchSubmit = () => {\n        const { changePassword, authType, priorAuthKey } = this.props;\n        const { resetForm, notify } = this.props;\n        const { password, twofa } = this.props.fields;\n        const accountName = this.state.accountName;\n        const success = () => {\n            this.setState({ loading: false, error: null });\n            const { onClose } = this.props;\n            if (onClose) onClose();\n            if (resetForm) resetForm();\n            notify('Password Updated');\n            window.location = `/login.html#account=${\n                accountName\n            }&msg=passwordupdated`;\n        };\n        const error = e => {\n            this.setState({ loading: false, error: e });\n        };\n        this.setState({ loading: true, error: null });\n        changePassword(\n            accountName,\n            authType,\n            priorAuthKey,\n            password.value,\n            twofa.value,\n            success,\n            error\n        );\n    };\n    render() {\n        if (!process.env.BROWSER) {\n            // don't render this page on the server\n            return (\n                <div className=\"row\">\n                    <div className=\"column\">{tt('g.loading')}..</div>\n                </div>\n            );\n        }\n        const { generated, loading, error } = this.state;\n        const { username, authType, priorAuthKey /*enable2fa*/ } = this.props;\n        const { handleSubmit, submitting, onClose } = this.props; // form stuff\n        const {\n            password,\n            confirmPassword,\n            confirmCheck,\n            confirmSaved /*twofa*/,\n        } = this.props.fields;\n\n        if (authType && !priorAuthKey) console.error('Missing priorAuthKey');\n\n        const error2 = /Missing Owner Authority/.test(error) ? (\n            <span>\n                {tt('g.this_is_wrong_password')}. {tt('g.do_you_need_to') + ' '}\n                <a href=\"/recover_account_step_1\">\n                    {tt('g.recover_your_account')}\n                </a>?\n            </span>\n        ) : (\n            error\n        );\n\n        const { accountName, nameError } = this.state;\n        const readOnlyAccountName = username && username.length > 0;\n\n        return (\n            <span className=\"ChangePassword\">\n                <form\n                    onSubmit={handleSubmit(() => {\n                        this.dispatchSubmit();\n                    })}\n                >\n                    {username && (\n                        <h4>\n                            {tt('g.reset_usernames_password', { username })}\n                        </h4>\n                    )}\n                    {authType ? (\n                        <p>\n                            {tt('g.this_will_update_usernames_authtype_key', {\n                                username,\n                                authType,\n                            })}\n                        </p>\n                    ) : (\n                        <div className=\"ChangePassword__rules\">\n                            <hr />\n                            <p>\n                                {tt('g.the_rules_of_APP_NAME.one', {\n                                    APP_NAME,\n                                })}\n                                <br />\n                                {tt('g.the_rules_of_APP_NAME.second', {\n                                    APP_NAME,\n                                })}\n                                <br />\n                                {tt('g.the_rules_of_APP_NAME.third', {\n                                    APP_NAME,\n                                })}\n                                <br />\n                                {tt('g.the_rules_of_APP_NAME.fourth')}\n                                <br />\n                                {tt('g.the_rules_of_APP_NAME.fifth')}\n                                <br />\n                                {tt('g.the_rules_of_APP_NAME.sixth')}\n                                <br />\n                                {tt('g.the_rules_of_APP_NAME.seventh')}\n                            </p>\n                            <hr />\n                        </div>\n                    )}\n\n                    <div className={nameError ? 'error' : ''}>\n                        <label>\n                            {tt('g.account_name')}\n                            <input\n                                type=\"text\"\n                                disabled={readOnlyAccountName}\n                                autoComplete=\"off\"\n                                value={accountName}\n                                onChange={this.onNameChange}\n                            />\n                        </label>\n                        <p className=\"help-text\">{nameError}</p>\n                    </div>\n                    <br />\n                    <label>\n                        <div className=\"float-right\">\n                            <a href=\"/recover_account_step_1\">\n                                {tt('g.recover_password')}\n                            </a>\n                        </div>\n                        {tt('g.current_password')}\n                        <br />\n                        <input\n                            {...cleanReduxInput(password)}\n                            type=\"password\"\n                            disabled={loading}\n                        />\n                    </label>\n                    {password.touched &&\n                        password.error && (\n                            <div className=\"error\">{password.error}</div>\n                        )}\n\n                    <br />\n\n                    <label>\n                        {tt('g.generated_password') + ' '}{' '}\n                        <span className=\"secondary\">({tt('g.new')})</span>\n                        <br />\n                    </label>\n                    {(generated && (\n                        <span>\n                            <div>\n                                {/* !! Do not put keys in a label, labels have an uppercase css style applied !! */}\n                                <div className=\"overflow-ellipsis\">\n                                    <code\n                                        style={{\n                                            display: 'block',\n                                            padding: '0.2rem 0.5rem',\n                                            background: 'white',\n                                            color: '#c7254e',\n                                            wordWrap: 'break-word',\n                                            fontSize: '100%',\n                                            textAlign: 'center',\n                                        }}\n                                    >\n                                        {newWif}\n                                    </code>\n                                </div>\n                            </div>\n                            <label className=\"ChangePassword__backup_text\">\n                                {tt('g.backup_password_by_storing_it')}.\n                            </label>\n                        </span>\n                    )) || (\n                        <button\n                            type=\"button\"\n                            className=\"button hollow\"\n                            onClick={this.generateWif}\n                        >\n                            {tt('g.click_to_generate_password')}\n                        </button>\n                    )}\n\n                    <br />\n\n                    <label>\n                        {tt('g.re_enter_generate_password')}\n                        <br />\n                        <input\n                            {...cleanReduxInput(confirmPassword)}\n                            type=\"password\"\n                            disabled={loading}\n                        />\n                    </label>\n                    {confirmPassword.touched &&\n                        confirmPassword.error && (\n                            <div className=\"error\">{confirmPassword.error}</div>\n                        )}\n\n                    <br />\n\n                    <label>\n                        <input\n                            {...cleanReduxInput(confirmCheck)}\n                            type=\"checkbox\"\n                        />{' '}\n                        {tt(\n                            'g.understand_that_APP_NAME_cannot_recover_password',\n                            { APP_NAME }\n                        )}\n                    </label>\n                    {confirmCheck.touched &&\n                        confirmCheck.error && (\n                            <div className=\"error\">{confirmCheck.error}</div>\n                        )}\n\n                    <label>\n                        <input\n                            {...cleanReduxInput(confirmSaved)}\n                            type=\"checkbox\"\n                        />\n                        {tt('g.i_saved_password')}\n                    </label>\n                    {confirmSaved.touched &&\n                        confirmSaved.error && (\n                            <div className=\"error\">{confirmSaved.error}</div>\n                        )}\n                    <br />\n                    {loading && (\n                        <div>\n                            <LoadingIndicator type=\"circle\" />\n                        </div>\n                    )}\n                    {!loading && (\n                        <div className=\"ChangePassword__btn-container\">\n                            <div className=\"error\">{error2}</div>\n                            <button\n                                type=\"submit\"\n                                className=\"button\"\n                                disabled={loading}\n                            >\n                                {tt('g.update_password')}\n                            </button>\n                            {onClose && (\n                                <button\n                                    type=\"button\"\n                                    disabled={submitting}\n                                    className=\"button hollow float-right\"\n                                    onClick={onClose}\n                                >\n                                    {tt('g.cancel')}\n                                </button>\n                            )}\n                        </div>\n                    )}\n                </form>\n            </span>\n        );\n        // {enable2fa && <p>\n        //     <h4>Enable Steemit Account Recovery</h4>\n        //     <input type=\"checkbox\" {...twofa} />\n        //     {twofa.touched && twofa.error && <div className=\"error\">{twofa.error}</div>}\n        //     <br />\n        //     <p>\n        //         This feature will add a Steemit account as an additional owner on your account.  This is a service that can be used by yourself and Steemit to recover your account should it get compromised or you loose your password.\n        //     </p>\n        //     <small><a href=\"//@steemit\" target=\"_blank\">@Steemit</a></small>\n        // </p>}\n        // <br />\n    }\n}\n\nlet newWif = null;\nconst keyValidate = values => ({\n    password: !values.password\n        ? tt('g.required')\n        : PublicKey.fromString(values.password)\n          ? tt('g.you_need_private_password_or_key_not_a_public_key')\n          : null,\n    confirmPassword: !values.confirmPassword\n        ? tt('g.required')\n        : values.confirmPassword.trim() !== newWif\n          ? tt('g.passwords_do_not_match')\n          : null,\n    confirmCheck: !values.confirmCheck ? tt('g.required') : null,\n    confirmSaved: !values.confirmSaved ? tt('g.required') : null,\n});\n\nimport { reduxForm } from 'redux-form'; // @deprecated, instead use: app/utils/ReactForm.js\nexport default reduxForm(\n    {\n        form: 'changePassword',\n        fields: [\n            'password',\n            'confirmPassword',\n            'confirmCheck',\n            'confirmSaved',\n            'twofa',\n        ],\n    },\n    // mapStateToProps\n    (state, ownProps) => {\n        const { authType } = ownProps;\n        const enable2fa = authType == null;\n        return {\n            ...ownProps,\n            enable2fa,\n            validate: keyValidate,\n            initialValues: { twofa: false, password: ownProps.defaultPassword },\n        };\n    },\n    // mapDispatchToProps\n    dispatch => ({\n        changePassword: (\n            accountName,\n            authType,\n            priorAuthKey,\n            password,\n            twofa = false,\n            success,\n            error\n        ) => {\n            const ph = role =>\n                PrivateKey.fromSeed(`${accountName}${role}${newWif}`).toWif();\n            const auths = authType\n                ? [{ authType, oldAuth: priorAuthKey, newAuth: newWif }]\n                : [\n                      {\n                          authType: 'owner',\n                          oldAuth: password,\n                          newAuth: ph('owner', newWif),\n                      },\n                      {\n                          authType: 'active',\n                          oldAuth: password,\n                          newAuth: ph('active', newWif),\n                      },\n                      {\n                          authType: 'posting',\n                          oldAuth: password,\n                          newAuth: ph('posting', newWif),\n                      },\n                      {\n                          authType: 'memo',\n                          oldAuth: password,\n                          newAuth: ph('memo', newWif),\n                      },\n                  ];\n            dispatch(\n                transactionActions.updateAuthorities({\n                    twofa,\n                    // signingKey provides the password if it was not provided in auths\n                    signingKey: authType ? password : null,\n                    accountName,\n                    auths,\n                    onSuccess: success,\n                    onError: error,\n                    // notifySuccess: 'Change password success'\n                })\n            );\n        },\n        notify: message => {\n            dispatch(\n                appActions.addNotification({\n                    key: 'chpwd_' + Date.now(),\n                    message,\n                    dismissAfter: 5000,\n                })\n            );\n        },\n    })\n)(ChangePassword);\n"]}