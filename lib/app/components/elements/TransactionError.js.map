{"version":3,"sources":["../../../../src/app/components/elements/TransactionError.jsx"],"names":["transactionActions","func","PropTypes","string","TransactionError","shouldComponentUpdate","props","opType","addListener","removeListener","errorKey","exception","error","cn","text","React","Component","propTypes","isRequired","state","ownProps","transaction","getIn","toJS","key","dispatch","set","value","remove"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;IAAYA,kB;;AACZ;;;;AACA;;;;;;IAEQC,I,GAAiBC,mB,CAAjBD,I;IAAME,M,GAAWD,mB,CAAXC,M;;AAEd;;IACMC,gB;;;;;;;;;;;;;;oOAgBFC,qB,GAAwB,4CAA4B,kBAA5B,C;;;;;6CAJH;AAAA,yBACe,KAAKC,KADpB;AAAA,gBACTC,MADS,UACTA,MADS;AAAA,gBACDC,WADC,UACDA,WADC;;AAEjBA,wBAAYD,MAAZ;AACH;;;+CAEsB;AAAA,0BACgB,KAAKD,KADrB;AAAA,gBACXC,MADW,WACXA,MADW;AAAA,gBACHE,cADG,WACHA,cADG;;AAEnBA,2BAAeF,MAAf;AACH;;;iCACQ;AAAA,0BACkC,KAAKD,KADvC;AAAA,gBACGI,QADH,WACGA,QADH;AAAA,gBACaC,SADb,WACaA,SADb;AAAA,gBACwBC,KADxB,WACwBA,KADxB;;AAEL,gBAAMC,KAAK,qBAAX;AACA,gBAAI,CAACH,QAAD,IAAa,CAACC,SAAlB,EAA6B;AACzB,oBAAI,CAACC,KAAL,EAAY,OAAO,2CAAP;AACZ,uBACI;AAAA;AAAA,sBAAM,WAAU,kBAAhB;AACI;AAAA;AAAA,0BAAK,WAAWC,EAAhB;AAAqBD;AAArB;AADJ,iBADJ;AAKH;AACD,gBAAME,OAAOJ,WAAWA,QAAX,GAAsBC,SAAnC;AACA,mBACI;AAAA;AAAA,kBAAM,WAAU,kBAAhB;AACI;AAAA;AAAA,sBAAK,WAAWE,EAAhB;AAAqBC;AAArB;AADJ,aADJ;AAKH;;;EAtC0BC,gBAAMC,S,UAC1BC,S,GAAY;AACf;AACAV,YAAQJ,OAAOe,UAFA;AAGfN,WAAOT,MAHQ,EAGA;;AAEf;AACAK,iBAAaP,KAAKiB,UANH;AAOfT,oBAAgBR,KAAKiB,UAPN;AAQfR,cAAUP,MARK;AASfQ,eAAWR;AATI,C;kBAwCR;AACX;AACA,UAACgB,KAAD,EAAQC,QAAR,EAAqB;AAAA,QACTb,MADS,GACEa,QADF,CACTb,MADS;;AAEjB,QAAMK,QACFO,MAAME,WAAN,CAAkBC,KAAlB,CAAwB,CAAC,kBAAD,EAAqBf,MAArB,CAAxB,KAAyD,qBAD7D;;AAFiB,sBAIUK,MAAMW,IAAN,EAJV;AAAA,QAITC,GAJS,eAITA,GAJS;AAAA,QAIJb,SAJI,eAIJA,SAJI;;AAKjB,sCACOS,QADP;AAEIV,kBAAUc,GAFd;AAGIb;AAHJ;AAKH,CAZU;AAaX;AACA;AAAA,WAAa;AACTH,qBAAa,6BAAU;AACnBiB,qBACIzB,mBAAmB0B,GAAnB,CAAuB;AACnBF,qBAAK,CAAC,kBAAD,EAAqBjB,SAAS,WAA9B,CADc;AAEnBoB,uBAAO;AAFY,aAAvB,CADJ;AAMH,SARQ;AASTlB,wBAAgB,gCAAU;AACtBgB,qBACIzB,mBAAmB4B,MAAnB,CAA0B,EAAEJ,KAAK,CAAC,kBAAD,EAAqBjB,MAArB,CAAP,EAA1B,CADJ;AAGAkB,qBACIzB,mBAAmB4B,MAAnB,CAA0B;AACtBJ,qBAAK,CAAC,kBAAD,EAAqBjB,SAAS,WAA9B;AADiB,aAA1B,CADJ;AAKH;AAlBQ,KAAb;AAAA,CAdW,EAkCbH,gBAlCa,C","file":"TransactionError.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport * as transactionActions from 'app/redux/TransactionReducer';\nimport shouldComponentUpdate from 'app/utils/shouldComponentUpdate';\nimport { Map } from 'immutable';\n\nconst { func, string } = PropTypes;\n\n/** Sole consumer for a transaction error of a given type. */\nclass TransactionError extends React.Component {\n    static propTypes = {\n        // HTML properties\n        opType: string.isRequired,\n        error: string, // additional error (optional)\n\n        // Redux connect properties\n        addListener: func.isRequired,\n        removeListener: func.isRequired,\n        errorKey: string,\n        exception: string,\n    };\n    componentWillMount() {\n        const { opType, addListener } = this.props;\n        addListener(opType);\n    }\n    shouldComponentUpdate = shouldComponentUpdate(this, 'TransactionError');\n    componentWillUnmount() {\n        const { opType, removeListener } = this.props;\n        removeListener(opType);\n    }\n    render() {\n        const { errorKey, exception, error } = this.props;\n        const cn = 'error callout alert';\n        if (!errorKey && !exception) {\n            if (!error) return <span />;\n            return (\n                <span className=\"TransactionError\">\n                    <div className={cn}>{error}</div>\n                </span>\n            );\n        }\n        const text = errorKey ? errorKey : exception;\n        return (\n            <span className=\"TransactionError\">\n                <div className={cn}>{text}</div>\n            </span>\n        );\n    }\n}\n\nexport default connect(\n    // mapStateToProps\n    (state, ownProps) => {\n        const { opType } = ownProps;\n        const error =\n            state.transaction.getIn(['TransactionError', opType]) || Map();\n        const { key, exception } = error.toJS();\n        return {\n            ...ownProps,\n            errorKey: key,\n            exception,\n        };\n    },\n    // mapDispatchToProps\n    dispatch => ({\n        addListener: opType => {\n            dispatch(\n                transactionActions.set({\n                    key: ['TransactionError', opType + '_listener'],\n                    value: true,\n                })\n            );\n        },\n        removeListener: opType => {\n            dispatch(\n                transactionActions.remove({ key: ['TransactionError', opType] })\n            );\n            dispatch(\n                transactionActions.remove({\n                    key: ['TransactionError', opType + '_listener'],\n                })\n            );\n        },\n    })\n)(TransactionError);\n"]}