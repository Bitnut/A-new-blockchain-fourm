{"version":3,"sources":["../../../../src/app/components/elements/GeneratedPasswordInput.jsx"],"names":["allChecked","confirmCheckboxes","box1","box2","GeneratedPasswordInput","props","state","generatedPassword","showPasswordString","key_utils","get_random_key","toWif","confirmPassword","confirmPasswordError","confirmPasswordChange","bind","confirmCheckChange","np","setState","e","target","name","checked","onChange","value","trim","disabled","APP_NAME","React","Component","propTypes","PropTypes","bool","func","isRequired"],"mappings":"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","file":"GeneratedPasswordInput.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport tt from 'counterpart';\nimport { APP_NAME } from 'app/client_config';\nimport { key_utils } from '@steemit/steem-js/lib/auth/ecc';\n\nfunction allChecked(confirmCheckboxes) {\n    return confirmCheckboxes.box1 && confirmCheckboxes.box2;\n}\n\nexport default class GeneratedPasswordInput extends React.Component {\n    static propTypes = {\n        disabled: PropTypes.bool,\n        onChange: PropTypes.func.isRequired,\n        showPasswordString: PropTypes.bool.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            generatedPassword: props.showPasswordString\n                ? 'P' + key_utils.get_random_key().toWif()\n                : null, // Only generate a password if it should be shown already here\n            confirmPassword: '',\n            confirmPasswordError: '',\n            confirmCheckboxes: { box1: false, box2: false },\n        };\n        this.confirmPasswordChange = this.confirmPasswordChange.bind(this);\n        this.confirmCheckChange = this.confirmCheckChange.bind(this);\n    }\n\n    componentWillReceiveProps(np) {\n        /*\n        * By delaying the password generation until the user enters an account\n        * name (making showPasswordString = true), we allow more time for\n        * entropy collection via the App.jsx mousemove event listener\n        */\n        if (!this.state.generatedPassword && np.showPasswordString) {\n            this.setState({\n                generatedPassword: 'P' + key_utils.get_random_key().toWif(),\n            });\n        }\n    }\n\n    confirmCheckChange(e) {\n        const confirmCheckboxes = this.state.confirmCheckboxes;\n        confirmCheckboxes[e.target.name] = e.target.checked;\n        this.setState({ confirmCheckboxes });\n        const { confirmPassword, generatedPassword } = this.state;\n        this.props.onChange(\n            confirmPassword,\n            confirmPassword &&\n                confirmPassword === generatedPassword &&\n                allChecked(confirmCheckboxes)\n        );\n    }\n\n    confirmPasswordChange(e) {\n        const confirmPassword = e.target.value.trim();\n        const { generatedPassword, confirmCheckboxes } = this.state;\n        let confirmPasswordError = '';\n        if (confirmPassword && confirmPassword !== generatedPassword)\n            confirmPasswordError = tt('g.passwords_do_not_match');\n        this.setState({ confirmPassword, confirmPasswordError });\n        this.props.onChange(\n            confirmPassword,\n            confirmPassword &&\n                confirmPassword === generatedPassword &&\n                allChecked(confirmCheckboxes)\n        );\n    }\n\n    render() {\n        const { disabled, showPasswordString } = this.props;\n        const {\n            generatedPassword,\n            confirmPassword,\n            confirmPasswordError,\n            confirmCheckboxes,\n        } = this.state;\n        return (\n            <div className=\"GeneratedPasswordInput\">\n                <div className=\"GeneratedPasswordInput__field\">\n                    <label className=\"uppercase\">\n                        {tt('g.generated_password')}\n                        <br />\n                        <code className=\"GeneratedPasswordInput__generated_password\">\n                            {showPasswordString ? generatedPassword : '-'}\n                        </code>\n                        <div className=\"GeneratedPasswordInput__backup_text\">\n                            {showPasswordString\n                                ? tt('g.backup_password_by_storing_it')\n                                : tt('g.enter_account_show_password')}\n                        </div>\n                    </label>\n                </div>\n                <div className=\"GeneratedPasswordInput__field\">\n                    <label className=\"uppercase\">\n                        {tt('g.re_enter_generate_password')}\n                        <input\n                            type=\"password\"\n                            name=\"confirmPassword\"\n                            autoComplete=\"off\"\n                            onChange={this.confirmPasswordChange}\n                            value={confirmPassword}\n                            disabled={disabled}\n                        />\n                    </label>\n                    <div className=\"error\">{confirmPasswordError}</div>\n                </div>\n                <div className=\"GeneratedPasswordInput__checkboxes\">\n                    <label>\n                        <input\n                            type=\"checkbox\"\n                            name=\"box1\"\n                            onChange={this.confirmCheckChange}\n                            checked={confirmCheckboxes.box1}\n                        />\n                        {tt(\n                            'g.understand_that_APP_NAME_cannot_recover_password',\n                            { APP_NAME }\n                        )}.\n                    </label>\n                    <label>\n                        <input\n                            type=\"checkbox\"\n                            name=\"box2\"\n                            onChange={this.confirmCheckChange}\n                            checked={confirmCheckboxes.box2}\n                        />\n                        {tt('g.i_saved_password')}.\n                    </label>\n                </div>\n            </div>\n        );\n    }\n}\n"]}