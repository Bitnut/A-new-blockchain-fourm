{"version":3,"sources":["../../../../src/app/components/elements/Keys.jsx"],"names":["globalActions","Keys","showChangePassword","props","account","authType","get","pubkey","state","nextProps","nextState","auth","authLogin","privateKeys","onKey","pubkeys","authority","authorities","map","a","rowClass","idx","tt_auth_type","toLowerCase","auths","className","Component","propTypes","PropTypes","object","isRequired","oneOf","emptyMap","ownProps","accountName","current","user","username","isMyAccount","password","getIn","priorAuthKey","name","dispatch","remove","key","showDialog","params"],"mappings":"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","file":"Keys.js","sourcesContent":["/* eslint react/prop-types: 0 */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Map, List } from 'immutable';\nimport { connect } from 'react-redux';\nimport * as globalActions from 'app/redux/GlobalReducer';\nimport ShowKey from 'app/components/elements/ShowKey';\nimport tt from 'counterpart';\n\nclass Keys extends Component {\n    static propTypes = {\n        // HTML\n        account: PropTypes.object.isRequired, // immutable Map\n        authType: PropTypes.oneOf(['posting', 'active', 'owner', 'memo']),\n    };\n    constructor() {\n        super();\n        this.state = {};\n    }\n    shouldComponentUpdate(nextProps, nextState) {\n        return (\n            this.props.auth !== nextProps.auth ||\n            this.props.authType !== nextProps.authType ||\n            this.props.authLogin !== nextProps.authLogin ||\n            this.props.account !== nextProps.account ||\n            this.state !== nextState\n        );\n    }\n    showChangePassword = pubkey => {\n        const { account, authType } = this.props;\n        this.props.showChangePassword(account.get('name'), authType, pubkey);\n    };\n    render() {\n        const { props: { account, authType, privateKeys, onKey } } = this;\n        let pubkeys;\n        if (authType === 'memo') {\n            pubkeys = List([account.get('memo_key')]);\n        } else {\n            const authority = account.get(authType);\n            const authorities = authority.get('key_auths');\n            pubkeys = authorities.map(a => a.get(0));\n        }\n        const rowClass = 'hoverBackground';\n        let idx = 0;\n        let tt_auth_type;\n        switch (authType.toLowerCase()) {\n            case 'owner':\n                tt_auth_type = tt('g.owner');\n                break;\n            case 'active':\n                tt_auth_type = tt('g.active');\n                break;\n            case 'posting':\n                tt_auth_type = tt('g.posting');\n                break;\n            case 'memo':\n                tt_auth_type = tt('g.memo');\n                break;\n            default:\n                tt_auth_type = authType;\n        }\n        const auths = pubkeys.map(pubkey => (\n            <div key={idx++}>\n                <div className=\"row\">\n                    <div className=\"column small-12\">\n                        <span className={rowClass}>\n                            <ShowKey\n                                pubkey={pubkey}\n                                privateKey={privateKeys.get(\n                                    authType + '_private'\n                                )}\n                                cmpProps={{ className: rowClass }}\n                                authType={authType}\n                                accountName={account.get('name')}\n                                onKey={onKey}\n                            >\n                                {/*<span onClick={() => this.showChangePassword(pubkey)}>&nbsp;{edit}</span>*/}\n                            </ShowKey>\n                        </span>\n                    </div>\n                </div>\n            </div>\n        ));\n        return (\n            <span>\n                <div className=\"row\">\n                    <div className=\"column small-12\">\n                        <label>{tt_auth_type}</label>\n                        {auths}\n                    </div>\n                </div>\n            </span>\n        );\n    }\n}\n\nconst emptyMap = Map();\n\nexport default connect(\n    (state, ownProps) => {\n        const { account } = ownProps;\n        const accountName = account.get('name');\n        const current = state.user.get('current');\n        const username = current && current.get('username');\n        const isMyAccount = username === accountName;\n        const authLogin = isMyAccount\n            ? { username, password: current.get('password') }\n            : null;\n        let privateKeys;\n        if (current) privateKeys = current.get('private_keys'); // not bound to one account\n\n        if (!privateKeys) privateKeys = emptyMap;\n\n        const auth = state.user.getIn(['authority', accountName]);\n        return { ...ownProps, auth, authLogin, privateKeys };\n    },\n    dispatch => ({\n        showChangePassword: (username, authType, priorAuthKey) => {\n            const name = 'changePassword';\n            dispatch(globalActions.remove({ key: name }));\n            dispatch(\n                globalActions.showDialog({\n                    name,\n                    params: { username, authType, priorAuthKey },\n                })\n            );\n        },\n    })\n)(Keys);\n"]}