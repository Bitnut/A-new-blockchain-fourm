{"version":3,"sources":["../../../../src/app/components/pages/RecoverAccountStep2.jsx"],"names":["userActions","transactionActions","passwordToOwnerPubKey","account_name","password","pub_key","PrivateKey","fromWif","e","fromSeed","toPublicKey","toString","RecoverAccountStep2","props","state","name_error","oldPassword","newPassword","valid","error","progress_status","success","onPasswordChange","bind","oldPasswordChange","onSubmit","onRecoverFailed","onRecoverSuccess","target","value","trim","setState","msg","name","oldOwner","api","getOwnerHistoryAsync","then","res","history","filter","owner","a","previous_owner_authority","key_auths","length","old_owner_key","new_owner_key","new_owner_authority","weight_threshold","account_auths","fetch","method","mode","credentials","headers","Accept","body","csrf","$STM_csrf","r","json","console","recoverAccount","catch","message","preventDefault","account_to_recover","checkOldOwner","requestAccountRecovery","process","env","BROWSER","submit_btn_class","submit","window","location","disable_password_input","React","Component","propTypes","PropTypes","string","func","isRequired","module","exports","path","component","offchain","get","old_password","new_password","onError","onSuccess","dispatch","logout","type"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;AACA;;AACA;;AAEA;;IAAYA,W;;AACZ;;IAAYC,kB;;AACZ;;;;AACA;;;;AACA;;;;;;;;AAEA,SAASC,qBAAT,CAA+BC,YAA/B,EAA6CC,QAA7C,EAAuD;AACnD,QAAIC,gBAAJ;AACA,QAAI;AACAA,kBAAUC,gBAAWC,OAAX,CAAmBH,QAAnB,CAAV;AACH,KAFD,CAEE,OAAOI,CAAP,EAAU;AACRH,kBAAUC,gBAAWG,QAAX,CAAoBN,eAAe,OAAf,GAAyBC,QAA7C,CAAV;AACH;AACD,WAAOC,QAAQK,WAAR,GAAsBC,QAAtB,EAAP;AACH;;IAEKC,mB;;;AAMF,iCAAYC,KAAZ,EAAmB;AAAA;;AAAA,oKACTA,KADS;;AAEf,cAAKC,KAAL,GAAa;AACTC,wBAAY,EADH;AAETC,yBAAa,EAFJ;AAGTC,yBAAa,EAHJ;AAITC,mBAAO,KAJE;AAKTC,mBAAO,EALE;AAMTC,6BAAiB,EANR;AAOTC,qBAAS;AAPA,SAAb;AASA,cAAKC,gBAAL,GAAwB,MAAKA,gBAAL,CAAsBC,IAAtB,OAAxB;AACA,cAAKC,iBAAL,GAAyB,MAAKA,iBAAL,CAAuBD,IAAvB,OAAzB;AACA,cAAKE,QAAL,GAAgB,MAAKA,QAAL,CAAcF,IAAd,OAAhB;AACA,cAAKG,eAAL,GAAuB,MAAKA,eAAL,CAAqBH,IAArB,OAAvB;AACA,cAAKI,gBAAL,GAAwB,MAAKA,gBAAL,CAAsBJ,IAAtB,OAAxB;AAfe;AAgBlB;;;;0CAEiBf,C,EAAG;AACjB,gBAAMQ,cAAcR,EAAEoB,MAAF,CAASC,KAAT,CAAeC,IAAf,EAApB;AACA,iBAAKC,QAAL,CAAc,EAAEf,wBAAF,EAAd;AACH;;;yCAEgBC,W,EAAaC,K,EAAO;AACjC,iBAAKa,QAAL,CAAc,EAAEd,wBAAF,EAAeC,YAAf,EAAd;AACH;;;wCAEeC,K,EAAO;AACnB,iBAAKY,QAAL,CAAc;AACVZ,uBAAOA,MAAMa,GAAN,IAAab,MAAMR,QAAN,EADV;AAEVS,iCAAiB;AAFP,aAAd;AAIH;;;2CAEkB;AACf,iBAAKW,QAAL,CAAc,EAAEV,SAAS,IAAX,EAAiBD,iBAAiB,EAAlC,EAAd;AACH;;;sCAEaa,I,EAAMC,Q,EAAU;AAC1B,mBAAOC,aAAIC,oBAAJ,CAAyBH,IAAzB,EAA+BI,IAA/B,CAAoC,mBAAW;AAClD,oBAAMC,MAAMC,QAAQC,MAAR,CAAe,aAAK;AAC5B,wBAAMC,QAAQC,EAAEC,wBAAF,CAA2BC,SAA3B,CAAqC,CAArC,EAAwC,CAAxC,CAAd;AACA,2BAAOH,UAAUP,QAAjB;AACH,iBAHW,CAAZ;AAIA,uBAAOI,IAAIO,MAAJ,GAAa,CAApB;AACH,aANM,CAAP;AAOH;;;+CAEsBZ,I,EAAMjB,W,EAAaC,W,EAAa;AAAA;;AACnD,gBAAM6B,gBAAgB5C,sBAAsB+B,IAAtB,EAA4BjB,WAA5B,CAAtB;AACA,gBAAM+B,gBAAgB7C,sBAAsB+B,IAAtB,EAA4BhB,WAA5B,CAAtB;AACA,gBAAM+B,sBAAsB;AACxBC,kCAAkB,CADM;AAExBC,+BAAe,EAFS;AAGxBN,2BAAW,CAAC,CAACG,aAAD,EAAgB,CAAhB,CAAD;AAHa,aAA5B;AAKAI,kBAAM,kCAAN,EAA0C;AACtCC,wBAAQ,MAD8B;AAEtCC,sBAAM,SAFgC;AAGtCC,6BAAa,aAHyB;AAItCC,yBAAS;AACLC,4BAAQ,kBADH;AAEL,oCAAgB;AAFX,iBAJ6B;AAQtCC,sBAAM,yBAAe;AACjBC,0BAAMC,SADW;AAEjB1B,8BAFiB;AAGjBa,gDAHiB;AAIjBC,gDAJiB;AAKjBC;AALiB,iBAAf;AARgC,aAA1C,EAgBKX,IAhBL,CAgBU;AAAA,uBAAKuB,EAAEC,IAAF,EAAL;AAAA,aAhBV,EAiBKxB,IAjBL,CAiBU,eAAO;AACT,oBAAIC,IAAInB,KAAR,EAAe;AACX2C,4BAAQ3C,KAAR,CACI,2CADJ,EAEImB,IAAInB,KAFR;AAIA,2BAAKY,QAAL,CAAc;AACVZ,+BAAOmB,IAAInB,KAAJ,IAAa,2BAAG,WAAH,CADV;AAEVC,yCAAiB;AAFP,qBAAd;AAIH,iBATD,MASO;AACH,2BAAKW,QAAL,CAAc;AACVZ,+BAAO,EADG;AAEVC,yCACI,2BAAG,4CAAH,IACA;AAJM,qBAAd;AAMA,2BAAKP,KAAL,CAAWkD,cAAX,CACI9B,IADJ,EAEIjB,WAFJ,EAGIC,WAHJ,EAII,OAAKS,eAJT,EAKI,OAAKC,gBALT;AAOH;AACJ,aA1CL,EA2CKqC,KA3CL,CA2CW,iBAAS;AACZF,wBAAQ3C,KAAR,CACI,2CADJ,EAEIA,KAFJ;AAIA,uBAAKY,QAAL,CAAc;AACVZ,2BAAOA,MAAM8C,OAAN,GAAgB9C,MAAM8C,OAAtB,GAAgC9C,KAD7B;AAEVC,qCAAiB;AAFP,iBAAd;AAIH,aApDL;AAqDH;;;iCAEQZ,C,EAAG;AAAA;;AACRA,cAAE0D,cAAF;AADQ,yBAE6B,KAAKpD,KAFlC;AAAA,gBAEAE,WAFA,UAEAA,WAFA;AAAA,gBAEaC,WAFb,UAEaA,WAFb;;AAGR,gBAAMgB,OAAO,KAAKpB,KAAL,CAAWsD,kBAAxB;AACA,gBAAMjC,WAAWhC,sBAAsB+B,IAAtB,EAA4BjB,WAA5B,CAAjB;AACA,iBAAKe,QAAL,CAAc;AACVX,iCACI,2BAAG,gDAAH,IAAuD;AAFjD,aAAd;AAIA,iBAAKgD,aAAL,CAAmBnC,IAAnB,EAAyBC,QAAzB,EAAmCG,IAAnC,CAAwC,eAAO;AAC3C,oBAAIC,GAAJ,EAAS;AACL,2BAAKP,QAAL,CAAc;AACVX,yCACI,2BAAG,kDAAH,IACA;AAHM,qBAAd;AAKA,2BAAKiD,sBAAL,CAA4BpC,IAA5B,EAAkCjB,WAAlC,EAA+CC,WAA/C;AACH,iBAPD,MAOO;AACH,2BAAKc,QAAL,CAAc;AACVZ,+BAAO,2BACH,wDADG,CADG;AAIVC,yCAAiB;AAJP,qBAAd;AAMH;AACJ,aAhBD;AAiBH;;;iCAEQ;AACL,gBAAI,CAACkD,QAAQC,GAAR,CAAYC,OAAjB,EAA0B;AACtB;AACA,uBACI;AAAA;AAAA,sBAAK,WAAU,KAAf;AACI;AAAA;AAAA,0BAAK,WAAU,QAAf;AAAyB,mDAAG,WAAH,CAAzB;AAAA;AAAA;AADJ,iBADJ;AAKH;AARI,gBASGL,kBATH,GAS0B,KAAKtD,KAT/B,CASGsD,kBATH;;AAUL,gBAAI,CAACA,kBAAL,EAAyB;AACrB,uBACI;AAAC,qCAAD;AAAA,sBAAS,MAAK,OAAd;AACI;AAAA;AAAA;AACK,mDACG,gEADH;AADL;AADJ,iBADJ;AASH;AApBI,0BA4BD,KAAKrD,KA5BJ;AAAA,gBAsBDE,WAtBC,WAsBDA,WAtBC;AAAA,gBAuBDE,KAvBC,WAuBDA,KAvBC;AAAA,gBAwBDC,KAxBC,WAwBDA,KAxBC;AAAA,gBAyBDC,eAzBC,WAyBDA,eAzBC;AAAA,gBA0BDL,UA1BC,WA0BDA,UA1BC;AAAA,gBA2BDM,OA3BC,WA2BDA,OA3BC;;AA6BL,gBAAMoD,mBACF,mBAAmB,CAACvD,KAAD,IAAU,CAACF,WAAX,GAAyB,WAAzB,GAAuC,EAA1D,CADJ;;AAGA,gBAAI0D,SAAS,IAAb;AACA,gBAAItD,eAAJ,EAAqB;AACjBsD,yBACI;AAAA;AAAA;AACI,kDAAC,0BAAD,IAAkB,MAAK,QAAvB,EAAgC,YAAhC,GADJ;AAAA;AAC+CtD;AAD/C,iBADJ;AAKH,aAND,MAMO;AACH,oBAAIC,OAAJ,EAAa;AACT;AACAsD,2BAAOC,QAAP,4BACIT,kBADJ;AAGH,iBALD,MAKO;AACHO,6BACI;AACI,kCAAU,CAACxD,KADf;AAEI,8BAAK,QAFT;AAGI,mCAAWuD,gBAHf;AAII,+BAAM;AAJV,sBADJ;AAQH;AACJ;AACD,gBAAMI,yBAAyBxD,WAAWD,oBAAoB,EAA9D;;AAEA,mBACI;AAAA;AAAA,kBAAK,WAAU,uBAAf;AACI;AAAA;AAAA,sBAAK,WAAU,KAAf;AACI;AAAA;AAAA,0BAAK,WAAU,gBAAf;AACI;AAAA;AAAA;AAAK,uDAAG,yCAAH;AAAL,yBADJ;AAEI;AAAA;AAAA;AACI,0CAAU,KAAKK,QADnB;AAEI,8CAAa,KAFjB;AAGI;AAHJ;AAKI;AAAA;AAAA,kCAAK,WAAWV,aAAa,OAAb,GAAuB,EAAvC;AACI;AAAA;AAAA;AACK,+DAAG,gBAAH,CADL;AAEI;AACI,8CAAK,MADT;AAEI,kDAAS,MAFb;AAGI,sDAAa,KAHjB;AAII,+CAAOoD;AAJX;AAFJ,iCADJ;AAUI;AAAA;AAAA,sCAAG,WAAU,WAAb;AAA0BpD;AAA1B;AAVJ,6BALJ;AAiBI,qEAjBJ;AAkBI;AAAA;AAAA;AACI;AAAA;AAAA;AACK,+DAAG,8BAAH,CADL;AAEI;AACI,8CAAK,UADT;AAEI,kDAAU8D,sBAFd;AAGI,sDAAa,KAHjB;AAII,+CAAO7D,WAJX;AAKI,kDAAU,KAAKQ;AALnB;AAFJ;AADJ,6BAlBJ;AA8BI,qEA9BJ;AA+BI,0DAAC,gCAAD;AACI,0CAAU,KAAKF,gBADnB;AAEI,0CAAUuD,sBAFd;AAGI,oDAAoB7D,YAAY6B,MAAZ,GAAqB;AAH7C,8BA/BJ;AAoCI;AAAA;AAAA,kCAAK,WAAU,OAAf;AAAwB1B;AAAxB,6BApCJ;AAqCI,qEArCJ;AAsCKuD;AAtCL;AAFJ;AADJ;AADJ,aADJ;AAiDH;;;EA5P6BI,gBAAMC,S,UAC7BC,S,GAAY;AACfb,wBAAoBc,oBAAUC,MADf;AAEfnB,oBAAgBkB,oBAAUE,IAAV,CAAeC;AAFhB,C;;;AA8PvBC,OAAOC,OAAP,GAAiB;AACbC,UAAM,wBADO;AAEbC,eAAW,yBACP,iBAAS;AACL,eAAO;AACHrB,gCAAoBrD,MAAM2E,QAAN,CAAeC,GAAf,CAAmB,iBAAnB;AADjB,SAAP;AAGH,KALM,EAMP;AAAA,eAAa;AACT3B,4BAAgB,wBACZI,kBADY,EAEZwB,YAFY,EAGZC,YAHY,EAIZC,OAJY,EAKZC,SALY,EAMX;AACDC,yBACI9F,mBAAmB8D,cAAnB,CAAkC;AAC9BI,0DAD8B;AAE9BwB,8CAF8B;AAG9BC,8CAH8B;AAI9BC,oCAJ8B;AAK9BC;AAL8B,iBAAlC,CADJ;AASAC,yBAAS/F,YAAYgG,MAAZ,CAAmB,EAAEC,MAAM,kBAAR,EAAnB,CAAT;AACH;AAlBQ,SAAb;AAAA,KANO,EA0BTrF,mBA1BS;AAFE,CAAjB","file":"RecoverAccountStep2.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport tt from 'counterpart';\nimport { PrivateKey } from '@steemit/steem-js/lib/auth/ecc';\nimport { api } from '@steemit/steem-js';\n\nimport * as userActions from 'app/redux/UserReducer';\nimport * as transactionActions from 'app/redux/TransactionReducer';\nimport GeneratedPasswordInput from 'app/components/elements/GeneratedPasswordInput';\nimport LoadingIndicator from 'app/components/elements/LoadingIndicator';\nimport Callout from 'app/components/elements/Callout';\n\nfunction passwordToOwnerPubKey(account_name, password) {\n    let pub_key;\n    try {\n        pub_key = PrivateKey.fromWif(password);\n    } catch (e) {\n        pub_key = PrivateKey.fromSeed(account_name + 'owner' + password);\n    }\n    return pub_key.toPublicKey().toString();\n}\n\nclass RecoverAccountStep2 extends React.Component {\n    static propTypes = {\n        account_to_recover: PropTypes.string,\n        recoverAccount: PropTypes.func.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            name_error: '',\n            oldPassword: '',\n            newPassword: '',\n            valid: false,\n            error: '',\n            progress_status: '',\n            success: false,\n        };\n        this.onPasswordChange = this.onPasswordChange.bind(this);\n        this.oldPasswordChange = this.oldPasswordChange.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n        this.onRecoverFailed = this.onRecoverFailed.bind(this);\n        this.onRecoverSuccess = this.onRecoverSuccess.bind(this);\n    }\n\n    oldPasswordChange(e) {\n        const oldPassword = e.target.value.trim();\n        this.setState({ oldPassword });\n    }\n\n    onPasswordChange(newPassword, valid) {\n        this.setState({ newPassword, valid });\n    }\n\n    onRecoverFailed(error) {\n        this.setState({\n            error: error.msg || error.toString(),\n            progress_status: '',\n        });\n    }\n\n    onRecoverSuccess() {\n        this.setState({ success: true, progress_status: '' });\n    }\n\n    checkOldOwner(name, oldOwner) {\n        return api.getOwnerHistoryAsync(name).then(history => {\n            const res = history.filter(a => {\n                const owner = a.previous_owner_authority.key_auths[0][0];\n                return owner === oldOwner;\n            });\n            return res.length > 0;\n        });\n    }\n\n    requestAccountRecovery(name, oldPassword, newPassword) {\n        const old_owner_key = passwordToOwnerPubKey(name, oldPassword);\n        const new_owner_key = passwordToOwnerPubKey(name, newPassword);\n        const new_owner_authority = {\n            weight_threshold: 1,\n            account_auths: [],\n            key_auths: [[new_owner_key, 1]],\n        };\n        fetch('/api/v1/request_account_recovery', {\n            method: 'post',\n            mode: 'no-cors',\n            credentials: 'same-origin',\n            headers: {\n                Accept: 'application/json',\n                'Content-type': 'application/json',\n            },\n            body: JSON.stringify({\n                csrf: $STM_csrf,\n                name,\n                old_owner_key,\n                new_owner_key,\n                new_owner_authority,\n            }),\n        })\n            .then(r => r.json())\n            .then(res => {\n                if (res.error) {\n                    console.error(\n                        'request_account_recovery server error (1)',\n                        res.error\n                    );\n                    this.setState({\n                        error: res.error || tt('g.unknown'),\n                        progress_status: '',\n                    });\n                } else {\n                    this.setState({\n                        error: '',\n                        progress_status:\n                            tt('recoveraccountstep1_jsx.recovering_account') +\n                            '..',\n                    });\n                    this.props.recoverAccount(\n                        name,\n                        oldPassword,\n                        newPassword,\n                        this.onRecoverFailed,\n                        this.onRecoverSuccess\n                    );\n                }\n            })\n            .catch(error => {\n                console.error(\n                    'request_account_recovery server error (2)',\n                    error\n                );\n                this.setState({\n                    error: error.message ? error.message : error,\n                    progress_status: '',\n                });\n            });\n    }\n\n    onSubmit(e) {\n        e.preventDefault();\n        const { oldPassword, newPassword } = this.state;\n        const name = this.props.account_to_recover;\n        const oldOwner = passwordToOwnerPubKey(name, oldPassword);\n        this.setState({\n            progress_status:\n                tt('recoveraccountstep1_jsx.checking_account_owner') + '..',\n        });\n        this.checkOldOwner(name, oldOwner).then(res => {\n            if (res) {\n                this.setState({\n                    progress_status:\n                        tt('recoveraccountstep1_jsx.sending_recovery_request') +\n                        '..',\n                });\n                this.requestAccountRecovery(name, oldPassword, newPassword);\n            } else {\n                this.setState({\n                    error: tt(\n                        'recoveraccountstep1_jsx.cant_confirm_account_ownership'\n                    ),\n                    progress_status: '',\n                });\n            }\n        });\n    }\n\n    render() {\n        if (!process.env.BROWSER) {\n            // don't render this page on the server\n            return (\n                <div className=\"row\">\n                    <div className=\"column\">{tt('g.loading')}..</div>\n                </div>\n            );\n        }\n        const { account_to_recover } = this.props;\n        if (!account_to_recover) {\n            return (\n                <Callout type=\"error\">\n                    <span>\n                        {tt(\n                            'recoveraccountstep1_jsx.account_recovery_request_not_confirmed'\n                        )}\n                    </span>\n                </Callout>\n            );\n        }\n        const {\n            oldPassword,\n            valid,\n            error,\n            progress_status,\n            name_error,\n            success,\n        } = this.state;\n        const submit_btn_class =\n            'button action' + (!valid || !oldPassword ? ' disabled' : '');\n\n        let submit = null;\n        if (progress_status) {\n            submit = (\n                <span>\n                    <LoadingIndicator type=\"circle\" inline /> {progress_status}\n                </span>\n            );\n        } else {\n            if (success) {\n                // submit = <h4>Congratulations! Your account has been recovered. Please login using your new password.</h4>;\n                window.location = `/login.html#account=${\n                    account_to_recover\n                }&msg=accountrecovered`;\n            } else {\n                submit = (\n                    <input\n                        disabled={!valid}\n                        type=\"submit\"\n                        className={submit_btn_class}\n                        value=\"Submit\"\n                    />\n                );\n            }\n        }\n        const disable_password_input = success || progress_status !== '';\n\n        return (\n            <div className=\"RestoreAccount SignUp\">\n                <div className=\"row\">\n                    <div className=\"column large-6\">\n                        <h2>{tt('recoveraccountstep1_jsx.recover_account')}</h2>\n                        <form\n                            onSubmit={this.onSubmit}\n                            autoComplete=\"off\"\n                            noValidate\n                        >\n                            <div className={name_error ? 'error' : ''}>\n                                <label>\n                                    {tt('g.account_name')}\n                                    <input\n                                        type=\"text\"\n                                        disabled=\"true\"\n                                        autoComplete=\"off\"\n                                        value={account_to_recover}\n                                    />\n                                </label>\n                                <p className=\"help-text\">{name_error}</p>\n                            </div>\n                            <br />\n                            <div>\n                                <label>\n                                    {tt('postfull_jsx.recent_password')}\n                                    <input\n                                        type=\"password\"\n                                        disabled={disable_password_input}\n                                        autoComplete=\"off\"\n                                        value={oldPassword}\n                                        onChange={this.oldPasswordChange}\n                                    />\n                                </label>\n                            </div>\n                            <br />\n                            <GeneratedPasswordInput\n                                onChange={this.onPasswordChange}\n                                disabled={disable_password_input}\n                                showPasswordString={oldPassword.length > 0}\n                            />\n                            <div className=\"error\">{error}</div>\n                            <br />\n                            {submit}\n                        </form>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nmodule.exports = {\n    path: 'recover_account_step_2',\n    component: connect(\n        state => {\n            return {\n                account_to_recover: state.offchain.get('recover_account'),\n            };\n        },\n        dispatch => ({\n            recoverAccount: (\n                account_to_recover,\n                old_password,\n                new_password,\n                onError,\n                onSuccess\n            ) => {\n                dispatch(\n                    transactionActions.recoverAccount({\n                        account_to_recover,\n                        old_password,\n                        new_password,\n                        onError,\n                        onSuccess,\n                    })\n                );\n                dispatch(userActions.logout({ type: 'account_recovery' }));\n            },\n        })\n    )(RecoverAccountStep2),\n};\n"]}