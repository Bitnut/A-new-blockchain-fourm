{"version":3,"sources":["../../../../src/app/components/pages/Post.jsx"],"names":["Post","toggleNegativeReplies","setState","showNegativeComments","state","e","preventDefault","onHideComment","commentHidden","showAnywayClick","showAnyway","showSignUp","window","location","SIGNUP_URL","props","content","sortOrder","post","route_params","routeParams","username","slug","dis","get","pinned","toJS","gray","marginBottom","replies","commentLimit","global","undefined","length","console","log","slice","positiveComments","map","reply","negativeGroup","sort_orders","sort_labels","sort_menu","sort_label","selflink","o","push","value","label","link","emptyPost","fontWeight","shouldSeeAds","adSlots","slot_id","display","React","Component","propTypes","PropTypes","object","isRequired","string","emptySet","ownProps","current_user","user","ignoring","key","getIn","router","getCurrentLocation","query","sort","app"],"mappings":"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","file":"Post.js","sourcesContent":["import React from 'react';\n// import ReactMarkdown from 'react-markdown';\nimport PropTypes from 'prop-types';\nimport Comment from 'app/components/cards/Comment';\nimport PostFull from 'app/components/cards/PostFull';\nimport { connect } from 'react-redux';\n\nimport { sortComments } from 'app/components/cards/Comment';\n// import { Link } from 'react-router';\nimport DropdownMenu from 'app/components/elements/DropdownMenu';\nimport GoogleAd from 'app/components/elements/GoogleAd';\nimport { Set } from 'immutable';\nimport tt from 'counterpart';\nimport shouldComponentUpdate from 'app/utils/shouldComponentUpdate';\nimport { serverApiRecordEvent } from 'app/utils/ServerApiClient';\nimport { INVEST_TOKEN_UPPERCASE } from 'app/client_config';\nimport { SIGNUP_URL } from 'shared/constants';\n\nimport { isLoggedIn } from 'app/utils/UserUtil';\n\nclass Post extends React.Component {\n    static propTypes = {\n        content: PropTypes.object.isRequired,\n        post: PropTypes.string,\n        routeParams: PropTypes.object,\n        sortOrder: PropTypes.string,\n    };\n    constructor() {\n        super();\n        this.state = {\n            showNegativeComments: false,\n        };\n        this.showSignUp = () => {\n            serverApiRecordEvent('SignUp', 'Post Promo');\n            window.location = SIGNUP_URL;\n        };\n    }\n\n    toggleNegativeReplies = e => {\n        this.setState({\n            showNegativeComments: !this.state.showNegativeComments,\n        });\n        e.preventDefault();\n    };\n\n    onHideComment = () => {\n        this.setState({ commentHidden: true });\n    };\n\n    showAnywayClick = () => {\n        this.setState({ showAnyway: true });\n    };\n\n    render() {\n        const { showSignUp } = this;\n        const { content, sortOrder } = this.props;\n        const { showNegativeComments, commentHidden, showAnyway } = this.state;\n        let post = this.props.post;\n        if (!post) {\n            const route_params = this.props.routeParams;\n            post = route_params.username + '/' + route_params.slug;\n        }\n        const dis = content.get(post);\n\n        if (!dis) return null;\n\n        // A post should be hidden if it is not pinned, is not told to \"show\n        // anyway\", and is designated \"gray\".\n        const pinned = dis.get('pinned');\n        if (!pinned && !showAnyway) {\n            const { gray } = dis.get('stats').toJS();\n            if (gray) {\n                return (\n                    <div className=\"Post\">\n                        <div className=\"row\">\n                            <div className=\"column\">\n                                <div className=\"PostFull\">\n                                    <p onClick={this.showAnywayClick}>\n                                        {tt(\n                                            'promote_post_jsx.this_post_was_hidden_due_to_low_ratings'\n                                        )}.{' '}\n                                        <button\n                                            style={{ marginBottom: 0 }}\n                                            className=\"button hollow tiny float-right\"\n                                            onClick={this.showAnywayClick}\n                                        >\n                                            {tt('g.show')}\n                                        </button>\n                                    </p>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                );\n            }\n        }\n\n        let replies = dis.get('replies').toJS();\n\n        sortComments(content, replies, sortOrder);\n\n        // Don't render too many comments on server-side\n        const commentLimit = 100;\n        if (global['process'] !== undefined && replies.length > commentLimit) {\n            console.log(\n                `Too many comments, ${replies.length - commentLimit} omitted.`\n            );\n            replies = replies.slice(0, commentLimit);\n        }\n\n        const positiveComments = replies.map(reply => (\n            <Comment\n                root\n                key={post + reply}\n                content={reply}\n                cont={content}\n                sort_order={sortOrder}\n                showNegativeComments={showNegativeComments}\n                onHide={this.onHideComment}\n            />\n        ));\n\n        const negativeGroup = commentHidden && (\n            <div className=\"hentry Comment root Comment__negative_group\">\n                <p>\n                    {showNegativeComments\n                        ? tt('post_jsx.now_showing_comments_with_low_ratings')\n                        : tt(\n                              'post_jsx.comments_were_hidden_due_to_low_ratings'\n                          )}.{' '}\n                    <button\n                        className=\"button hollow tiny float-right\"\n                        onClick={e => this.toggleNegativeReplies(e)}\n                    >\n                        {showNegativeComments ? tt('g.hide') : tt('g.show')}\n                    </button>\n                </p>\n            </div>\n        );\n\n        let sort_orders = ['trending', 'votes', 'new', 'author_reputation'];\n        let sort_labels = [\n            tt('post_jsx.comment_sort_order.trending'),\n            tt('post_jsx.comment_sort_order.votes'),\n            tt('post_jsx.comment_sort_order.age'),\n            tt('post_jsx.comment_sort_order.reputation'),\n        ];\n        let sort_menu = [];\n        let sort_label;\n        let selflink = `/${dis.get('category')}/@${post}`;\n        for (let o = 0; o < sort_orders.length; ++o) {\n            if (sort_orders[o] == sortOrder) sort_label = sort_labels[o];\n            sort_menu.push({\n                value: sort_orders[o],\n                label: sort_labels[o],\n                link: selflink + '?sort=' + sort_orders[o] + '#comments',\n            });\n        }\n        const emptyPost =\n            dis.get('created') === '1970-01-01T00:00:00' &&\n            dis.get('body') === '';\n        if (emptyPost)\n            return (\n                <center>\n                    <div className=\"NotFound float-center\">\n                        <div>\n                            <h4 className=\"NotFound__header\">\n                                Sorry! This page doesnt exist.\n                            </h4>\n                            <p>\n                                Not to worry. You can head back to{' '}\n                                <a style={{ fontWeight: 800 }} href=\"/\">\n                                    our homepage\n                                </a>, or check out some great posts.\n                            </p>\n                            <ul className=\"NotFound__menu\">\n                                <li>\n                                    <a href=\"/created\">new posts</a>\n                                </li>\n                                <li>\n                                    <a href=\"/hot\">hot posts</a>\n                                </li>\n                                <li>\n                                    <a href=\"/trending\">trending posts</a>\n                                </li>\n                                <li>\n                                    <a href=\"/promoted\">promoted posts</a>\n                                </li>\n                                <li>\n                                    <a href=\"/active\">active posts</a>\n                                </li>\n                            </ul>\n                        </div>\n                    </div>\n                </center>\n            );\n\n        return (\n            <div className=\"Post\">\n                <div className=\"row\">\n                    <div className=\"column\">\n                        <PostFull post={post} cont={content} />\n                    </div>\n                </div>\n                {!isLoggedIn() && (\n                    <div className=\"row\">\n                        <div className=\"column\">\n                            <div className=\"Post__promo\">\n                                {tt(\n                                    'g.next_7_strings_single_block.authors_get_paid_when_people_like_you_upvote_their_post'\n                                )}.\n                                <br />\n                                {tt(\n                                    'g.next_7_strings_single_block.if_you_enjoyed_what_you_read_earn_amount'\n                                )}\n                                <br />\n                                <button\n                                    type=\"button\"\n                                    className=\"button e-btn\"\n                                    onClick={showSignUp}\n                                >\n                                    {tt('loginform_jsx.sign_up_get_steem')}\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                )}\n                <div id=\"#comments\" className=\"Post_comments row hfeed\">\n                    <div className=\"column large-12\">\n                        <div className=\"Post_comments__content\">\n                            {positiveComments.length ? (\n                                <div className=\"Post__comments_sort_order float-right\">\n                                    {tt('post_jsx.sort_order')}: &nbsp;\n                                    <DropdownMenu\n                                        items={sort_menu}\n                                        el=\"li\"\n                                        selected={sort_label}\n                                        position=\"left\"\n                                    />\n                                </div>\n                            ) : null}\n                            {positiveComments}\n                            {negativeGroup}\n                        </div>\n                    </div>\n                </div>\n                {this.props.shouldSeeAds ? (\n                    <div className=\"Post_footer__ad\">\n                        <GoogleAd\n                            name=\"post-footer-1\"\n                            format=\"auto\"\n                            slot={this.props.adSlots['post_footer_1'].slot_id}\n                            style={{ display: 'block' }}\n                            fullWidthResponsive=\"true\"\n                        />\n                    </div>\n                ) : null}\n            </div>\n        );\n    }\n}\n\nconst emptySet = Set();\n\nexport default connect((state, ownProps) => {\n    const current_user = state.user.get('current');\n    let ignoring;\n    if (current_user) {\n        const key = [\n            'follow',\n            'getFollowingAsync',\n            current_user.get('username'),\n            'ignore_result',\n        ];\n        ignoring = state.global.getIn(key, emptySet);\n    }\n    return {\n        content: state.global.get('content'),\n        ignoring,\n        sortOrder:\n            ownProps.router.getCurrentLocation().query.sort || 'trending',\n        shouldSeeAds: state.app.getIn(['googleAds', 'shouldSeeAds']),\n        adSlots: state.app.getIn(['googleAds', 'adSlots']).toJS(),\n    };\n})(Post);\n"]}