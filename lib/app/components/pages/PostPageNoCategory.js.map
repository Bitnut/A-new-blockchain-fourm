{"version":3,"sources":["../../../../src/app/components/pages/PostPageNoCategory.jsx"],"names":["PostWrapper","state","loading","route_params","props","routeParams","post","username","slug","dis","content","get","getContent","author","permlink","then","browserHistory","replace","category","catch","setState","np","ns","React","Component","StoreWrapped","global","resolve","reject","dispatch","fetchDataSagaActions","payload","module","exports","path","component"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;AACA;;AACA;;AACA;;;;AACA;;;;;;IAEMA,W;;;AACF,2BAAc;AAAA;;AAAA;;AAGV,cAAKC,KAAL,GAAa;AACTC,qBAAS;AADA,SAAb;AAHU;AAMb;;;;6CAEoB;AAAA;;AACjB,gBAAMC,eAAe,KAAKC,KAAL,CAAWC,WAAhC;AACA,gBAAMC,OAAOH,aAAaI,QAAb,GAAwB,GAAxB,GAA8BJ,aAAaK,IAAxD;AACA,gBAAMC,MAAM,KAAKL,KAAL,CAAWM,OAAX,CAAmBC,GAAnB,CAAuBL,IAAvB,CAAZ;AACA,gBAAI,CAACG,GAAL,EAAU;AACN,qBAAKL,KAAL,CACKQ,UADL,CACgB;AACRC,4BAAQV,aAAaI,QADb;AAERO,8BAAUX,aAAaK;AAFf,iBADhB,EAKKO,IALL,CAKU,mBAAW;AACb,wBAAIL,OAAJ,EAAa;AACTM,oDAAeC,OAAf,OAA2BP,QAAQQ,QAAnC,UAAgDZ,IAAhD;AACH;AACJ,iBATL,EAUKa,KAVL,CAUW,YAAM;AACT,2BAAKC,QAAL,CAAc,EAAElB,SAAS,KAAX,EAAd;AACH,iBAZL;AAaH,aAdD,MAcO,IAAIO,IAAIE,GAAJ,CAAQ,IAAR,MAAkB,OAAtB,EAA+B;AAClC;AACA,qBAAKS,QAAL,CAAc,EAAElB,SAAS,KAAX,EAAd;AACH,aAHM,MAGA;AACH,oBAAIc,2BAAJ,EACIA,4BAAeC,OAAf,OAA2BR,IAAIE,GAAJ,CAAQ,UAAR,CAA3B,UAAmDL,IAAnD;AACP;AACJ;;;8CAEqBe,E,EAAIC,E,EAAI;AAC1B,mBAAOA,GAAGpB,OAAH,KAAe,KAAKD,KAAL,CAAWC,OAAjC;AACH;;;iCAEQ;AACL,mBACI;AAAA;AAAA;AACK,qBAAKD,KAAL,CAAWC,OAAX,GACG;AAAA;AAAA;AACI,kDAAC,0BAAD,IAAkB,MAAK,QAAvB;AADJ,iBADH,GAKG;AAAA;AAAA,sBAAK,WAAU,uBAAf;AACI;AAAA;AAAA,0BAAG,MAAK,GAAR;AACI,sDAAC,kBAAD,IAAU,MAAK,KAAf,EAAqB,OAAM,OAA3B,EAAmC,QAAO,OAA1C;AADJ;AADJ;AANR,aADJ;AAeH;;;EAxDqBqB,gBAAMC,S;;AA2DhC,IAAMC,eAAe,yBACjB,iBAAS;AACL,WAAO;AACHf,iBAAST,MAAMyB,MAAN,CAAaf,GAAb,CAAiB,SAAjB;AADN,KAAP;AAGH,CALgB,EAMjB;AAAA,WAAa;AACTC,oBAAY;AAAA,mBACR,sBAAY,UAACe,OAAD,EAAUC,MAAV,EAAqB;AAC7BC,yBACIC,uBAAqBlB,UAArB,4BACOmB,OADP;AAEIJ,oCAFJ;AAGIC;AAHJ,mBADJ;AAOH,aARD,CADQ;AAAA;AADH,KAAb;AAAA,CANiB,EAkBnB5B,WAlBmB,CAArB;;AAoBAgC,OAAOC,OAAP,GAAiB;AACbC,UAAM,mBADO;AAEbC,eAAWV;AAFE,CAAjB","file":"PostPageNoCategory.js","sourcesContent":["import React from 'react';\nimport { browserHistory } from 'react-router';\nimport { connect } from 'react-redux';\nimport { actions as fetchDataSagaActions } from 'app/redux/FetchDataSaga';\nimport LoadingIndicator from 'app/components/elements/LoadingIndicator';\nimport SvgImage from 'app/components/elements/SvgImage';\n\nclass PostWrapper extends React.Component {\n    constructor() {\n        super();\n\n        this.state = {\n            loading: true,\n        };\n    }\n\n    componentWillMount() {\n        const route_params = this.props.routeParams;\n        const post = route_params.username + '/' + route_params.slug;\n        const dis = this.props.content.get(post);\n        if (!dis) {\n            this.props\n                .getContent({\n                    author: route_params.username,\n                    permlink: route_params.slug,\n                })\n                .then(content => {\n                    if (content) {\n                        browserHistory.replace(`/${content.category}/@${post}`);\n                    }\n                })\n                .catch(() => {\n                    this.setState({ loading: false });\n                });\n        } else if (dis.get('id') === '0.0.0') {\n            // non-existing post\n            this.setState({ loading: false });\n        } else {\n            if (browserHistory)\n                browserHistory.replace(`/${dis.get('category')}/@${post}`);\n        }\n    }\n\n    shouldComponentUpdate(np, ns) {\n        return ns.loading !== this.state.loading;\n    }\n\n    render() {\n        return (\n            <div>\n                {this.state.loading ? (\n                    <center>\n                        <LoadingIndicator type=\"circle\" />\n                    </center>\n                ) : (\n                    <div className=\"NotFound float-center\">\n                        <a href=\"/\">\n                            <SvgImage name=\"404\" width=\"640px\" height=\"480px\" />\n                        </a>\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nconst StoreWrapped = connect(\n    state => {\n        return {\n            content: state.global.get('content'),\n        };\n    },\n    dispatch => ({\n        getContent: payload =>\n            new Promise((resolve, reject) => {\n                dispatch(\n                    fetchDataSagaActions.getContent({\n                        ...payload,\n                        resolve,\n                        reject,\n                    })\n                );\n            }),\n    })\n)(PostWrapper);\n\nmodule.exports = {\n    path: '/@:username/:slug',\n    component: StoreWrapped,\n};\n"]}