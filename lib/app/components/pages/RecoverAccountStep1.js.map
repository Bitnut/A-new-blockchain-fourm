{"version":3,"sources":["../../../../src/app/components/pages/RecoverAccountStep1.jsx"],"names":["email_regex","passwordToOwnerPubKey","account_name","password","pub_key","PrivateKey","fromWif","e","fromSeed","toPublicKey","toString","RecoverAccountStep1","props","state","name","name_error","email","email_error","error","progress_status","value","valid","show_social_login","email_submitted","onNameChange","bind","onEmailChange","onPasswordsChange","onSubmit","onSubmitEmail","target","trim","toLowerCase","validateAccountName","setState","test","api","getAccountsAsync","then","res","length","account","ownerUpdate","last_owner_update","ownerUpdateTime","Date","getTime","THIRTY_DAYS_AGO","now","Math","max","constants","JULY_14_HACK","oldOwner","getOwnerHistoryAsync","history","filter","owner","a","previous_owner_authority","key_auths","oldPassword","preventDefault","validateAccountOwner","result","owner_key","fetch","method","mode","credentials","headers","Accept","body","csrf","$STM_csrf","contact_email","r","json","status","SUPPORT_EMAIL","catch","console","message","submit_btn_class","show_account_and_passwords","APP_URL","APP_DOMAIN","APP_NAME","React","Component","propTypes","module","exports","path","component"],"mappings":"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","file":"RecoverAccountStep1.js","sourcesContent":["import React from 'react';\nimport SvgImage from 'app/components/elements/SvgImage';\nimport LoadingIndicator from 'app/components/elements/LoadingIndicator';\nimport PasswordInput from 'app/components/elements/PasswordInput';\nimport constants from 'app/redux/constants';\nimport tt from 'counterpart';\nimport { FormattedHTMLMessage } from 'app/Translator';\nimport { APP_DOMAIN, APP_NAME, SUPPORT_EMAIL } from 'app/client_config';\nimport { PrivateKey } from '@steemit/steem-js/lib/auth/ecc';\nimport { api } from '@steemit/steem-js';\n\nconst email_regex = /^([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x22([^\\x0d\\x22\\x5c\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x22)(\\x2e([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x22([^\\x0d\\x22\\x5c\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x22))*\\x40([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x5b([^\\x0d\\x5b-\\x5d\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x5d)(\\x2e([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x5b([^\\x0d\\x5b-\\x5d\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x5d))*$/;\n\nfunction passwordToOwnerPubKey(account_name, password) {\n    let pub_key;\n    try {\n        pub_key = PrivateKey.fromWif(password);\n    } catch (e) {\n        pub_key = PrivateKey.fromSeed(account_name + 'owner' + password);\n    }\n    return pub_key.toPublicKey().toString();\n}\n\nclass RecoverAccountStep1 extends React.Component {\n    static propTypes = {};\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: '',\n            name_error: '',\n            email: '',\n            email_error: '',\n            error: '',\n            progress_status: '',\n            password: { value: '', valid: false },\n            show_social_login: false,\n            email_submitted: false,\n        };\n        this.onNameChange = this.onNameChange.bind(this);\n        this.onEmailChange = this.onEmailChange.bind(this);\n        this.onPasswordsChange = this.onPasswordsChange.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n        this.onSubmitEmail = this.onSubmitEmail.bind(this);\n    }\n\n    onNameChange(e) {\n        const name = e.target.value.trim().toLowerCase();\n        this.validateAccountName(name);\n        this.setState({ name, error: '' });\n    }\n\n    onEmailChange(e) {\n        const email = e.target.value.trim().toLowerCase();\n        let email_error = '';\n        if (!email_regex.test(email.toLowerCase()))\n            email_error = tt('recoveraccountstep1_jsx.not_valid');\n        this.setState({ email, email_error });\n    }\n\n    validateAccountName(name) {\n        if (!name) return;\n        api.getAccountsAsync([name]).then(res => {\n            this.setState({\n                name_error:\n                    !res || res.length === 0\n                        ? tt(\n                              'recoveraccountstep1_jsx.account_name_is_not_found'\n                          )\n                        : '',\n            });\n            if (res.length) {\n                const [account] = res;\n                // if your last owner key update is prior to July 14th then the old key will not be able to recover\n                const ownerUpdate = /Z$/.test(account.last_owner_update)\n                    ? account.last_owner_update\n                    : account.last_owner_update + 'Z';\n                const ownerUpdateTime = new Date(ownerUpdate).getTime();\n                const THIRTY_DAYS_AGO = new Date(\n                    Date.now() - 30 * 24 * 60 * 60 * 1000\n                ).getTime();\n                if (\n                    ownerUpdateTime <\n                    Math.max(THIRTY_DAYS_AGO, constants.JULY_14_HACK)\n                )\n                    this.setState({\n                        name_error: tt(\n                            'recoveraccountstep1_jsx.unable_to_recover_account_not_change_ownership_recently'\n                        ),\n                    });\n            }\n        });\n    }\n\n    validateAccountOwner(name) {\n        const oldOwner = passwordToOwnerPubKey(name, this.state.password.value);\n        return api.getOwnerHistoryAsync(name).then(history => {\n            const res = history.filter(a => {\n                const owner = a.previous_owner_authority.key_auths[0][0];\n                return owner === oldOwner;\n            });\n            return res.length > 0;\n        });\n    }\n\n    onPasswordsChange({ oldPassword, valid }) {\n        this.setState({ password: { value: oldPassword, valid }, error: '' });\n    }\n\n    onSubmit(e) {\n        e.preventDefault();\n        this.validateAccountOwner(this.state.name).then(result => {\n            if (result) {\n                this.setState({ show_social_login: true });\n            } else\n                this.setState({\n                    error: tt(\n                        'recoveraccountstep1_jsx.password_not_used_in_last_days'\n                    ),\n                });\n        });\n    }\n\n    onSubmitEmail(e) {\n        e.preventDefault();\n        const { name, password } = this.state;\n        const owner_key = passwordToOwnerPubKey(name, password.value);\n        fetch('/api/v1/initiate_account_recovery_with_email', {\n            method: 'post',\n            mode: 'no-cors',\n            credentials: 'same-origin',\n            headers: {\n                Accept: 'application/json',\n                'Content-type': 'application/json',\n            },\n            body: JSON.stringify({\n                csrf: $STM_csrf,\n                contact_email: this.state.email,\n                account_name: name,\n                owner_key,\n            }),\n        })\n            .then(r => r.json())\n            .then(res => {\n                if (res.error) {\n                    this.setState({ email_error: res.error || 'Unknown' });\n                } else {\n                    if (res.status === 'ok') {\n                        this.setState({ email_submitted: true });\n                    }\n                    if (res.status === 'duplicate') {\n                        this.setState({\n                            email_error: tt(\n                                'recoveraccountstep1_jsx.request_already_submitted_contact_support',\n                                { SUPPORT_EMAIL }\n                            ),\n                        });\n                    }\n                }\n            })\n            .catch(error => {\n                console.error(\n                    'request_account_recovery server error (2)',\n                    error\n                );\n                this.setState({\n                    email_error: error.message ? error.message : error,\n                });\n            });\n    }\n\n    render() {\n        const {\n            name,\n            name_error,\n            email,\n            email_error,\n            error,\n            progress_status,\n            password,\n            show_social_login,\n            email_submitted,\n        } = this.state;\n        const owner_key = passwordToOwnerPubKey(name, password.value);\n        const valid = name && !name_error && password.valid;\n        const submit_btn_class = 'button action' + (!valid ? ' disabled' : '');\n        const show_account_and_passwords =\n            !email_submitted && !show_social_login;\n        return (\n            <div className=\"RestoreAccount SignUp\">\n                {show_account_and_passwords && (\n                    <div className=\"row\">\n                        <div className=\"column large-4\">\n                            <h2>{tt('navigation.stolen_account_recovery')}</h2>\n                            <p>\n                                {tt(\n                                    'recoveraccountstep1_jsx.recover_account_intro',\n                                    { APP_URL: APP_DOMAIN, APP_NAME }\n                                )}\n                            </p>\n                            <form onSubmit={this.onSubmit} noValidate>\n                                <div className={name_error ? 'error' : ''}>\n                                    <label>\n                                        {tt('g.account_name')}\n                                        <input\n                                            type=\"text\"\n                                            name=\"name\"\n                                            autoComplete=\"off\"\n                                            onChange={this.onNameChange}\n                                            value={name}\n                                        />\n                                    </label>\n                                    <p className=\"error\">{name_error}</p>\n                                </div>\n                                <PasswordInput\n                                    passwordLabel={tt('g.recent_password')}\n                                    onChange={this.onPasswordsChange}\n                                />\n                                <br />\n                                <div className=\"error\">{error}</div>\n                                {progress_status ? (\n                                    <span>\n                                        <LoadingIndicator\n                                            type=\"circle\"\n                                            inline\n                                        />{' '}\n                                        {progress_status}\n                                    </span>\n                                ) : (\n                                    <input\n                                        disabled={!valid}\n                                        type=\"submit\"\n                                        className={submit_btn_class}\n                                        value={tt(\n                                            'recoveraccountstep1_jsx.begin_recovery'\n                                        )}\n                                    />\n                                )}\n                            </form>\n                        </div>\n                    </div>\n                )}\n\n                {show_social_login && (\n                    <div className=\"row\">\n                        <div className=\"column large-4\">\n                            {email_submitted ? (\n                                tt(\n                                    'recoveraccountstep1_jsx.thanks_for_submitting_request_for_account_recovery',\n                                    { APP_NAME }\n                                )\n                            ) : (\n                                <form onSubmit={this.onSubmitEmail} noValidate>\n                                    <p>\n                                        {tt(\n                                            'recoveraccountstep1_jsx.enter_email_toverify_identity'\n                                        )}\n                                    </p>\n                                    <div\n                                        className={\n                                            email_error\n                                                ? 'column large-4 shrink error'\n                                                : 'column large-4 shrink'\n                                        }\n                                    >\n                                        <label>\n                                            {tt('g.email')}\n                                            <input\n                                                type=\"text\"\n                                                name=\"email\"\n                                                autoComplete=\"off\"\n                                                onChange={this.onEmailChange}\n                                                value={email}\n                                            />\n                                        </label>\n                                        <p className=\"error\">{email_error}</p>\n                                        <input\n                                            type=\"submit\"\n                                            disabled={email_error || !email}\n                                            className=\"button hollow\"\n                                            value={tt(\n                                                'recoveraccountstep1_jsx.continue_with_email'\n                                            )}\n                                        />\n                                    </div>\n                                </form>\n                            )}\n                        </div>\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nmodule.exports = {\n    path: 'recover_account_step_1',\n    component: RecoverAccountStep1,\n};\n"]}