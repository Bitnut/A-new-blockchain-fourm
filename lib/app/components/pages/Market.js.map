{"version":3,"sources":["../../../../src/app/components/pages/Market.jsx"],"names":["transactionActions","appActions","marketActions","Market","props","shouldComponentUpdate","nextProps","nextState","user","reload","buy_disabled","state","sell_disabled","buy_price_warning","sell_price_warning","open_orders_sort","tc","ticker","latest","sbd_volume","bc","orderbook","length","oc","open_orders","undefined","buySteem","e","preventDefault","placeOrder","amount_to_sell","parseFloat","ReactDOM","findDOMNode","refs","buySteem_total","value","min_to_receive","buySteem_amount","price","toFixed","lowest_ask","DEBT_TICKER","LIQUID_TICKER","CURRENCY_SIGN","notify","msg","sellSteem","sellSteem_total","sellSteem_amount","highest_bid","cancelOrderClick","orderid","cancelOrder","setFormPrice","p","sellSteem_price","buySteem_price","samount","bamount","validateBuySteem","validateSellSteem","percentDiff","marketPrice","userPrice","amount","total","valid","setState","handleToggleOpenOrdersSort","column","dataType","toggleOpenOrdersSort","np","percent_change","feed_price","base","feed","get","quote","split","normalizeOrders","orders","bids","asks","reduce","out","side","map","Order","o","aggOrders","buff","last","getStringPrice","add","push","account","toJS","open_orders_table","rows","created","replace","type","steem","sbd","DEBT_TOKEN_SHORT","activeClass","dir","LIQUID_TOKEN","trade_history_table","trades","norm","TradeHistory","t","pct_change","sbd_balance","balance","LIQUID_TOKEN_UPPERCASE","history","shouldSeeAds","adSlots","slot_id","display","React","Component","propTypes","PropTypes","object","array","instanceOf","Map","func","isRequired","string","DEFAULT_EXPIRE","Math","floor","Date","now","module","exports","path","component","username","app","getIn","market","process","env","BROWSER","global","dispatch","addNotification","key","message","dismissAfter","console","log","updateMarket","owner","successCallback","confirm","order_id","successMessage","broadcastOperation","operation","effectivePrice","priceWarning","fill_or_kill","expiration","String","isSell","indexOf","confirmStr","order","warning","warning_args"],"mappings":"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","file":"Market.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\nimport { connect } from 'react-redux';\n//import Highcharts from 'highcharts';\nimport classNames from 'classnames';\nimport { Map } from 'immutable';\n\nimport * as transactionActions from 'app/redux/TransactionReducer';\nimport * as appActions from 'app/redux/AppReducer';\nimport * as marketActions from 'app/redux/MarketReducer';\nimport TransactionError from 'app/components/elements/TransactionError';\nimport DepthChart from 'app/components/elements/DepthChart';\nimport Orderbook from 'app/components/elements/Orderbook';\nimport OrderHistory from 'app/components/elements/OrderHistory';\nimport GoogleAd from 'app/components/elements/GoogleAd';\nimport { Order, TradeHistory } from 'app/utils/MarketClasses';\nimport { roundUp, roundDown } from 'app/utils/MarketUtils';\nimport tt from 'counterpart';\nimport {\n    LIQUID_TOKEN,\n    LIQUID_TOKEN_UPPERCASE,\n    DEBT_TOKEN_SHORT,\n    CURRENCY_SIGN,\n    LIQUID_TICKER,\n    DEBT_TICKER,\n} from 'app/client_config';\n\nclass Market extends React.Component {\n    static propTypes = {\n        orderbook: PropTypes.object,\n        open_orders: PropTypes.array,\n        open_orders_sort: PropTypes.instanceOf(Map),\n        ticker: PropTypes.object,\n        // redux PropTypes\n        placeOrder: PropTypes.func.isRequired,\n        user: PropTypes.string,\n        feed: PropTypes.instanceOf(Map),\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            buy_disabled: true,\n            sell_disabled: true,\n            buy_price_warning: false,\n            sell_price_warning: false,\n        };\n    }\n\n    componentWillReceiveProps(np) {\n        if (!this.props.ticker && np.ticker) {\n            const { lowest_ask, highest_bid } = np.ticker;\n            if (this.refs.buySteem_price)\n                this.refs.buySteem_price.value = parseFloat(lowest_ask).toFixed(\n                    6\n                );\n            if (this.refs.sellSteem_price)\n                this.refs.sellSteem_price.value = parseFloat(\n                    highest_bid\n                ).toFixed(6);\n        }\n    }\n\n    shouldComponentUpdate = (nextProps, nextState) => {\n        if (this.props.user !== nextProps.user && nextProps.user) {\n            this.props.reload(nextProps.user);\n        }\n\n        if (\n            nextState.buy_disabled != this.state.buy_disabled ||\n            nextState.sell_disabled != this.state.sell_disabled\n        ) {\n            return true;\n        }\n\n        if (\n            nextState.buy_price_warning != this.state.buy_price_warning ||\n            nextState.sell_price_warning != this.state.sell_price_warning\n        ) {\n            return true;\n        }\n\n        if (nextState.open_orders_sort !== this.props.open_orders_sort) {\n            return true;\n        }\n\n        let tc =\n            typeof this.props.ticker == 'undefined' ||\n            this.props.ticker.latest !== nextProps.ticker.latest ||\n            this.props.ticker.sbd_volume !== nextProps.ticker.sbd_volume;\n\n        let bc =\n            typeof this.props.orderbook == 'undefined' ||\n            this.props.orderbook['asks'].length !=\n                nextProps.orderbook['asks'].length ||\n            this.props.orderbook['bids'].length !=\n                nextProps.orderbook['bids'].length;\n\n        let oc =\n            typeof nextProps.open_orders !== undefined &&\n            (typeof this.props.open_orders == 'undefined' ||\n                JSON.stringify(this.props.open_orders) !=\n                    JSON.stringify(nextProps.open_orders));\n\n        // Update if ticker info changed, order book changed size, or open orders length changed.\n        //if(tc || bc || oc) console.log(\"tc?\", tc, \"bc?\", bc, \"oc?\", oc)\n        return tc || bc || oc;\n    };\n\n    buySteem = e => {\n        e.preventDefault();\n        const { placeOrder, user } = this.props;\n        if (!user) return;\n        const amount_to_sell = parseFloat(\n            ReactDOM.findDOMNode(this.refs.buySteem_total).value\n        );\n        const min_to_receive = parseFloat(\n            ReactDOM.findDOMNode(this.refs.buySteem_amount).value\n        );\n        const price = (amount_to_sell / min_to_receive).toFixed(6);\n        const { lowest_ask } = this.props.ticker;\n        placeOrder(\n            user,\n            `${amount_to_sell} ${DEBT_TICKER}`,\n            `${min_to_receive} ${LIQUID_TICKER}`,\n            `${CURRENCY_SIGN}${price}/${LIQUID_TICKER}`,\n            !!this.state.buy_price_warning,\n            lowest_ask,\n            msg => {\n                this.props.notify(msg);\n                this.props.reload(user);\n            }\n        );\n    };\n    sellSteem = e => {\n        e.preventDefault();\n        const { placeOrder, user } = this.props;\n        if (!user) return;\n        const min_to_receive = parseFloat(\n            ReactDOM.findDOMNode(this.refs.sellSteem_total).value\n        );\n        const amount_to_sell = parseFloat(\n            ReactDOM.findDOMNode(this.refs.sellSteem_amount).value\n        );\n        const price = (min_to_receive / amount_to_sell).toFixed(6);\n        const { highest_bid } = this.props.ticker;\n        placeOrder(\n            user,\n            `${amount_to_sell} ${LIQUID_TICKER}`,\n            `${min_to_receive} ${DEBT_TICKER}`,\n            `${CURRENCY_SIGN}${price}/${LIQUID_TICKER}`,\n            !!this.state.sell_price_warning,\n            highest_bid,\n            msg => {\n                this.props.notify(msg);\n                this.props.reload(user);\n            }\n        );\n    };\n    cancelOrderClick = (e, orderid) => {\n        e.preventDefault();\n        const { cancelOrder, user } = this.props;\n        if (!user) return;\n        cancelOrder(user, orderid, msg => {\n            this.props.notify(msg);\n            this.props.reload(user);\n        });\n    };\n\n    setFormPrice = price => {\n        const p = parseFloat(price);\n\n        this.refs.sellSteem_price.value = p.toFixed(6);\n        this.refs.buySteem_price.value = p.toFixed(6);\n\n        const samount = parseFloat(this.refs.sellSteem_amount.value);\n        if (samount >= 0)\n            this.refs.sellSteem_total.value = roundDown(p * samount, 3);\n\n        const bamount = parseFloat(this.refs.buySteem_amount.value);\n        if (bamount >= 0)\n            this.refs.buySteem_total.value = roundUp(p * bamount, 3);\n\n        this.validateBuySteem();\n        this.validateSellSteem();\n    };\n\n    percentDiff = (marketPrice, userPrice) => {\n        marketPrice = parseFloat(marketPrice);\n        return 100 * (userPrice - marketPrice) / marketPrice;\n    };\n\n    validateBuySteem = () => {\n        const amount = parseFloat(this.refs.buySteem_amount.value);\n        const price = parseFloat(this.refs.buySteem_price.value);\n        const total = parseFloat(this.refs.buySteem_total.value);\n        const valid = amount > 0 && price > 0 && total > 0;\n        const { lowest_ask } = this.props.ticker;\n        this.setState({\n            buy_disabled: !valid,\n            buy_price_warning:\n                valid && this.percentDiff(lowest_ask, price) > 15,\n        });\n    };\n\n    validateSellSteem = () => {\n        const amount = parseFloat(this.refs.sellSteem_amount.value);\n        const price = parseFloat(this.refs.sellSteem_price.value);\n        const total = parseFloat(this.refs.sellSteem_total.value);\n        const valid = amount > 0 && price > 0 && total > 0;\n        const { highest_bid } = this.props.ticker;\n        this.setState({\n            sell_disabled: !valid,\n            sell_price_warning:\n                valid && this.percentDiff(highest_bid, price) < -15,\n        });\n    };\n\n    handleToggleOpenOrdersSort = (column, dataType = 'float') => {\n        this.props.toggleOpenOrdersSort(column, dataType);\n    };\n\n    render() {\n        const {\n            sellSteem,\n            buySteem,\n            cancelOrderClick,\n            setFormPrice,\n            validateBuySteem,\n            validateSellSteem,\n            handleToggleOpenOrdersSort,\n        } = this;\n        const {\n            buy_disabled,\n            sell_disabled,\n            buy_price_warning,\n            sell_price_warning,\n        } = this.state;\n\n        let ticker = {\n            latest: 0,\n            lowest_ask: 0,\n            highest_bid: 0,\n            percent_change: 0,\n            sbd_volume: 0,\n            feed_price: 0,\n        };\n\n        if (typeof this.props.ticker != 'undefined') {\n            const {\n                latest,\n                lowest_ask,\n                highest_bid,\n                percent_change,\n                sbd_volume,\n            } = this.props.ticker;\n            const base = this.props.feed.get('base');\n            const quote = this.props.feed.get('quote');\n            ticker = {\n                latest: parseFloat(latest),\n                lowest_ask: roundUp(parseFloat(lowest_ask), 6),\n                highest_bid: roundDown(parseFloat(highest_bid), 6),\n                percent_change: parseFloat(percent_change),\n                sbd_volume: parseFloat(sbd_volume),\n                feed_price:\n                    parseFloat(base.split(' ')[0]) /\n                    parseFloat(quote.split(' ')[0]),\n            };\n        }\n\n        // Take raw orders from API and put them into a format that's clean & useful\n        function normalizeOrders(orders) {\n            if (typeof orders == 'undefined') return { bids: [], asks: [] };\n            return ['bids', 'asks'].reduce((out, side) => {\n                out[side] = orders[side].map(o => {\n                    return new Order(o, side);\n                });\n                return out;\n            }, {});\n        }\n\n        function aggOrders(orders) {\n            return ['bids', 'asks'].reduce((out, side) => {\n                var buff = [],\n                    last = null;\n                orders[side].map(o => {\n                    // o.price = (side == 'asks') ? roundUp(o.price, 6) : Math.max(roundDown(o.price, 6), 0.000001)\n                    // the following line should be checking o.price == last.price but it appears due to inverted prices from API,\n                    //   inverting again causes values to not be properly sorted.\n                    if (\n                        last !== null &&\n                        o.getStringPrice() === last.getStringPrice()\n                    ) {\n                        //if(last !== null && o.price == last.price) {\n                        buff[buff.length - 1] = buff[buff.length - 1].add(o);\n                        // buff[buff.length-1].steem += o.steem\n                        // buff[buff.length-1].sbd   += o.sbd\n                        // buff[buff.length-1].sbd_depth = o.sbd_depth\n                        // buff[buff.length-1].steem_depth = o.steem_depth\n                    } else {\n                        buff.push(o);\n                    }\n                    last = o;\n                });\n\n                out[side] = buff;\n                return out;\n            }, {});\n        }\n\n        const account = this.props.account ? this.props.account.toJS() : null;\n        const orderbook = aggOrders(normalizeOrders(this.props.orderbook));\n        const { open_orders, open_orders_sort } = this.props;\n\n        // Logged-in user's open orders\n        function open_orders_table(open_orders, open_orders_sort) {\n            const rows =\n                open_orders &&\n                open_orders.map(o => (\n                    <tr key={o.orderid}>\n                        <td>{o.created.replace('T', ' ')}</td>\n                        <td>{o.type == 'ask' ? tt('g.sell') : tt('g.buy')}</td>\n                        <td>\n                            {CURRENCY_SIGN}\n                            {o.price.toFixed(6)}\n                        </td>\n                        <td>{o.steem}</td>\n                        <td>{o.sbd.replace('SBD', DEBT_TOKEN_SHORT)}</td>\n                        <td>\n                            <a\n                                href=\"#\"\n                                onClick={e => cancelOrderClick(e, o.orderid)}\n                            >\n                                {tt('g.cancel')}\n                            </a>\n                        </td>\n                    </tr>\n                ));\n\n            const activeClass = column => {\n                if (column === open_orders_sort.get('column')) {\n                    const dir =\n                        open_orders_sort.get('dir') === -1 ? 'desc' : 'asc';\n                    return ['activesort', `activesort--${dir}`];\n                }\n                return null;\n            };\n\n            return (\n                <table className=\"Market__open-orders\">\n                    <thead>\n                        <tr>\n                            <th\n                                className={classNames(\n                                    activeClass('created'),\n                                    'sortable'\n                                )}\n                                onClick={e =>\n                                    handleToggleOpenOrdersSort(\n                                        'created',\n                                        'string'\n                                    )\n                                }\n                            >\n                                {tt('market_jsx.date_created')}\n                            </th>\n                            <th\n                                className={classNames(\n                                    activeClass('type'),\n                                    'sortable'\n                                )}\n                                onClick={e =>\n                                    handleToggleOpenOrdersSort('type', 'string')\n                                }\n                            >\n                                {tt('g.type')}\n                            </th>\n                            <th\n                                className={classNames(\n                                    activeClass('price'),\n                                    'sortable'\n                                )}\n                                onClick={e =>\n                                    handleToggleOpenOrdersSort('price')\n                                }\n                            >\n                                {tt('g.price')}\n                            </th>\n                            <th\n                                className={classNames(\n                                    activeClass('for_sale'),\n                                    'sortable',\n                                    'uppercase'\n                                )}\n                                onClick={e =>\n                                    handleToggleOpenOrdersSort('for_sale')\n                                }\n                            >\n                                {LIQUID_TOKEN}\n                            </th>\n                            <th\n                                className={classNames(\n                                    activeClass('sbd'),\n                                    'sortable'\n                                )}\n                                onClick={e => handleToggleOpenOrdersSort('sbd')}\n                            >\n                                {`${DEBT_TOKEN_SHORT} (${CURRENCY_SIGN})`}\n                            </th>\n                            <th>{tt('market_jsx.action')}</th>\n                        </tr>\n                    </thead>\n                    <tbody>{rows}</tbody>\n                </table>\n            );\n        }\n\n        function trade_history_table(trades) {\n            if (!trades || !trades.length) {\n                return [];\n            }\n            const norm = trades => {\n                return trades.map(t => {\n                    return new TradeHistory(t);\n                });\n            };\n\n            return <OrderHistory history={norm(trades)} />;\n        }\n\n        const pct_change = (\n            <span\n                className={\n                    'Market__ticker-pct-' +\n                    (ticker.percent_change < 0 ? 'down' : 'up')\n                }\n            >\n                {ticker.percent_change < 0 ? '' : '+'}\n                {ticker.percent_change.toFixed(2)}%\n            </span>\n        );\n\n        return (\n            <div>\n                <div className=\"row\">\n                    <div className=\"column\">\n                        <ul className=\"Market__ticker\">\n                            <li>\n                                <b>{tt('market_jsx.last_price')}</b>{' '}\n                                {CURRENCY_SIGN}\n                                {ticker.latest.toFixed(6)} ({pct_change})\n                            </li>\n                            <li>\n                                <b>{tt('market_jsx.24h_volume')}</b>{' '}\n                                {CURRENCY_SIGN}\n                                {ticker.sbd_volume.toFixed(2)}\n                            </li>\n                            <li>\n                                <b>{tt('g.bid')}</b> {CURRENCY_SIGN}\n                                {ticker.highest_bid.toFixed(6)}\n                            </li>\n                            <li>\n                                <b>{tt('g.ask')}</b> {CURRENCY_SIGN}\n                                {ticker.lowest_ask.toFixed(6)}\n                            </li>\n                            {ticker.highest_bid > 0 && (\n                                <li>\n                                    <b>{tt('market_jsx.spread')}</b>{' '}\n                                    {(\n                                        200 *\n                                        (ticker.lowest_ask -\n                                            ticker.highest_bid) /\n                                        (ticker.highest_bid + ticker.lowest_ask)\n                                    ).toFixed(3)}%\n                                </li>\n                            )}\n                            {/*<li><b>Feed price</b> ${ticker.feed_price.toFixed(3)}</li>*/}\n                        </ul>\n                    </div>\n                </div>\n\n                <div className=\"row\">\n                    <div className=\"column\">\n                        <DepthChart\n                            bids={orderbook.bids}\n                            asks={orderbook.asks}\n                        />\n                    </div>\n                </div>\n\n                <div className=\"row\">\n                    <div className=\"column\">\n                        <TransactionError opType=\"limit_order_create\" />\n                    </div>\n                </div>\n\n                <div className=\"row\">\n                    <div className=\"small-12 medium-6 columns\">\n                        <h4 className=\"buy-color uppercase\">\n                            {tt('navigation.buy_LIQUID_TOKEN', {\n                                LIQUID_TOKEN,\n                            })}\n                        </h4>\n                        <form className=\"Market__orderform\" onSubmit={buySteem}>\n                            <div className=\"row\">\n                                <div className=\"column small-3 large-2\">\n                                    <label>{tt('g.price')}</label>\n                                </div>\n                                <div className=\"column small-9 large-8\">\n                                    <div className=\"input-group\">\n                                        <input\n                                            className={\n                                                'input-group-field' +\n                                                (buy_price_warning\n                                                    ? ' price_warning'\n                                                    : '')\n                                            }\n                                            type=\"text\"\n                                            ref=\"buySteem_price\"\n                                            placeholder=\"0.0\"\n                                            onChange={e => {\n                                                const amount = parseFloat(\n                                                    this.refs.buySteem_amount\n                                                        .value\n                                                );\n                                                const price = parseFloat(\n                                                    this.refs.buySteem_price\n                                                        .value\n                                                );\n                                                if (amount >= 0 && price >= 0)\n                                                    this.refs.buySteem_total.value = roundUp(\n                                                        price * amount,\n                                                        3\n                                                    );\n                                                validateBuySteem();\n                                            }}\n                                        />\n                                        <span className=\"input-group-label uppercase\">{`${\n                                            DEBT_TOKEN_SHORT\n                                        }/${LIQUID_TOKEN}`}</span>\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div className=\"row\">\n                                <div className=\"column small-3 large-2\">\n                                    <label>{tt('g.amount')}</label>\n                                </div>\n                                <div className=\"column small-9 large-8\">\n                                    <div className=\"input-group\">\n                                        <input\n                                            className=\"input-group-field\"\n                                            type=\"text\"\n                                            ref=\"buySteem_amount\"\n                                            placeholder=\"0.0\"\n                                            onChange={e => {\n                                                const price = parseFloat(\n                                                    this.refs.buySteem_price\n                                                        .value\n                                                );\n                                                const amount = parseFloat(\n                                                    this.refs.buySteem_amount\n                                                        .value\n                                                );\n                                                if (price >= 0 && amount >= 0)\n                                                    this.refs.buySteem_total.value = roundUp(\n                                                        price * amount,\n                                                        3\n                                                    );\n                                                validateBuySteem();\n                                            }}\n                                        />\n                                        <span className=\"input-group-label uppercase\">\n                                            {' '}\n                                            {LIQUID_TOKEN}\n                                        </span>\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div className=\"row\">\n                                <div className=\"column small-3 large-2\">\n                                    <label>{tt('market_jsx.total')}</label>\n                                </div>\n                                <div className=\"column small-9 large-8\">\n                                    <div className=\"input-group\">\n                                        <input\n                                            className=\"input-group-field\"\n                                            type=\"text\"\n                                            ref=\"buySteem_total\"\n                                            placeholder=\"0.0\"\n                                            onChange={e => {\n                                                const price = parseFloat(\n                                                    this.refs.buySteem_price\n                                                        .value\n                                                );\n                                                const total = parseFloat(\n                                                    this.refs.buySteem_total\n                                                        .value\n                                                );\n                                                if (total >= 0 && price >= 0)\n                                                    this.refs.buySteem_amount.value = roundUp(\n                                                        total / price,\n                                                        3\n                                                    );\n                                                validateBuySteem();\n                                            }}\n                                        />\n                                        <span className=\"input-group-label\">{`${\n                                            DEBT_TOKEN_SHORT\n                                        } (${CURRENCY_SIGN})`}</span>\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div className=\"row\">\n                                <div className=\"column small-3 large-2\" />\n                                <div className=\"column small-9 large-8\">\n                                    <input\n                                        disabled={buy_disabled}\n                                        type=\"submit\"\n                                        className=\"button hollow buy-color float-right uppercase\"\n                                        value={tt(\n                                            'navigation.buy_LIQUID_TOKEN',\n                                            { LIQUID_TOKEN }\n                                        )}\n                                    />\n                                    {account && (\n                                        <div>\n                                            <small>\n                                                <a\n                                                    href=\"#\"\n                                                    onClick={e => {\n                                                        e.preventDefault();\n                                                        const price = parseFloat(\n                                                            this.refs\n                                                                .buySteem_price\n                                                                .value\n                                                        );\n                                                        const total = account.sbd_balance.split(\n                                                            ' '\n                                                        )[0];\n                                                        this.refs.buySteem_total.value = total;\n                                                        if (price >= 0)\n                                                            this.refs.buySteem_amount.value = roundDown(\n                                                                parseFloat(\n                                                                    total\n                                                                ) / price,\n                                                                3\n                                                            ).toFixed(3);\n                                                        validateBuySteem();\n                                                    }}\n                                                >\n                                                    {tt('market_jsx.available')}:\n                                                </a>{' '}\n                                                {account.sbd_balance.replace(\n                                                    'SBD',\n                                                    DEBT_TOKEN_SHORT\n                                                )}\n                                            </small>\n                                        </div>\n                                    )}\n\n                                    <div>\n                                        <small>\n                                            <a\n                                                href=\"#\"\n                                                onClick={e => {\n                                                    e.preventDefault();\n                                                    const amount = parseFloat(\n                                                        this.refs\n                                                            .buySteem_amount\n                                                            .value\n                                                    );\n                                                    const price = parseFloat(\n                                                        ticker.lowest_ask\n                                                    );\n                                                    this.refs.buySteem_price.value =\n                                                        ticker.lowest_ask;\n                                                    if (amount >= 0)\n                                                        this.refs.buySteem_total.value = roundUp(\n                                                            amount * price,\n                                                            3\n                                                        ).toFixed(3);\n                                                    validateBuySteem();\n                                                }}\n                                            >\n                                                {tt('market_jsx.lowest_ask')}:\n                                            </a>{' '}\n                                            {ticker.lowest_ask.toFixed(6)}\n                                        </small>\n                                    </div>\n                                </div>\n                            </div>\n                        </form>\n                    </div>\n\n                    <div className=\"small-12 medium-6 columns\">\n                        <h4 className=\"sell-color uppercase\">\n                            {tt('navigation.sell_LIQUID_TOKEN', {\n                                LIQUID_TOKEN,\n                            })}\n                        </h4>\n\n                        <form\n                            className=\"Market__orderform\"\n                            onSubmit={sellSteem}\n                        >\n                            <div className=\"row\">\n                                <div className=\"column small-3 large-2\">\n                                    <label>{tt('g.price')}</label>\n                                </div>\n                                <div className=\"column small-9 large-8\">\n                                    <div className=\"input-group\">\n                                        <input\n                                            className={\n                                                'input-group-field' +\n                                                (sell_price_warning\n                                                    ? ' price_warning'\n                                                    : '')\n                                            }\n                                            type=\"text\"\n                                            ref=\"sellSteem_price\"\n                                            placeholder=\"0.0\"\n                                            onChange={e => {\n                                                const amount = parseFloat(\n                                                    this.refs.sellSteem_amount\n                                                        .value\n                                                );\n                                                const price = parseFloat(\n                                                    this.refs.sellSteem_price\n                                                        .value\n                                                );\n                                                if (amount >= 0 && price >= 0)\n                                                    this.refs.sellSteem_total.value = roundDown(\n                                                        price * amount,\n                                                        3\n                                                    );\n                                                validateSellSteem();\n                                            }}\n                                        />\n                                        <span className=\"input-group-label uppercase\">{`${\n                                            DEBT_TOKEN_SHORT\n                                        }/${LIQUID_TOKEN}`}</span>\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div className=\"row\">\n                                <div className=\"column small-3 large-2\">\n                                    <label>{tt('g.amount')}</label>\n                                </div>\n                                <div className=\"column small-9 large-8\">\n                                    <div className=\"input-group\">\n                                        <input\n                                            className=\"input-group-field\"\n                                            type=\"text\"\n                                            ref=\"sellSteem_amount\"\n                                            placeholder=\"0.0\"\n                                            onChange={e => {\n                                                const price = parseFloat(\n                                                    this.refs.sellSteem_price\n                                                        .value\n                                                );\n                                                const amount = parseFloat(\n                                                    this.refs.sellSteem_amount\n                                                        .value\n                                                );\n                                                if (price >= 0 && amount >= 0)\n                                                    this.refs.sellSteem_total.value = roundDown(\n                                                        price * amount,\n                                                        3\n                                                    );\n                                                validateSellSteem();\n                                            }}\n                                        />\n                                        <span className=\"input-group-label uppercase\">\n                                            {LIQUID_TOKEN}\n                                        </span>\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div className=\"row\">\n                                <div className=\"column small-3 large-2\">\n                                    <label>{tt('market_jsx.total')}</label>\n                                </div>\n                                <div className=\"column small-9 large-8\">\n                                    <div className=\"input-group\">\n                                        <input\n                                            className=\"input-group-field\"\n                                            type=\"text\"\n                                            ref=\"sellSteem_total\"\n                                            placeholder=\"0.0\"\n                                            onChange={e => {\n                                                const price = parseFloat(\n                                                    this.refs.sellSteem_price\n                                                        .value\n                                                );\n                                                const total = parseFloat(\n                                                    this.refs.sellSteem_total\n                                                        .value\n                                                );\n                                                if (price >= 0 && total >= 0)\n                                                    this.refs.sellSteem_amount.value = roundUp(\n                                                        total / price,\n                                                        3\n                                                    );\n                                                validateSellSteem();\n                                            }}\n                                        />\n                                        <span className=\"input-group-label\">{`${\n                                            DEBT_TOKEN_SHORT\n                                        } (${CURRENCY_SIGN})`}</span>\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div className=\"row\">\n                                <div className=\"column small-3 large-2\" />\n                                <div className=\"column small-9 large-8\">\n                                    <input\n                                        disabled={sell_disabled}\n                                        type=\"submit\"\n                                        className=\"button hollow sell-color float-right uppercase\"\n                                        value={tt(\n                                            'navigation.sell_LIQUID_TOKEN',\n                                            { LIQUID_TOKEN }\n                                        )}\n                                    />\n                                    {account && (\n                                        <div>\n                                            <small>\n                                                <a\n                                                    href=\"#\"\n                                                    onClick={e => {\n                                                        e.preventDefault();\n                                                        const price = parseFloat(\n                                                            this.refs\n                                                                .sellSteem_price\n                                                                .value\n                                                        );\n                                                        const amount = account.balance.split(\n                                                            ' '\n                                                        )[0];\n                                                        this.refs.sellSteem_amount.value = amount;\n                                                        if (price >= 0)\n                                                            this.refs.sellSteem_total.value = roundDown(\n                                                                price *\n                                                                    parseFloat(\n                                                                        amount\n                                                                    ),\n                                                                3\n                                                            );\n                                                        validateSellSteem();\n                                                    }}\n                                                >\n                                                    {tt('market_jsx.available')}:\n                                                </a>{' '}\n                                                {account.balance.replace(\n                                                    LIQUID_TICKER,\n                                                    LIQUID_TOKEN_UPPERCASE\n                                                )}\n                                            </small>\n                                        </div>\n                                    )}\n                                    <div>\n                                        <small>\n                                            <a\n                                                href=\"#\"\n                                                onClick={e => {\n                                                    e.preventDefault();\n                                                    const amount = parseFloat(\n                                                        this.refs\n                                                            .sellSteem_amount\n                                                            .value\n                                                    );\n                                                    const price =\n                                                        ticker.highest_bid;\n                                                    this.refs.sellSteem_price.value = price;\n                                                    if (amount >= 0)\n                                                        this.refs.sellSteem_total.value = roundDown(\n                                                            parseFloat(price) *\n                                                                amount,\n                                                            3\n                                                        );\n                                                    validateSellSteem();\n                                                }}\n                                            >\n                                                {tt('market_jsx.highest_bid')}:\n                                            </a>{' '}\n                                            {ticker.highest_bid.toFixed(6)}\n                                        </small>\n                                    </div>\n                                </div>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n\n                <div className=\"row show-for-medium\">\n                    <div className=\"small-12 medium-6 large-4 columns\">\n                        <h4>{tt('market_jsx.buy_orders')}</h4>\n                        <Orderbook\n                            side={'bids'}\n                            orders={orderbook.bids}\n                            onClick={price => {\n                                setFormPrice(price);\n                            }}\n                        />\n                    </div>\n\n                    <div className=\"small-12 medium-6 large-4 columns\">\n                        <h4>{tt('market_jsx.sell_orders')}</h4>\n                        <Orderbook\n                            side={'asks'}\n                            orders={orderbook.asks}\n                            onClick={price => {\n                                setFormPrice(price);\n                            }}\n                        />\n                    </div>\n\n                    <div className=\"small-12 large-4 column\">\n                        <h4>{tt('market_jsx.trade_history')}</h4>\n                        {trade_history_table(this.props.history)}\n                    </div>\n\n                    {this.props.shouldSeeAds && (\n                        <div className=\"small-12 large-12 column\">\n                            <GoogleAd\n                                name=\"market-1\"\n                                slot={this.props.adSlots['market_1'].slot_id}\n                                fullWidthResponsive=\"true\"\n                                style={{ display: 'block' }}\n                            />\n                        </div>\n                    )}\n                </div>\n\n                {account && (\n                    <div className=\"row\">\n                        <div className=\"column\">\n                            <h4>{tt('market_jsx.open_orders')}</h4>\n                            {open_orders_table(open_orders, open_orders_sort)}\n                        </div>\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\nconst DEFAULT_EXPIRE = Math.floor(Date.now() / 1000 + 60 * 60 * 24 * 27); // Market orders with expiration greater than 28 days from current Head Block time will be rejected.\nmodule.exports = {\n    path: 'market',\n    component: connect(\n        state => {\n            const username = state.user.get('current')\n                ? state.user.get('current').get('username')\n                : null;\n            const shouldSeeAds = state.app.getIn(['googleAds', 'shouldSeeAds']);\n            const adSlots = state.app.getIn(['googleAds', 'adSlots']).toJS();\n            return {\n                orderbook: state.market.get('orderbook'),\n                open_orders: process.env.BROWSER\n                    ? state.market.get('open_orders')\n                    : [],\n                ticker: state.market.get('ticker'),\n                account: state.global.getIn(['accounts', username]),\n                history: state.market.get('history'),\n                user: username,\n                feed: state.global.get('feed_price'),\n                open_orders_sort: state.market.get('open_orders_sort'),\n                shouldSeeAds,\n                adSlots,\n            };\n        },\n        dispatch => ({\n            notify: message => {\n                dispatch(\n                    appActions.addNotification({\n                        key: 'mkt_' + Date.now(),\n                        message,\n                        dismissAfter: 5000,\n                    })\n                );\n            },\n            reload: username => {\n                console.log('Reload market state...');\n                dispatch(marketActions.updateMarket({ username }));\n            },\n            cancelOrder: (owner, orderid, successCallback) => {\n                const confirm = tt('market_jsx.order_cancel_confirm', {\n                    order_id: orderid,\n                    user: owner,\n                });\n                const successMessage = tt('market_jsx.order_cancelled', {\n                    order_id: orderid,\n                });\n                dispatch(\n                    transactionActions.broadcastOperation({\n                        type: 'limit_order_cancel',\n                        operation: {\n                            owner,\n                            orderid /*, __config: {successMessage}*/,\n                        },\n                        confirm,\n                        successCallback: () => {\n                            successCallback(successMessage);\n                        },\n                        //successCallback\n                    })\n                );\n            },\n            placeOrder: (\n                owner,\n                amount_to_sell,\n                min_to_receive,\n                effectivePrice,\n                priceWarning,\n                marketPrice,\n                successCallback,\n                fill_or_kill = false,\n                expiration = DEFAULT_EXPIRE\n            ) => {\n                // create_order jsc 12345 \"1.000 SBD\" \"100.000 STEEM\" true 1467122240 false\n\n                // Padd amounts to 3 decimal places\n                amount_to_sell = amount_to_sell.replace(\n                    amount_to_sell.split(' ')[0],\n                    String(parseFloat(amount_to_sell).toFixed(3))\n                );\n                min_to_receive = min_to_receive.replace(\n                    min_to_receive.split(' ')[0],\n                    String(parseFloat(min_to_receive).toFixed(3))\n                );\n\n                const isSell = amount_to_sell.indexOf(LIQUID_TICKER) > 0;\n                const confirmStr = isSell\n                    ? tt('market_jsx.sell_amount_for_atleast', {\n                          amount_to_sell,\n                          min_to_receive,\n                          effectivePrice,\n                      })\n                    : tt('market_jsx.buy_atleast_amount_for', {\n                          amount_to_sell,\n                          min_to_receive,\n                          effectivePrice,\n                      });\n                const successMessage = tt('market_jsx.order_placed', {\n                    order: confirmStr,\n                });\n                const confirm = confirmStr + '?';\n                let warning = null;\n                if (priceWarning) {\n                    const warning_args = {\n                        marketPrice:\n                            CURRENCY_SIGN +\n                            parseFloat(marketPrice).toFixed(4) +\n                            '/' +\n                            LIQUID_TOKEN_UPPERCASE,\n                    };\n                    warning = isSell\n                        ? tt('market_jsx.price_warning_below', warning_args)\n                        : tt('market_jsx.price_warning_above', warning_args);\n                }\n                const orderid = Math.floor(Date.now() / 1000);\n                dispatch(\n                    transactionActions.broadcastOperation({\n                        type: 'limit_order_create',\n                        operation: {\n                            owner,\n                            amount_to_sell,\n                            min_to_receive,\n                            fill_or_kill,\n                            expiration,\n                            orderid,\n                        }, //,\n                        //__config: {successMessage}},\n                        confirm,\n                        warning,\n                        successCallback: () => {\n                            successCallback(successMessage);\n                        },\n                    })\n                );\n            },\n            toggleOpenOrdersSort: (column, dataType) => {\n                dispatch(\n                    marketActions.toggleOpenOrdersSort({ column, dataType })\n                );\n            },\n        })\n    )(Market),\n};\n"]}