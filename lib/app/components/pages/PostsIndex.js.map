{"version":3,"sources":["../../../../src/app/components/pages/PostsIndex.jsx"],"names":["PostsIndex","onShowSpam","setState","showSpam","state","loadMore","bind","shouldComponentUpdate","prevProps","window","innerHeight","discussions","props","refs","list","fetchIfNeeded","order","category","topic_discussions","get","last_post","routeParams","accountname","constants","DEFAULT_SORT_ORDER","slice","status","split","author","permlink","requestData","categories","pinned","topics_order","posts","account_name","emptyText","accounts","getIn","isMyAccount","username","name","getPosts","size","fetching","loading","page_title","layoutClass","blogmode","sortOrder","topic","isBrowser","maybeLoggedIn","notices","shouldSeeAds","adSlots","slot_id","width","height","React","Component","propTypes","PropTypes","object","func","bool","string","defaultProps","module","exports","path","component","ownProps","global","app","user","offchain","params","take","process","env","BROWSER","toJS","dispatch","fetchDataSagaActions","args"],"mappings":"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","file":"PostsIndex.js","sourcesContent":["/* eslint react/prop-types: 0 */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router';\nimport tt from 'counterpart';\nimport { List } from 'immutable';\nimport { actions as fetchDataSagaActions } from 'app/redux/FetchDataSaga';\nimport constants from 'app/redux/constants';\nimport shouldComponentUpdate from 'app/utils/shouldComponentUpdate';\nimport PostsList from 'app/components/cards/PostsList';\nimport { isFetchingOrRecentlyUpdated } from 'app/utils/StateFunctions';\nimport Callout from 'app/components/elements/Callout';\n// import SidebarStats from 'app/components/elements/SidebarStats';\nimport SidebarLinks from 'app/components/elements/SidebarLinks';\nimport SidebarNewUsers from 'app/components/elements/SidebarNewUsers';\nimport Notices from 'app/components/elements/Notices';\nimport GoogleAd from 'app/components/elements/GoogleAd';\nimport ArticleLayoutSelector from 'app/components/modules/ArticleLayoutSelector';\nimport Topics from './Topics';\nimport SortOrder from 'app/components/elements/SortOrder';\n\nclass PostsIndex extends React.Component {\n    static propTypes = {\n        discussions: PropTypes.object,\n        accounts: PropTypes.object,\n        status: PropTypes.object,\n        routeParams: PropTypes.object,\n        requestData: PropTypes.func,\n        loading: PropTypes.bool,\n        username: PropTypes.string,\n        blogmode: PropTypes.bool,\n        categories: PropTypes.object,\n    };\n\n    static defaultProps = {\n        showSpam: false,\n    };\n\n    constructor() {\n        super();\n        this.state = {};\n        this.loadMore = this.loadMore.bind(this);\n        this.shouldComponentUpdate = shouldComponentUpdate(this, 'PostsIndex');\n    }\n\n    componentDidUpdate(prevProps) {\n        if (\n            window.innerHeight &&\n            window.innerHeight > 3000 &&\n            prevProps.discussions !== this.props.discussions\n        ) {\n            this.refs.list.fetchIfNeeded();\n        }\n    }\n\n    getPosts(order, category) {\n        const topic_discussions = this.props.discussions.get(category || '');\n        if (!topic_discussions) return null;\n        return topic_discussions.get(order);\n    }\n\n    loadMore(last_post) {\n        if (!last_post) return;\n        let {\n            accountname,\n            category,\n            order = constants.DEFAULT_SORT_ORDER,\n        } = this.props.routeParams;\n        if (category === 'feed') {\n            accountname = order.slice(1);\n            order = 'by_feed';\n        }\n        if (isFetchingOrRecentlyUpdated(this.props.status, order, category))\n            return;\n        const [author, permlink] = last_post.split('/');\n        this.props.requestData({\n            author,\n            permlink,\n            order,\n            category,\n            accountname,\n        });\n    }\n    onShowSpam = () => {\n        this.setState({ showSpam: !this.state.showSpam });\n    };\n    render() {\n        let {\n            category,\n            order = constants.DEFAULT_SORT_ORDER,\n        } = this.props.routeParams;\n\n        const { categories, pinned } = this.props;\n\n        let topics_order = order;\n        let posts = [];\n        let account_name = '';\n        let emptyText = '';\n        if (category === 'feed') {\n            account_name = order.slice(1);\n            order = 'by_feed';\n            topics_order = 'trending';\n            posts = this.props.accounts.getIn([account_name, 'feed']);\n            const isMyAccount = this.props.username === account_name;\n            if (isMyAccount) {\n                emptyText = (\n                    <div>\n                        {tt('posts_index.empty_feed_1')}.<br />\n                        <br />\n                        {tt('posts_index.empty_feed_2')}.<br />\n                        <br />\n                        <Link to=\"/trending\">\n                            {tt('posts_index.empty_feed_3')}\n                        </Link>\n                        <br />\n                        <Link to=\"/welcome\">\n                            {tt('posts_index.empty_feed_4')}\n                        </Link>\n                        <br />\n                        <Link to=\"/faq.html\">\n                            {tt('posts_index.empty_feed_5')}\n                        </Link>\n                        <br />\n                    </div>\n                );\n            } else {\n                emptyText = (\n                    <div>\n                        {tt('user_profile.user_hasnt_followed_anything_yet', {\n                            name: account_name,\n                        })}\n                    </div>\n                );\n            }\n        } else {\n            posts = this.getPosts(order, category);\n            if (posts && posts.size === 0) {\n                emptyText = (\n                    <div>\n                        {'No ' +\n                            topics_order +\n                            (category ? ' #' + category : '') +\n                            ' posts found'}\n                    </div>\n                );\n            }\n        }\n\n        const status = this.props.status\n            ? this.props.status.getIn([category || '', order])\n            : null;\n        const fetching = (status && status.fetching) || this.props.loading;\n        const { showSpam } = this.state;\n\n        // If we're at one of the four sort order routes without a tag filter,\n        // use the translated string for that sort order, f.ex \"trending\"\n        //\n        // If you click on a tag while you're in a sort order route,\n        // the title should be the translated string for that sort order\n        // plus the tag string, f.ex \"trending: blog\"\n        //\n        // Logged-in:\n        // At homepage (@user/feed) say \"My feed\"\n        let page_title = 'Posts'; // sensible default here?\n        if (category === 'feed') {\n            if (account_name === this.props.username)\n                page_title = tt('posts_index.my_feed');\n            else\n                page_title = tt('posts_index.accountnames_feed', {\n                    account_name,\n                });\n        } else {\n            switch (topics_order) {\n                case 'trending': // cribbed from Header.jsx where it's repeated 2x already :P\n                    page_title = tt('main_menu.trending');\n                    break;\n                case 'created':\n                    page_title = tt('g.new');\n                    break;\n                case 'hot':\n                    page_title = tt('main_menu.hot');\n                    break;\n                case 'promoted':\n                    page_title = tt('g.promoted');\n                    break;\n            }\n            if (typeof category !== 'undefined') {\n                page_title = `${page_title}: ${category}`; // maybe todo: localize the colon?\n            } else {\n                page_title = `${page_title}: ${tt('g.all_tags')}`;\n            }\n        }\n        const layoutClass = this.props.blogmode\n            ? ' layout-block'\n            : ' layout-list';\n        return (\n            <div\n                className={\n                    'PostsIndex row' +\n                    (fetching ? ' fetching' : '') +\n                    layoutClass\n                }\n            >\n                <article className=\"articles\">\n                    <div className=\"articles__header row\">\n                        <div className=\"small-6 medium-6 large-6 column\">\n                            <h1 className=\"articles__h1 show-for-mq-large articles__h1--no-wrap\">\n                                {page_title}\n                            </h1>\n                            <span className=\"hide-for-mq-large articles__header-select\">\n                                <Topics\n                                    username={this.props.username}\n                                    order={topics_order}\n                                    current={category}\n                                    categories={categories}\n                                    compact={true}\n                                />\n                            </span>\n                        </div>\n                        <div className=\"small-6 medium-5 large-5 column hide-for-large articles__header-select\">\n                            <SortOrder\n                                sortOrder={this.props.sortOrder}\n                                topic={this.props.topic}\n                                horizontal={false}\n                            />\n                        </div>\n                        <div className=\"medium-1 show-for-mq-medium column\">\n                            <ArticleLayoutSelector />\n                        </div>\n                    </div>\n                    <hr className=\"articles__hr\" />\n                    {!fetching &&\n                    (posts && !posts.size) &&\n                    (pinned && !pinned.size) ? (\n                        <Callout>{emptyText}</Callout>\n                    ) : (\n                        <PostsList\n                            ref=\"list\"\n                            posts={posts ? posts : List()}\n                            loading={fetching}\n                            anyPosts={true}\n                            category={category}\n                            loadMore={this.loadMore}\n                            showPinned={true}\n                            showSpam={showSpam}\n                        />\n                    )}\n                </article>\n\n                <aside className=\"c-sidebar c-sidebar--right\">\n                    {this.props.isBrowser &&\n                    !this.props.maybeLoggedIn &&\n                    !this.props.username ? (\n                        <SidebarNewUsers />\n                    ) : (\n                        this.props.isBrowser && (\n                            <div>\n                                {/* <SidebarStats steemPower={123} followers={23} reputation={62} />  */}\n                                <SidebarLinks username={this.props.username} />\n                            </div>\n                        )\n                    )}\n                    <Notices notices={this.props.notices} />\n                    {this.props.shouldSeeAds ? (\n                        <div className=\"c-sidebar__module\">\n                            <div className=\"c-sidebar__content sidebar-ad\">\n                                <GoogleAd\n                                    name=\"sidebar-1\"\n                                    slot={\n                                        this.props.adSlots['sidebar_1'].slot_id\n                                    }\n                                    style={{ width: '160px', height: '600px' }}\n                                />\n                            </div>\n                        </div>\n                    ) : null}\n                </aside>\n\n                <aside className=\"c-sidebar c-sidebar--left\">\n                    <Topics\n                        order={topics_order}\n                        current={category}\n                        compact={false}\n                        username={this.props.username}\n                        categories={categories}\n                    />\n                    <small>\n                        <a\n                            className=\"c-sidebar__more-link\"\n                            onClick={this.onShowSpam}\n                        >\n                            {showSpam\n                                ? tt('g.next_3_strings_together.show_less')\n                                : tt('g.next_3_strings_together.show_more')}\n                        </a>\n                        {' ' + tt('g.next_3_strings_together.value_posts')}\n                    </small>\n                </aside>\n            </div>\n        );\n    }\n}\n\nmodule.exports = {\n    path: ':order(/:category)',\n    component: connect(\n        (state, ownProps) => {\n            return {\n                discussions: state.global.get('discussion_idx'),\n                status: state.global.get('status'),\n                loading: state.app.get('loading'),\n                accounts: state.global.get('accounts'),\n                username:\n                    state.user.getIn(['current', 'username']) ||\n                    state.offchain.get('account'),\n                blogmode: state.app.getIn(['user_preferences', 'blogmode']),\n                sortOrder: ownProps.params.order,\n                topic: ownProps.params.category,\n                categories: state.global\n                    .getIn(['tag_idx', 'trending'])\n                    .take(50),\n                pinned: state.offchain.get('pinned_posts'),\n                maybeLoggedIn: state.user.get('maybeLoggedIn'),\n                isBrowser: process.env.BROWSER,\n                notices: state.offchain\n                    .get('pinned_posts')\n                    .get('notices')\n                    .toJS(),\n                shouldSeeAds: state.app.getIn(['googleAds', 'shouldSeeAds']),\n                adSlots: state.app.getIn(['googleAds', 'adSlots']).toJS(),\n            };\n        },\n        dispatch => {\n            return {\n                requestData: args =>\n                    dispatch(fetchDataSagaActions.requestData(args)),\n            };\n        }\n    )(PostsIndex),\n};\n"]}