{"version":3,"sources":["../../../../src/app/components/pages/PickAccount.jsx"],"names":["userActions","PickAccount","props","state","name","password","password_valid","name_error","server_error","loading","cryptographyFailure","showRules","subheader_hidden","onSubmit","bind","onNameChange","onPasswordChange","cryptoTestResult","undefined","console","error","setState","e","preventDefault","params","account","viewMode","PARAM_VIEW_MODE","window","location","target","value","trim","toLowerCase","validateAccountName","promise","length","api","getAccountsAsync","then","res","catch","process","env","BROWSER","loggedIn","logout","offchainUser","serverBusy","submit_btn_disabled","submit_btn_class","disabled","account_status","get","$STM_Config","disable_signups","next_step","maxWidth","margin","width","React","Component","propTypes","loginUser","PropTypes","func","isRequired","bool","module","exports","path","component","app","user","offchain","username","dispatch","usernamePasswordLogin","saveLogin","type"],"mappings":"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","file":"PickAccount.js","sourcesContent":["/* eslint react/prop-types: 0 */\n/*global $STM_csrf, $STM_Config */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router';\nimport classNames from 'classnames';\nimport { api } from '@steemit/steem-js';\n\nimport * as userActions from 'app/redux/UserReducer';\nimport { validate_account_name } from 'app/utils/ChainValidation';\nimport runTests from 'app/utils/BrowserTests';\nimport { PARAM_VIEW_MODE } from 'shared/constants';\nimport { makeParams } from 'app/utils/Links';\n\nclass PickAccount extends React.Component {\n    static propTypes = {\n        loginUser: PropTypes.func.isRequired,\n        serverBusy: PropTypes.bool,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: '',\n            password: '',\n            password_valid: '',\n            name_error: '',\n            server_error: '',\n            loading: false,\n            cryptographyFailure: false,\n            showRules: false,\n            subheader_hidden: true,\n        };\n        this.onSubmit = this.onSubmit.bind(this);\n        this.onNameChange = this.onNameChange.bind(this);\n        this.onPasswordChange = this.onPasswordChange.bind(this);\n    }\n\n    componentDidMount() {\n        const cryptoTestResult = runTests();\n        if (cryptoTestResult !== undefined) {\n            console.error(\n                'CreateAccount - cryptoTestResult: ',\n                cryptoTestResult\n            );\n            this.setState({ cryptographyFailure: true }); // TODO: do not use setState in componentDidMount\n        }\n    }\n\n    onSubmit(e) {\n        e.preventDefault();\n        this.setState({ server_error: '', loading: true });\n        const { name } = this.state;\n        if (!name) return;\n        const params = { account: name };\n        if (this.props.viewMode) {\n            params[PARAM_VIEW_MODE] = this.props.viewMode;\n        }\n        window.location = '/enter_email' + makeParams(params);\n    }\n\n    onPasswordChange(password, password_valid) {\n        this.setState({ password, password_valid });\n    }\n\n    onNameChange(e) {\n        const name = e.target.value.trim().toLowerCase();\n        this.validateAccountName(name);\n        this.setState({ name });\n    }\n\n    validateAccountName(name) {\n        let name_error = '';\n        let promise;\n        if (name.length > 0) {\n            name_error = validate_account_name(name);\n            if (!name_error) {\n                this.setState({ name_error: '' });\n                promise = api.getAccountsAsync([name]).then(res => {\n                    return res && res.length > 0\n                        ? 'Account name is not available'\n                        : '';\n                });\n            }\n        }\n        if (promise) {\n            promise\n                .then(name_error => this.setState({ name_error }))\n                .catch(() =>\n                    this.setState({\n                        name_error:\n                            \"Account name can't be verified right now due to server failure. Please try again later.\",\n                    })\n                );\n        } else {\n            this.setState({ name_error });\n        }\n    }\n\n    render() {\n        if (!process.env.BROWSER) {\n            // don't render this page on the server\n            return (\n                <div className=\"row\">\n                    <div className=\"column\">\n                        <p className=\"text-center\">LOADING..</p>\n                    </div>\n                </div>\n            );\n        }\n\n        const {\n            name,\n            name_error,\n            server_error,\n            loading,\n            cryptographyFailure,\n        } = this.state;\n\n        const { loggedIn, logout, offchainUser, serverBusy } = this.props;\n        const submit_btn_disabled = loading || !name || name_error;\n        const submit_btn_class = classNames('button action', {\n            disabled: submit_btn_disabled,\n        });\n        const account_status = offchainUser\n            ? offchainUser.get('account_status')\n            : null;\n\n        if (serverBusy || $STM_Config.disable_signups) {\n            return (\n                <div className=\"row\">\n                    <div className=\"column\">\n                        <div className=\"callout alert\">\n                            <p>\n                                The creation of new accounts is temporarily\n                                disabled.\n                            </p>\n                        </div>\n                    </div>\n                </div>\n            );\n        }\n        if (cryptographyFailure) {\n            return (\n                <div className=\"row\">\n                    <div className=\"column\">\n                        <div className=\"callout alert\">\n                            <h4>Browser Out of Date</h4>\n                            <p>\n                                We will be unable to create your Steem account\n                                with this browser.\n                            </p>\n                            <p>\n                                The latest versions of{' '}\n                                <a href=\"https://www.google.com/chrome/\">\n                                    Chrome\n                                </a>{' '}\n                                and{' '}\n                                <a href=\"https://www.mozilla.org/en-US/firefox/new/\">\n                                    Firefox\n                                </a>\n                                are well-tested and known to work well with\n                                steemit.com.\n                            </p>\n                        </div>\n                    </div>\n                </div>\n            );\n        }\n\n        if (loggedIn) {\n            return (\n                <div className=\"row\">\n                    <div className=\"column\">\n                        <div className=\"callout alert\">\n                            <p>\n                                You need to{' '}\n                                <a href=\"#\" onClick={logout}>\n                                    Logout\n                                </a>{' '}\n                                before you can create an additional account.\n                            </p>\n                            <p>\n                                Please note that Steemit can only register one\n                                account per verified user.\n                            </p>\n                        </div>\n                    </div>\n                </div>\n            );\n        }\n\n        if (account_status === 'waiting') {\n            return (\n                <div className=\"row\">\n                    <div className=\"column\">\n                        <br />\n                        <div className=\"callout alert\">\n                            <p>\n                                Your sign up request is being processed and you\n                                will receive an email from us when it is ready.\n                            </p>\n                            <p>\n                                Signup requests can take up to 7 days to be\n                                processed, but usually complete in a day or two.\n                            </p>\n                        </div>\n                    </div>\n                </div>\n            );\n        }\n\n        if (account_status === 'approved') {\n            return (\n                <div className=\"row\">\n                    <div className=\"column\">\n                        <br />\n                        <div className=\"callout success\">\n                            <p>\n                                Congratulations! Your sign up request has been\n                                approved.\n                            </p>\n                            <p>\n                                <Link to=\"/create_account\">\n                                    Let's get your account created!\n                                </Link>\n                            </p>\n                        </div>\n                    </div>\n                </div>\n            );\n        }\n\n        // const existingUserAccount = offchainUser.get('account');\n        // if (existingUserAccount) {\n        //     return <div className=\"row\">\n        //         <div className=\"column\">\n        //             <div className=\"callout alert\">\n        //                 <p>Our records indicate that you already have steem account: <strong>{existingUserAccount}</strong></p>\n        //                 <p>In order to prevent abuse Steemit can only register one account per verified user.</p>\n        //                 <p>You can either <a href=\"/login.html\">login</a> to your existing account\n        //                     or <a href=\"mailto:support@steemit.com\">send us email</a> if you need a new account.</p>\n        //             </div>\n        //         </div>\n        //     </div>;\n        // }\n\n        let next_step = null;\n        if (server_error) {\n            if (server_error === 'Email address is not confirmed') {\n                next_step = (\n                    <div className=\"callout alert\">\n                        <a href=\"/enter_email\">\n                            Please verify your email address\n                        </a>\n                    </div>\n                );\n            } else if (server_error === 'Phone number is not confirmed') {\n                next_step = (\n                    <div className=\"callout alert\">\n                        <a href=\"/enter_mobile\">\n                            Please verify your phone number\n                        </a>\n                    </div>\n                );\n            } else {\n                next_step = (\n                    <div className=\"callout alert\">\n                        <h5>\n                            Couldn't create account. The server returned the\n                            following error:\n                        </h5>\n                        <p>{server_error}</p>\n                    </div>\n                );\n            }\n        }\n\n        return (\n            <div>\n                <div className=\"CreateAccount row\">\n                    <div\n                        className=\"column\"\n                        style={{ maxWidth: '36rem', margin: '0 auto' }}\n                    >\n                        <br />\n                        <div className=\"progress\">\n                            <div style={{ width: '10%' }} />\n                        </div>\n\n                        <br />\n                        <h4 className=\"CreateAccount__title\">\n                            Welcome to Steemit\n                        </h4>\n                        <div>\n                            <p>\n                                Your account name is how you will be known on\n                                steemit.com.<br />\n                                {/*Your account name <strong>can never be changed</strong>, so please choose carefully.*/}\n                            </p>\n                        </div>\n                        <form\n                            onSubmit={this.onSubmit}\n                            autoComplete=\"off\"\n                            noValidate\n                            method=\"post\"\n                        >\n                            <div className={name_error ? 'error' : ''}>\n                                <label>ACCOUNT NAME</label>\n                                <input\n                                    type=\"text\"\n                                    name=\"name\"\n                                    autoComplete=\"off\"\n                                    onChange={this.onNameChange}\n                                    value={name}\n                                    placeholder={'Name...'}\n                                />\n                                <p>{name_error}</p>\n                            </div>\n                            <input\n                                disabled={submit_btn_disabled}\n                                type=\"submit\"\n                                className={submit_btn_class}\n                                value=\"Continue\"\n                            />\n                        </form>\n                        <br />\n                        <p className=\"secondary whistle-hidden\">\n                            Got an account? <Link to=\"/login.html\">Login</Link>\n                        </p>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nmodule.exports = {\n    path: 'pick_account',\n    component: connect(\n        state => {\n            return {\n                viewMode: state.app.get('viewMode'),\n                loggedIn: !!state.user.get('current'),\n                offchainUser: state.offchain.get('user'),\n                serverBusy: state.offchain.get('serverBusy'),\n            };\n        },\n        dispatch => ({\n            loginUser: (username, password) =>\n                dispatch(\n                    userActions.usernamePasswordLogin({\n                        username,\n                        password,\n                        saveLogin: true,\n                    })\n                ),\n            logout: e => {\n                if (e) e.preventDefault();\n                dispatch(userActions.logout({ type: 'account_choose' }));\n            },\n        })\n    )(PickAccount),\n};\n"]}