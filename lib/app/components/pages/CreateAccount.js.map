{"version":3,"sources":["../../../../src/app/components/pages/CreateAccount.jsx"],"names":["userActions","CreateAccount","props","state","name","password","password_valid","name_error","server_error","loading","cryptographyFailure","showRules","showPass","account_has_keys_warning","onSubmit","bind","onNameChange","onPasswordChange","preventDoubleClick","newState","cryptoTestResult","undefined","console","error","offchainAccount","offchainUser","get","validateAccountName","showTerms","setState","e","log","type","screenX","screenY","preventDefault","public_keys","pk","PrivateKey","fromWif","map","toPublicKey","toString","fromSeed","role","fetch","method","mode","credentials","headers","Accept","body","csrf","$STM_csrf","owner_key","active_key","posting_key","memo_key","then","r","json","res","status","window","location","catch","message","target","value","trim","toLowerCase","promise","length","api","getAccountsAsync","process","env","BROWSER","loggedIn","logout","serverBusy","submit_btn_disabled","submit_btn_class","account_status","$STM_Config","disable_signups","SIGNUP_URL","next_step","display","transform","mousePosition","React","Component","propTypes","loginUser","PropTypes","func","isRequired","bool","module","exports","path","component","user","offchain","suggestedPassword","global","username","dispatch","usernamePasswordLogin","saveLogin"],"mappings":"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","file":"CreateAccount.js","sourcesContent":["/* eslint react/prop-types: 0 */\n/*global $STM_csrf, $STM_Config */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router';\nimport { api } from '@steemit/steem-js';\n\nimport LoadingIndicator from 'app/components/elements/LoadingIndicator';\nimport { PrivateKey } from '@steemit/steem-js/lib/auth/ecc';\nimport * as userActions from 'app/redux/UserReducer';\nimport { validate_account_name } from 'app/utils/ChainValidation';\nimport runTests from 'app/utils/BrowserTests';\nimport GeneratedPasswordInput from 'app/components/elements/GeneratedPasswordInput';\nimport { saveCords } from 'app/utils/ServerApiClient';\nimport { SIGNUP_URL } from 'shared/constants';\n\nclass CreateAccount extends React.Component {\n    static propTypes = {\n        loginUser: PropTypes.func.isRequired,\n        serverBusy: PropTypes.bool,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: '',\n            password: '',\n            password_valid: '',\n            name_error: '',\n            server_error: '',\n            loading: false,\n            cryptographyFailure: false,\n            showRules: false,\n            showPass: false,\n            account_has_keys_warning: false, // remove this after May 20th\n            // user_name_picked: this.props.offchainUser.getIn([\"name\"])\n        };\n        this.onSubmit = this.onSubmit.bind(this);\n        this.onNameChange = this.onNameChange.bind(this);\n        this.onPasswordChange = this.onPasswordChange.bind(this);\n        this.preventDoubleClick = this.preventDoubleClick.bind(this);\n    }\n\n    componentDidMount() {\n        const newState = { showPass: true };\n        const cryptoTestResult = runTests();\n        if (cryptoTestResult !== undefined) {\n            console.error(\n                'CreateAccount - cryptoTestResult: ',\n                cryptoTestResult\n            );\n            newState.cryptographyFailure = true;\n        } else {\n            newState.showPass = true;\n        }\n        // let's find out if there is pre-approved not created account name\n        const offchainAccount = this.props.offchainUser\n            ? this.props.offchainUser.get('account')\n            : null;\n        if (offchainAccount) {\n            newState.name = offchainAccount;\n            this.validateAccountName(offchainAccount);\n            // remove below after May 20th\n            if (this.props.offchainUser.get('account_has_keys')) {\n                newState.account_has_keys_warning = true;\n            }\n        }\n        this.props.showTerms();\n        this.setState(newState);\n    }\n\n    mousePosition(e) {\n        // log x/y cords\n        console.log('--> mouse position --', e.type, e.screenX, e.screenY);\n        if (e.type === 'click') {\n            saveCords(e.screenX, e.screenY);\n        }\n    }\n\n    onSubmit(e) {\n        e.preventDefault();\n        this.setState({ server_error: '', loading: true });\n        const { password, password_valid } = this.state;\n        const name = this.state.name;\n        if (!password || !password_valid) return;\n\n        let public_keys;\n        try {\n            const pk = PrivateKey.fromWif(password);\n            public_keys = [1, 2, 3, 4].map(() => pk.toPublicKey().toString());\n        } catch (error) {\n            public_keys = ['owner', 'active', 'posting', 'memo'].map(role => {\n                const pk = PrivateKey.fromSeed(`${name}${role}${password}`);\n                return pk.toPublicKey().toString();\n            });\n        }\n\n        // createAccount\n        fetch('/api/v1/accounts', {\n            method: 'post',\n            mode: 'no-cors',\n            credentials: 'same-origin',\n            headers: {\n                Accept: 'application/json',\n                'Content-type': 'application/json',\n            },\n            body: JSON.stringify({\n                csrf: $STM_csrf,\n                name,\n                owner_key: public_keys[0],\n                active_key: public_keys[1],\n                posting_key: public_keys[2],\n                memo_key: public_keys[3],\n            }),\n        })\n            .then(r => r.json())\n            .then(res => {\n                if (res.error || res.status !== 'ok') {\n                    console.error('CreateAccount server error', res.error);\n                    this.setState({\n                        server_error: res.error || 'Unknown server error',\n                        loading: false,\n                    });\n                } else {\n                    window.location = `/login.html#account=${\n                        name\n                    }&msg=accountcreated`;\n                }\n            })\n            .catch(error => {\n                console.error('Caught CreateAccount server error', error);\n                this.setState({\n                    server_error: error.message ? error.message : error,\n                    loading: false,\n                });\n            });\n    }\n\n    onPasswordChange(password, password_valid) {\n        this.setState({ password, password_valid });\n    }\n\n    preventDoubleClick() {\n        // return false;\n    }\n\n    onNameChange(e) {\n        const name = e.target.value.trim().toLowerCase();\n        this.validateAccountName(name);\n        this.setState({ name });\n    }\n\n    validateAccountName(name) {\n        let name_error = '';\n        let promise;\n        if (name.length > 0) {\n            name_error = validate_account_name(name);\n            if (!name_error) {\n                this.setState({ name_error: '' });\n                promise = api.getAccountsAsync([name]).then(res => {\n                    return res && res.length > 0\n                        ? 'Account name is not available'\n                        : '';\n                });\n            }\n        }\n        if (promise) {\n            promise\n                .then(error => this.setState({ name_error: error }))\n                .catch(() =>\n                    this.setState({\n                        name_error:\n                            \"Account name can't be verified right now due to server failure. Please try again later.\",\n                    })\n                );\n        } else {\n            this.setState({ name_error });\n        }\n    }\n\n    render() {\n        if (!process.env.BROWSER) {\n            // don't render this page on the server - it will not work until rendered in browser\n            return (\n                <div className=\"CreateAccount row \">\n                    <div className=\"column\">\n                        <p className=\"text-center\">LOADING..</p>\n                    </div>\n                </div>\n            );\n        }\n\n        const {\n            name,\n            password_valid, //showPasswordString,\n            name_error,\n            server_error,\n            loading,\n            cryptographyFailure,\n            showRules,\n        } = this.state;\n\n        const { loggedIn, logout, serverBusy } = this.props;\n        const submit_btn_disabled = loading || !password_valid;\n        const submit_btn_class =\n            'button action' + (submit_btn_disabled ? ' disabled' : '');\n\n        const account_status = this.props.offchainUser\n            ? this.props.offchainUser.get('account_status')\n            : null;\n\n        if (serverBusy || $STM_Config.disable_signups) {\n            return (\n                <div className=\"row\">\n                    <div className=\"column\">\n                        <br />\n                        <div className=\"callout alert\">\n                            <p>\n                                Membership to Steemit.com is now under\n                                invitation only because of unexpectedly high\n                                sign up rate.\n                            </p>\n                        </div>\n                    </div>\n                </div>\n            );\n        }\n        if (cryptographyFailure) {\n            return (\n                <div className=\"row\">\n                    <div className=\"column\">\n                        <br />\n                        <div className=\"callout alert\">\n                            <h4>Cryptography test failed</h4>\n                            <p>\n                                We will be unable to create your Steem account\n                                with this browser.\n                            </p>\n                            <p>\n                                The latest versions of{' '}\n                                <a href=\"https://www.google.com/chrome/\">\n                                    Chrome\n                                </a>{' '}\n                                and{' '}\n                                <a href=\"https://www.mozilla.org/en-US/firefox/new/\">\n                                    Firefox\n                                </a>\n                                are well tested and known to work with\n                                steemit.com.\n                            </p>\n                        </div>\n                    </div>\n                </div>\n            );\n        }\n\n        if (loggedIn) {\n            return (\n                <div className=\"row\">\n                    <div className=\"column\">\n                        <br />\n                        <div className=\"callout alert\">\n                            <p>\n                                You need to{' '}\n                                <a href=\"#\" onClick={logout}>\n                                    Logout\n                                </a>{' '}\n                                before you can create another account.\n                            </p>\n                            <p>\n                                Please note that Steemit can only register one\n                                account per verified user.\n                            </p>\n                        </div>\n                    </div>\n                </div>\n            );\n        }\n\n        if (account_status !== 'approved') {\n            return (\n                <div className=\"row\">\n                    <div className=\"column\">\n                        <br />\n                        <div className=\"callout alert\">\n                            <p>\n                                It looks like your sign up request is not\n                                approved yet or you already created an account.<br\n                                />\n                                Please try again later or contact{' '}\n                                <a href=\"mailto:support@steemit.com\">\n                                    support@steemit.com\n                                </a>{' '}\n                                for the status of your request.<br />\n                                If you didn't submit your sign up application\n                                yet, <a href={SIGNUP_URL}>apply now</a>!\n                            </p>\n                        </div>\n                    </div>\n                </div>\n            );\n        }\n\n        let next_step = null;\n        if (server_error) {\n            if (server_error === 'Email address is not confirmed') {\n                next_step = (\n                    <div className=\"callout alert\">\n                        <a href=\"/enter_email\">\n                            Please verify your email address\n                        </a>\n                    </div>\n                );\n            } else if (server_error === 'Phone number is not confirmed') {\n                next_step = (\n                    <div className=\"callout alert\">\n                        <a href=\"/enter_mobile\">\n                            Please verify your phone number\n                        </a>\n                    </div>\n                );\n            } else {\n                next_step = (\n                    <div className=\"callout alert\">\n                        <h5>\n                            Couldn't create account. Server returned the\n                            following error:\n                        </h5>\n                        <p>{server_error}</p>\n                    </div>\n                );\n            }\n        }\n\n        return (\n            <div>\n                <div className=\"CreateAccount row\">\n                    <div className=\"column\">\n                        <h4>\n                            Please read the Steemit Rules and fill in the form\n                            below to create your Steemit account\n                        </h4>\n                        {showRules ? (\n                            <div className=\"CreateAccount__rules\">\n                                <p>\n                                    The first rule of Steemit is: Do not lose\n                                    your password.<br />\n                                    The second rule of Steemit is: Do{' '}\n                                    <strong>not</strong> lose your password.<br\n                                    />\n                                    The third rule of Steemit is: We cannot\n                                    recover your password, or your account if\n                                    you lose your password.<br />\n                                    The forth rule: Do not tell anyone your\n                                    password.<br />\n                                    The fifth rule: Always back up your\n                                    password.\n                                    <br />\n                                    <br />\n                                    Seriously, we are, for technical reasons,\n                                    entirely unable to gain access to an account\n                                    without knowing the password. Steemit is a\n                                    new model, entirely unlike other sites on\n                                    the Internet. It's not simply policy:{' '}\n                                    <strong>\n                                        We cannot recover your account or\n                                        password if you lose it.\n                                    </strong>\n                                    <br />\n                                    Print out your password or write it down in\n                                    a safe place.\n                                </p>\n\n                                <div className=\"text-center\">\n                                    <a\n                                        className=\"CreateAccount__rules-button\"\n                                        href=\"#\"\n                                        onClick={() =>\n                                            this.setState({ showRules: false })\n                                        }\n                                    >\n                                        <span\n                                            style={{\n                                                display: 'inline-block',\n                                                transform: 'rotate(-90deg)',\n                                            }}\n                                        >\n                                            &raquo;\n                                        </span>\n                                    </a>\n                                </div>\n                                <hr />\n                            </div>\n                        ) : (\n                            <div className=\"text-center\">\n                                <a\n                                    className=\"CreateAccount__rules-button\"\n                                    href=\"#\"\n                                    onClick={() =>\n                                        this.setState({ showRules: true })\n                                    }\n                                >\n                                    Steemit Rules &nbsp; &raquo;\n                                </a>\n                            </div>\n                        )}\n                        <br />\n                        <form\n                            onSubmit={this.onSubmit}\n                            autoComplete=\"off\"\n                            noValidate\n                            method=\"post\"\n                        >\n                            <div className={name_error ? 'error' : ''}>\n                                <label>\n                                    ACCOUNT NAME\n                                    <input\n                                        type=\"text\"\n                                        name=\"name\"\n                                        autoComplete=\"off\"\n                                        onChange={this.onNameChange}\n                                        value={name}\n                                    />\n                                </label>\n                                <p>{name_error}</p>\n                            </div>\n                            {// TODO: remove this after May 20th\n                            this.state.account_has_keys_warning && (\n                                <div className=\"warning\">\n                                    Please note: due to recent security changes\n                                    if you chosen a password before during\n                                    signup, this one below will override it —\n                                    this is the one you need to save.\n                                </div>\n                            )}\n                            <GeneratedPasswordInput\n                                onChange={this.onPasswordChange}\n                                disabled={loading}\n                                showPasswordString={this.state.showPass}\n                            />\n                            <br />\n                            {next_step && (\n                                <div>\n                                    {next_step}\n                                    <br />\n                                </div>\n                            )}\n                            <noscript>\n                                <div className=\"callout alert\">\n                                    <p>\n                                        This form requires javascript to be\n                                        enabled in your browser\n                                    </p>\n                                </div>\n                            </noscript>\n                            {loading && <LoadingIndicator type=\"circle\" />}\n                            <input\n                                disabled={submit_btn_disabled}\n                                type=\"submit\"\n                                className={submit_btn_class}\n                                onClick={this.mousePosition}\n                                value=\"Create Account\"\n                            />\n                        </form>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nmodule.exports = {\n    path: 'create_account',\n    component: connect(\n        state => {\n            return {\n                loggedIn: !!state.user.get('current'),\n                offchainUser: state.offchain.get('user'),\n                serverBusy: state.offchain.get('serverBusy'),\n                suggestedPassword: state.global.get('suggestedPassword'),\n            };\n        },\n        dispatch => ({\n            loginUser: (username, password) =>\n                dispatch(\n                    userActions.usernamePasswordLogin({\n                        username,\n                        password,\n                        saveLogin: true,\n                    })\n                ),\n            logout: e => {\n                if (e) e.preventDefault();\n                dispatch(userActions.logout({ type: 'account_create' }));\n            },\n            showTerms: e => {\n                if (e) e.preventDefault();\n                dispatch(userActions.showTerms());\n            },\n        })\n    )(CreateAccount),\n};\n"]}