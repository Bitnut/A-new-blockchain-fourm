{"version":3,"sources":["../../../../src/app/components/cards/MarkdownViewer.jsx"],"names":["remarkable","Remarkable","html","breaks","linkify","typographer","quotes","remarkableToSpec","MarkdownViewer","onAllowNoImage","setState","allowNoImage","state","np","ns","text","props","large","noImage","hideImages","highQualityPost","m","match","length","test","replace","renderer","renderedText","render","indexOf","cleanText","allowDangerousHTML","console","log","error","noImageActive","noImageText","idx","sections","split","section","id","type","w","h","push","url","substring","__html","cn","className","marginBottom","Component","propTypes","PropTypes","string","bool","jsonMetadata","object","defaultProps","ownProps"],"mappings":"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","file":"MarkdownViewer.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Component } from 'react';\nimport Remarkable from 'remarkable';\nimport YoutubePreview from 'app/components/elements/YoutubePreview';\nimport sanitizeConfig, { noImageText } from 'app/utils/SanitizeConfig';\nimport sanitize from 'sanitize-html';\nimport HtmlReady from 'shared/HtmlReady';\nimport tt from 'counterpart';\n\nconst remarkable = new Remarkable({\n    html: true, // remarkable renders first then sanitize runs...\n    breaks: true,\n    linkify: false, // linkify is done locally\n    typographer: false, // https://github.com/jonschlinkert/remarkable/issues/142#issuecomment-221546793\n    quotes: '“”‘’',\n});\n\nconst remarkableToSpec = new Remarkable({\n    html: true,\n    breaks: false, // real markdown uses \\n\\n for paragraph breaks\n    linkify: false,\n    typographer: false,\n    quotes: '“”‘’',\n});\n\nclass MarkdownViewer extends Component {\n    static propTypes = {\n        // HTML properties\n        text: PropTypes.string,\n        className: PropTypes.string,\n        large: PropTypes.bool,\n        jsonMetadata: PropTypes.object,\n        highQualityPost: PropTypes.bool,\n        noImage: PropTypes.bool,\n        allowDangerousHTML: PropTypes.bool,\n        hideImages: PropTypes.bool, // whether to replace images with just a span containing the src url\n        breaks: PropTypes.bool, // true to use bastardized markdown that cares about newlines\n        // used for the ImageUserBlockList\n    };\n\n    static defaultProps = {\n        allowDangerousHTML: false,\n        breaks: true,\n        className: '',\n        hideImages: false,\n        large: false,\n    };\n\n    constructor() {\n        super();\n        this.state = { allowNoImage: true };\n    }\n\n    shouldComponentUpdate(np, ns) {\n        return (\n            np.text !== this.props.text ||\n            np.large !== this.props.large ||\n            ns.allowNoImage !== this.state.allowNoImage\n        );\n    }\n\n    onAllowNoImage = () => {\n        this.setState({ allowNoImage: false });\n    };\n\n    render() {\n        const { noImage, hideImages } = this.props;\n        const { allowNoImage } = this.state;\n        let { text } = this.props;\n        if (!text) text = ''; // text can be empty, still view the link meta data\n        const {\n            large,\n            highQualityPost,\n            //jsonMetadata,\n        } = this.props;\n\n        let html = false;\n        // See also ReplyEditor isHtmlTest\n        const m = text.match(/^<html>([\\S\\s]*)<\\/html>$/);\n        if (m && m.length === 2) {\n            html = true;\n            text = m[1];\n        } else {\n            // See also ReplyEditor isHtmlTest\n            html = /^<p>[\\S\\s]*<\\/p>/.test(text);\n        }\n\n        // Strip out HTML comments. \"JS-DOS\" bug.\n        text = text.replace(\n            /<!--([\\s\\S]+?)(-->|$)/g,\n            '(html comment removed: $1)'\n        );\n\n        let renderer = remarkableToSpec;\n        if (this.props.breaks === true) {\n            renderer = remarkable;\n        }\n\n        let renderedText = html ? text : renderer.render(text);\n\n        // If content isn't wrapped with an html element at this point, add it.\n        if (!renderedText.indexOf('<html>') !== 0) {\n            renderedText = '<html>' + renderedText + '</html>';\n        }\n\n        // Embed videos, link mentions and hashtags, etc...\n        if (renderedText)\n            renderedText = HtmlReady(renderedText, { hideImages }).html;\n\n        // Complete removal of javascript and other dangerous tags..\n        // The must remain as close as possible to dangerouslySetInnerHTML\n        let cleanText = renderedText;\n        if (this.props.allowDangerousHTML === true) {\n            console.log('WARN\\tMarkdownViewer rendering unsanitized content');\n        } else {\n            cleanText = sanitize(\n                renderedText,\n                sanitizeConfig({\n                    large,\n                    highQualityPost,\n                    noImage: noImage && allowNoImage,\n                })\n            );\n        }\n\n        if (/<\\s*script/gi.test(cleanText)) {\n            // Not meant to be complete checking, just a secondary trap and red flag (code can change)\n            console.error(\n                'Refusing to render script tag in post text',\n                cleanText\n            );\n            return <div />;\n        }\n\n        const noImageActive = cleanText.indexOf(noImageText) !== -1;\n\n        // In addition to inserting the youtube component, this allows\n        // react to compare separately preventing excessive re-rendering.\n        let idx = 0;\n        const sections = [];\n\n        // HtmlReady inserts ~~~ embed:${id} type ~~~\n        for (let section of cleanText.split('~~~ embed:')) {\n            const match = section.match(\n                /^([A-Za-z0-9\\?\\=\\_\\-]+) (youtube|vimeo|twitch) ~~~/\n            );\n            if (match && match.length >= 3) {\n                const id = match[1];\n                const type = match[2];\n                const w = large ? 640 : 480,\n                    h = large ? 360 : 270;\n                if (type === 'youtube') {\n                    sections.push(\n                        <YoutubePreview\n                            key={idx++}\n                            width={w}\n                            height={h}\n                            youTubeId={id}\n                            frameBorder=\"0\"\n                            allowFullScreen=\"true\"\n                        />\n                    );\n                } else if (type === 'vimeo') {\n                    const url = `https://player.vimeo.com/video/${id}`;\n                    sections.push(\n                        <div className=\"videoWrapper\">\n                            <iframe\n                                key={idx++}\n                                src={url}\n                                width={w}\n                                height={h}\n                                frameBorder=\"0\"\n                                webkitallowfullscreen\n                                mozallowfullscreen\n                                allowFullScreen\n                            />\n                        </div>\n                    );\n                } else if (type === 'twitch') {\n                    const url = `https://player.twitch.tv/${id}`;\n                    sections.push(\n                        <div className=\"videoWrapper\">\n                            <iframe\n                                key={idx++}\n                                src={url}\n                                width={w}\n                                height={h}\n                                frameBorder=\"0\"\n                                allowFullScreen\n                            />\n                        </div>\n                    );\n                } else {\n                    console.error('MarkdownViewer unknown embed type', type);\n                }\n                section = section.substring(`${id} ${type} ~~~`.length);\n                if (section === '') continue;\n            }\n            sections.push(\n                <div\n                    key={idx++}\n                    dangerouslySetInnerHTML={{ __html: section }}\n                />\n            );\n        }\n\n        const cn =\n            'Markdown' +\n            (this.props.className ? ` ${this.props.className}` : '') +\n            (html ? ' html' : '') +\n            (large ? '' : ' MarkdownViewer--small');\n        return (\n            <div className={'MarkdownViewer ' + cn}>\n                {sections}\n                {noImageActive &&\n                    allowNoImage && (\n                        <div\n                            onClick={this.onAllowNoImage}\n                            className=\"MarkdownViewer__negative_group\"\n                        >\n                            {tt(\n                                'markdownviewer_jsx.images_were_hidden_due_to_low_ratings'\n                            )}\n                            <button\n                                style={{ marginBottom: 0 }}\n                                className=\"button hollow tiny float-right\"\n                            >\n                                {tt('g.show')}\n                            </button>\n                        </div>\n                    )}\n            </div>\n        );\n    }\n}\n\nexport default connect((state, ownProps) => {\n    return { ...ownProps };\n})(MarkdownViewer);\n"]}