{"version":3,"sources":["../../../../src/app/components/cards/PostSummary.jsx"],"names":["userActions","PostSummary","state","revealNsfw","onRevealNsfw","bind","props","thumbSize","pending_payout","total_payout","username","nsfwPref","blogmode","e","preventDefault","setState","ignore","post","content","account","reblogged_by","get","size","toJS","gray","authorRepLog10","flagWeight","isNsfw","pinned","p","immutableAccessor","desc","archived","full_power","post_url","title_text","comments_url","topic","link","title","content_body","content_title","author_category","author","created","summary_header","avatarSize","small","content_footer","permlink","parent_author","summary_footer","SIGNUP_URL","userBlacklisted","ImageUserBlockList","includes","thumb","image_link","blogSize","replace","listSize","commentClasses","push","join","React","Component","propTypes","PropTypes","string","isRequired","object","global","toString","user","getIn","offchain","app","dispatchSubmit","dispatch","usernamePasswordLogin","data","clearError","loginError","error"],"mappings":"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","file":"PostSummary.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router';\nimport TimeAgoWrapper from 'app/components/elements/TimeAgoWrapper';\nimport Icon from 'app/components/elements/Icon';\nimport { connect } from 'react-redux';\nimport * as userActions from 'app/redux/UserReducer';\nimport Reblog from 'app/components/elements/Reblog';\nimport Voting from 'app/components/elements/Voting';\nimport { immutableAccessor } from 'app/utils/Accessors';\nimport extractContent from 'app/utils/ExtractContent';\nimport VotesAndComments from 'app/components/elements/VotesAndComments';\nimport { Map } from 'immutable';\nimport Author from 'app/components/elements/Author';\nimport TagList from 'app/components/elements/TagList';\nimport UserNames from 'app/components/elements/UserNames';\nimport tt from 'counterpart';\nimport ImageUserBlockList from 'app/utils/ImageUserBlockList';\nimport proxifyImageUrl from 'app/utils/ProxifyUrl';\nimport Userpic, { avatarSize } from 'app/components/elements/Userpic';\nimport { SIGNUP_URL } from 'shared/constants';\n\nclass PostSummary extends React.Component {\n    static propTypes = {\n        post: PropTypes.string.isRequired,\n        pending_payout: PropTypes.string.isRequired,\n        total_payout: PropTypes.string.isRequired,\n        content: PropTypes.object.isRequired,\n        thumbSize: PropTypes.string,\n        nsfwPref: PropTypes.string,\n    };\n\n    constructor() {\n        super();\n        this.state = { revealNsfw: false };\n        this.onRevealNsfw = this.onRevealNsfw.bind(this);\n    }\n\n    shouldComponentUpdate(props, state) {\n        return (\n            props.thumbSize !== this.props.thumbSize ||\n            props.pending_payout !== this.props.pending_payout ||\n            props.total_payout !== this.props.total_payout ||\n            props.username !== this.props.username ||\n            props.nsfwPref !== this.props.nsfwPref ||\n            props.blogmode !== this.props.blogmode ||\n            state.revealNsfw !== this.state.revealNsfw\n        );\n    }\n\n    onRevealNsfw(e) {\n        e.preventDefault();\n        this.setState({ revealNsfw: true });\n    }\n\n    render() {\n        const { thumbSize, ignore } = this.props;\n        const { post, content } = this.props;\n        const { account } = this.props;\n        if (!content) return null;\n\n        let reblogged_by;\n        if (\n            content.get('reblogged_by') &&\n            content.get('reblogged_by').size > 0\n        ) {\n            reblogged_by = content.get('reblogged_by').toJS();\n        }\n\n        if (reblogged_by) {\n            reblogged_by = (\n                <div className=\"articles__resteem\">\n                    <p className=\"articles__resteem-text\">\n                        <span className=\"articles__resteem-icon\">\n                            <Icon name=\"reblog\" />\n                        </span>\n                        <UserNames names={reblogged_by} />{' '}\n                        {tt('postsummary_jsx.resteemed')}\n                    </p>\n                </div>\n            );\n        }\n\n        // 'account' is the current blog being viewed, if applicable.\n        if (account && account != content.get('author')) {\n            reblogged_by = (\n                <div className=\"articles__resteem\">\n                    <p className=\"articles__resteem-text\">\n                        <span className=\"articles__resteem-icon\">\n                            <Icon name=\"reblog\" />\n                        </span>\n                        {tt('postsummary_jsx.resteemed')}\n                    </p>\n                </div>\n            );\n        }\n\n        const { gray, authorRepLog10, flagWeight, isNsfw } = content\n            .get('stats', Map())\n            .toJS();\n        const pinned = content.get('pinned');\n        const p = extractContent(immutableAccessor, content);\n        const desc = p.desc;\n\n        const archived = content.get('cashout_time') === '1969-12-31T23:59:59'; // TODO: audit after HF17. #1259\n        const full_power = content.get('percent_steem_dollars') === 0;\n\n        let post_url;\n        let title_text;\n        let comments_url;\n\n        if (content.get('depth') > 0) {\n            title_text = tt('g.re_to', { topic: content.get('root_title') });\n            post_url =\n                '/' +\n                content.get('category') +\n                '/@' +\n                content.get('author') +\n                '/' +\n                content.get('permlink');\n            comments_url = p.link + '#comments';\n        } else {\n            title_text = p.title;\n            post_url = p.link;\n            comments_url = post_url + '#comments';\n        }\n\n        const content_body = (\n            <div className=\"PostSummary__body entry-content\">\n                <Link to={post_url}>{desc}</Link>\n            </div>\n        );\n        const content_title = (\n            <h2 className=\"articles__h2 entry-title\">\n                <Link to={post_url}>\n                    {isNsfw && <span className=\"nsfw-flag\">nsfw</span>}\n                    {title_text}\n                </Link>\n            </h2>\n        );\n\n        // author and category\n        const author_category = (\n            <span className=\"vcard\">\n                <Userpic account={p.author} />\n                <Author\n                    author={p.author}\n                    authorRepLog10={authorRepLog10}\n                    follow={false}\n                    mute={false}\n                />\n                {} {tt('g.in')} <TagList post={p} single />&nbsp;•&nbsp;\n                <Link to={post_url}>\n                    <TimeAgoWrapper date={p.created} className=\"updated\" />\n                </Link>\n            </span>\n        );\n\n        // New Post Summary heading\n        const summary_header = (\n            <div className=\"articles__summary-header\">\n                <div className=\"user\">\n                    {!isNsfw ? (\n                        <div className=\"user__col user__col--left\">\n                            <a className=\"user__link\" href={'/@' + p.author}>\n                                <Userpic\n                                    account={p.author}\n                                    size={avatarSize.small}\n                                />\n                            </a>\n                        </div>\n                    ) : null}\n                    <div className=\"user__col user__col--right\">\n                        <span className=\"user__name\">\n                            <Author\n                                author={p.author}\n                                authorRepLog10={authorRepLog10}\n                                follow={false}\n                                mute={false}\n                            />\n                        </span>\n\n                        <span className=\"articles__tag-link\">\n                            {tt('g.in')}&nbsp;<TagList post={p} single />&nbsp;•&nbsp;\n                        </span>\n                        <Link className=\"timestamp__link\" to={post_url}>\n                            <span className=\"timestamp__time\">\n                                <TimeAgoWrapper\n                                    date={p.created}\n                                    className=\"updated\"\n                                />\n                            </span>\n\n                            {full_power && (\n                                <span\n                                    className=\"articles__icon-100\"\n                                    title={tt('g.powered_up_100')}\n                                >\n                                    <Icon name=\"steempower\" />\n                                </span>\n                            )}\n                        </Link>\n                    </div>\n                </div>\n                <div className=\"articles__flag clearfix\">\n                    <Voting post={post} flag />\n                </div>\n            </div>\n        );\n\n        const content_footer = (\n            <div className=\"PostSummary__footer\">\n                <Voting post={post} showList={false} />\n                <VotesAndComments post={post} commentsLink={comments_url} />\n                <span className=\"PostSummary__time_author_category\">\n                    {!archived && (\n                        <Reblog\n                            author={p.author}\n                            permlink={p.permlink}\n                            parent_author={p.parent_author}\n                        />\n                    )}\n                    <span className=\"show-for-medium\">{author_category}</span>\n                </span>\n            </div>\n        );\n\n        const summary_footer = (\n            <div className=\"articles__summary-footer\">\n                <Voting post={post} showList={false} />\n                <VotesAndComments post={post} commentsLink={comments_url} />\n                <span className=\"PostSummary__time_author_category\">\n                    {!archived && (\n                        <Reblog\n                            author={p.author}\n                            permlink={p.permlink}\n                            parent_author={p.parent_author}\n                        />\n                    )}\n                </span>\n            </div>\n        );\n\n        const { nsfwPref, username } = this.props;\n        const { revealNsfw } = this.state;\n\n        if (isNsfw) {\n            if (nsfwPref === 'hide') {\n                // user wishes to hide these posts entirely\n                return null;\n            } else if (nsfwPref === 'warn' && !revealNsfw) {\n                // user wishes to be warned, and has not revealed this post\n                return (\n                    <article\n                        className={'PostSummary hentry'}\n                        itemScope\n                        itemType=\"http://schema.org/blogPost\"\n                    >\n                        <div className=\"PostSummary__nsfw-warning\">\n                            {summary_header}\n                            <span className=\"nsfw-flag\">\n                                nsfw\n                            </span>&nbsp;&nbsp;<span\n                                className=\"ptc\"\n                                role=\"button\"\n                                onClick={this.onRevealNsfw}\n                            >\n                                <a>{tt('postsummary_jsx.reveal_it')}</a>\n                            </span>{' '}\n                            {tt('g.or') + ' '}\n                            {username ? (\n                                <span>\n                                    {tt('postsummary_jsx.adjust_your')}{' '}\n                                    <Link to={`/@${username}/settings`}>\n                                        {tt(\n                                            'postsummary_jsx.display_preferences'\n                                        )}\n                                    </Link>.\n                                </span>\n                            ) : (\n                                <span>\n                                    <a href={SIGNUP_URL}>\n                                        {tt(\n                                            'postsummary_jsx.create_an_account'\n                                        )}\n                                    </a>{' '}\n                                    {tt(\n                                        'postsummary_jsx.to_save_your_preferences'\n                                    )}.\n                                </span>\n                            )}\n                            {summary_footer}\n                        </div>\n                    </article>\n                );\n            }\n        }\n\n        const userBlacklisted = ImageUserBlockList.includes(p.author);\n\n        let thumb = null;\n        if (!gray && p.image_link && !userBlacklisted) {\n            // on mobile, we always use blog layout style -- there's no toggler\n            // on desktop, we offer a choice of either blog or list\n            // if blogmode is false, output an image with a srcset\n            // which has the 256x512 for whatever the large breakpoint is where the list layout is used\n            // and the 640 for lower than that\n\n            const blogSize = proxifyImageUrl(p.image_link, '640x480').replace(\n                / /g,\n                '%20'\n            );\n\n            if (this.props.blogmode) {\n                thumb = (\n                    <span className=\"articles__feature-img-container\">\n                        <img className=\"articles__feature-img\" src={blogSize} />\n                    </span>\n                );\n            } else {\n                const listSize = proxifyImageUrl(\n                    p.image_link,\n                    '256x512'\n                ).replace(/ /g, '%20');\n\n                thumb = (\n                    <span className=\"articles__feature-img-container\">\n                        <picture className=\"articles__feature-img\">\n                            <source\n                                srcSet={listSize}\n                                media=\"(min-width: 1000px)\"\n                            />\n                            <img srcSet={blogSize} />\n                        </picture>\n                    </span>\n                );\n            }\n        }\n\n        // A post is hidden if it's marked \"gray\" or \"ignore\" and it's not\n        // pinned.\n        const commentClasses = [];\n        if (!pinned && (gray || ignore)) commentClasses.push('downvoted'); // rephide\n\n        return (\n            <div className=\"articles__summary\">\n                {reblogged_by}\n                {summary_header}\n                <div\n                    className={\n                        'articles__content hentry' +\n                        (thumb ? ' with-image ' : ' ') +\n                        commentClasses.join(' ')\n                    }\n                    itemScope\n                    itemType=\"http://schema.org/blogPost\"\n                >\n                    {thumb ? (\n                        <div className=\"articles__content-block articles__content-block--img\">\n                            <Link className=\"articles__link\" to={post_url}>\n                                {thumb}\n                            </Link>\n                        </div>\n                    ) : null}\n                    <div className=\"articles__content-block articles__content-block--text\">\n                        {content_title}\n                        {content_body}\n                        {this.props.blogmode ? null : summary_footer}\n                    </div>\n                    {this.props.blogmode ? summary_footer : null}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default connect(\n    (state, props) => {\n        const { post } = props;\n        const content = state.global.get('content').get(post);\n        let pending_payout = 0;\n        let total_payout = 0;\n        if (content) {\n            pending_payout = content.get('pending_payout_value');\n            total_payout = content.get('total_payout_value');\n        }\n        return {\n            post,\n            content,\n            pending_payout: pending_payout\n                ? pending_payout.toString()\n                : pending_payout,\n            total_payout: total_payout ? total_payout.toString() : total_payout,\n            username:\n                state.user.getIn(['current', 'username']) ||\n                state.offchain.get('account'),\n            blogmode: state.app.getIn(['user_preferences', 'blogmode']),\n        };\n    },\n\n    dispatch => ({\n        dispatchSubmit: data => {\n            dispatch(userActions.usernamePasswordLogin({ ...data }));\n        },\n        clearError: () => {\n            dispatch(userActions.loginError({ error: null }));\n        },\n    })\n)(PostSummary);\n"]}