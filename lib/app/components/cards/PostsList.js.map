{"version":3,"sources":["../../../../src/app/components/cards/PostsList.jsx"],"names":["userActions","topPosition","domElt","offsetTop","offsetParent","PostsList","toggleNegativeReplies","setState","showNegativeComments","state","scrollListener","el","window","document","getElementById","scrollTop","pageYOffset","undefined","documentElement","body","parentNode","offsetHeight","innerHeight","props","loadMore","posts","category","showResteem","size","last","mq","matchMedia","matches","thumbSize","bind","onBackButton","closeOnOutsideClick","shouldComponentUpdate","attachScrollListener","detachScrollListener","removeEventListener","post_overlay","getElementsByTagName","className","e","keyCode","inside_post","target","inside_top_bar","closePostModal","addEventListener","capture","passive","showPinned","showSpam","loading","anyPosts","pathname","content","ignore_result","account","username","nsfwPref","postsInfo","forEach","cont","get","item","console","error","ignore","has","hideResteem","hide","getIn","push","isLoggedInOnFeed","isLoggedOutOnTrending","arePinnedPostsVisible","arePinnedPostsReady","length","showPinnedPosts","pinned","renderPinned","pinnedPosts","map","id","pinnedPost","author","permlink","pinnedPostContent","isSeen","renderSummary","items","i","every","adSlots","shouldSeeAds","slot_id","layout_key","display","marginBottom","React","Component","propTypes","PropTypes","object","isRequired","bool","string","func","fetchState","defaultProps","app","current","user","offchain","global","userPreferences","toJS","dispatch","fetchDataSagaActions","removeHighSecurityKeys"],"mappings":"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","file":"PostsList.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport tt from 'counterpart';\nimport * as userActions from 'app/redux/UserReducer';\nimport { actions as fetchDataSagaActions } from 'app/redux/FetchDataSaga';\nimport PostSummary from 'app/components/cards/PostSummary';\nimport Post from 'app/components/pages/Post';\nimport LoadingIndicator from 'app/components/elements/LoadingIndicator';\nimport debounce from 'lodash.debounce';\nimport CloseButton from 'app/components/elements/CloseButton';\nimport { findParent } from 'app/utils/DomUtils';\nimport Icon from 'app/components/elements/Icon';\nimport GoogleAd from 'app/components/elements/GoogleAd';\nimport shouldComponentUpdate from 'app/utils/shouldComponentUpdate';\n\nfunction topPosition(domElt) {\n    if (!domElt) {\n        return 0;\n    }\n    return domElt.offsetTop + topPosition(domElt.offsetParent);\n}\n\nclass PostsList extends React.Component {\n    static propTypes = {\n        posts: PropTypes.object.isRequired,\n        loading: PropTypes.bool.isRequired,\n        category: PropTypes.string,\n        loadMore: PropTypes.func,\n        showSpam: PropTypes.bool,\n        showResteem: PropTypes.bool,\n        fetchState: PropTypes.func.isRequired,\n        pathname: PropTypes.string,\n        nsfwPref: PropTypes.string.isRequired,\n    };\n\n    static defaultProps = {\n        showSpam: false,\n        loading: false,\n    };\n\n    constructor() {\n        super();\n        this.state = {\n            thumbSize: 'desktop',\n            showNegativeComments: false,\n        };\n        this.scrollListener = this.scrollListener.bind(this);\n        this.onBackButton = this.onBackButton.bind(this);\n        this.closeOnOutsideClick = this.closeOnOutsideClick.bind(this);\n        this.shouldComponentUpdate = shouldComponentUpdate(this, 'PostsList');\n    }\n\n    componentDidMount() {\n        this.attachScrollListener();\n    }\n\n    componentWillUnmount() {\n        this.detachScrollListener();\n        window.removeEventListener('popstate', this.onBackButton);\n        window.removeEventListener('keydown', this.onBackButton);\n        const post_overlay = document.getElementById('post_overlay');\n        if (post_overlay)\n            post_overlay.removeEventListener('click', this.closeOnOutsideClick);\n        document.getElementsByTagName('body')[0].className = '';\n    }\n\n    onBackButton(e) {\n        if ('keyCode' in e && e.keyCode !== 27) return;\n        window.removeEventListener('popstate', this.onBackButton);\n        window.removeEventListener('keydown', this.onBackButton);\n    }\n\n    closeOnOutsideClick(e) {\n        const inside_post = findParent(e.target, 'PostsList__post_container');\n        if (!inside_post) {\n            const inside_top_bar = findParent(\n                e.target,\n                'PostsList__post_top_bar'\n            );\n            if (!inside_top_bar) {\n                const post_overlay = document.getElementById('post_overlay');\n                if (post_overlay)\n                    post_overlay.removeEventListener(\n                        'click',\n                        this.closeOnOutsideClick\n                    );\n                this.closePostModal();\n            }\n        }\n    }\n\n    fetchIfNeeded() {\n        this.scrollListener();\n    }\n\n    toggleNegativeReplies = () => {\n        this.setState({\n            showNegativeComments: !this.state.showNegativeComments,\n        });\n    };\n\n    scrollListener = debounce(() => {\n        const el = window.document.getElementById('posts_list');\n        if (!el) return;\n        const scrollTop =\n            window.pageYOffset !== undefined\n                ? window.pageYOffset\n                : (\n                      document.documentElement ||\n                      document.body.parentNode ||\n                      document.body\n                  ).scrollTop;\n        if (\n            topPosition(el) + el.offsetHeight - scrollTop - window.innerHeight <\n            10\n        ) {\n            const { loadMore, posts, category, showResteem } = this.props;\n            if (loadMore && posts && posts.size)\n                loadMore(posts.last(), category, showResteem);\n        }\n        // Detect if we're in mobile mode (renders larger preview imgs)\n        const mq = window.matchMedia('screen and (max-width: 39.9375em)');\n        if (mq.matches) {\n            this.setState({ thumbSize: 'mobile' });\n        } else {\n            this.setState({ thumbSize: 'desktop' });\n        }\n    }, 150);\n\n    attachScrollListener() {\n        window.addEventListener('scroll', this.scrollListener, {\n            capture: false,\n            passive: true,\n        });\n        window.addEventListener('resize', this.scrollListener, {\n            capture: false,\n            passive: true,\n        });\n        this.scrollListener();\n    }\n\n    detachScrollListener() {\n        window.removeEventListener('scroll', this.scrollListener);\n        window.removeEventListener('resize', this.scrollListener);\n    }\n\n    render() {\n        const {\n            posts,\n            showPinned,\n            showResteem,\n            showSpam,\n            loading,\n            anyPosts,\n            pathname,\n            category,\n            content,\n            ignore_result,\n            account,\n            username,\n            nsfwPref,\n        } = this.props;\n        const { thumbSize } = this.state;\n        const postsInfo = [];\n        posts.forEach(item => {\n            const cont = content.get(item);\n            if (!cont) {\n                console.error('PostsList --> Missing cont key', item);\n                return;\n            }\n            const ignore =\n                ignore_result && ignore_result.has(cont.get('author'));\n            const hideResteem =\n                !showResteem && account && cont.get('author') != account;\n            const hide = cont.getIn(['stats', 'hide']);\n            if (!hideResteem && (!(ignore || hide) || showSpam))\n                // rephide\n                postsInfo.push({ item, ignore });\n        });\n\n        // Helper functions for determining whether to show pinned posts.\n        const isLoggedInOnFeed = username && pathname === `/@${username}/feed`;\n        const isLoggedOutOnTrending =\n            !username && (pathname === '/' || pathname === '/trending');\n        const arePinnedPostsVisible =\n            showPinned && (isLoggedInOnFeed || isLoggedOutOnTrending);\n        const arePinnedPostsReady = isLoggedInOnFeed\n            ? anyPosts\n            : postsInfo.length > 0;\n        const showPinnedPosts = arePinnedPostsVisible && arePinnedPostsReady;\n\n        const pinned = this.props.pinned;\n        const renderPinned = pinnedPosts =>\n            pinnedPosts.map(pinnedPost => {\n                const id = `${pinnedPost.author}/${pinnedPost.permlink}`;\n                const pinnedPostContent = content.get(id);\n                const isSeen = pinnedPostContent.get('seen');\n                return (\n                    <li key={pinnedPost}>\n                        <div className=\"PinLabel\">\n                            <Icon\n                                className=\"PinIcon\"\n                                name={isSeen ? 'pin-disabled' : 'pin'}\n                            />{' '}\n                            <span className=\"PinText\">Pinned Post</span>\n                        </div>\n                        <PostSummary\n                            account={account}\n                            post={id}\n                            thumbSize={thumbSize}\n                            ignore={false}\n                            nsfwPref={nsfwPref}\n                        />\n                    </li>\n                );\n            });\n        const renderSummary = items =>\n            items.map((item, i) => {\n                const every = this.props.adSlots['in_feed_1'].every;\n                if (this.props.shouldSeeAds && i >= every && i % every === 0) {\n                    return (\n                        <div key={item.item}>\n                            <li>\n                                <PostSummary\n                                    account={account}\n                                    post={item.item}\n                                    thumbSize={thumbSize}\n                                    ignore={item.ignore}\n                                    nsfwPref={nsfwPref}\n                                />\n                            </li>\n\n                            <li>\n                                <div className=\"articles__summary\">\n                                    <div className=\"articles__content-block articles__content-block--ad\">\n                                        <GoogleAd\n                                            name=\"in-feed-1\"\n                                            format=\"fluid\"\n                                            slot={\n                                                this.props.adSlots['in_feed_1']\n                                                    .slot_id\n                                            }\n                                            layoutKey={\n                                                this.props.adSlots['in_feed_1']\n                                                    .layout_key\n                                            }\n                                            style={{ display: 'block' }}\n                                        />\n                                    </div>\n                                </div>\n                            </li>\n                        </div>\n                    );\n                } else {\n                    return (\n                        <li key={item.item}>\n                            <PostSummary\n                                account={account}\n                                post={item.item}\n                                thumbSize={thumbSize}\n                                ignore={item.ignore}\n                                nsfwPref={nsfwPref}\n                            />\n                        </li>\n                    );\n                }\n            });\n\n        return (\n            <div id=\"posts_list\" className=\"PostsList\">\n                <ul\n                    className=\"PostsList__summaries hfeed\"\n                    itemScope\n                    itemType=\"http://schema.org/blogPosts\"\n                >\n                    {/* Only render pinned posts when other posts are ready */}\n                    {showPinnedPosts && renderPinned(pinned)}\n                    {renderSummary(postsInfo)}\n                </ul>\n                {loading && (\n                    <center>\n                        <LoadingIndicator\n                            style={{ marginBottom: '2rem' }}\n                            type=\"circle\"\n                        />\n                    </center>\n                )}\n            </div>\n        );\n    }\n}\n\nexport default connect(\n    (state, props) => {\n        const pathname = state.app.get('location').pathname;\n        const current = state.user.get('current');\n        const username = current\n            ? current.get('username')\n            : state.offchain.get('account');\n        const content = state.global.get('content');\n        const ignore_result = state.global.getIn([\n            'follow',\n            'getFollowingAsync',\n            username,\n            'ignore_result',\n        ]);\n        const userPreferences = state.app.get('user_preferences').toJS();\n        const nsfwPref = userPreferences.nsfwPref || 'warn';\n        const pinned = state.offchain\n            .get('pinned_posts')\n            .get('pinned_posts')\n            .toJS();\n        const shouldSeeAds = state.app.getIn(['googleAds', 'shouldSeeAds']);\n        const adSlots = state.app.getIn(['googleAds', 'adSlots']).toJS();\n        return {\n            ...props,\n            pathname,\n            username,\n            content,\n            ignore_result,\n            pathname,\n            nsfwPref,\n            pinned,\n            shouldSeeAds,\n            adSlots,\n        };\n    },\n    dispatch => ({\n        fetchState: pathname => {\n            dispatch(fetchDataSagaActions.fetchState({ pathname }));\n        },\n        removeHighSecurityKeys: () => {\n            dispatch(userActions.removeHighSecurityKeys());\n        },\n    })\n)(PostsList);\n"]}