{"version":3,"sources":["../../../../src/app/components/modules/ConfirmTransactionForm.jsx"],"names":["transactionActions","ConfirmTransactionForm","closeOnOutsideClick","inside_dialog","e","target","onCancel","props","confirmErrorCallback","okClick","confirmBroadcastOperation","onCheckbox","checkboxChecked","checked","setState","state","document","body","addEventListener","removeEventListener","confirm","warning","checkbox","conf","typeName","paddingTop","fontWeight","undefined","Component","propTypes","PropTypes","func","string","oneOfType","object","title","getIn","type","get","transactionType","split","map","n","charAt","toUpperCase","substring","join","transaction","dispatch","hideConfirm","broadcastOperation","toJS"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;IAAYA,kB;;AACZ;;AACA;;;;;;;;IAEMC,sB;;;AAYF,sCAAc;AAAA;;AAAA;;AAAA,cAUdC,mBAVc,GAUQ,aAAK;AACvB,gBAAMC,gBAAgB,0BAAWC,EAAEC,MAAb,EAAqB,wBAArB,CAAtB;AACA,gBAAI,CAACF,aAAL,EAAoB,MAAKG,QAAL;AACvB,SAba;;AAAA,cAcdA,QAdc,GAcH,YAAM;AAAA,8BAC8B,MAAKC,KADnC;AAAA,gBACLC,oBADK,eACLA,oBADK;AAAA,gBACiBF,QADjB,eACiBA,QADjB;;AAEb,gBAAIE,oBAAJ,EAA0BA;AAC1B,gBAAIF,QAAJ,EAAcA;AACjB,SAlBa;;AAAA,cAmBdG,OAnBc,GAmBJ,YAAM;AAAA,+BACmC,MAAKF,KADxC;AAAA,gBACJE,OADI,gBACJA,OADI;AAAA,gBACKC,yBADL,gBACKA,yBADL;;AAEZD,oBAAQC,yBAAR;AACH,SAtBa;;AAAA,cAuBdC,UAvBc,GAuBD,aAAK;AACd,gBAAMC,kBAAkBR,EAAEC,MAAF,CAASQ,OAAjC;AACA,kBAAKC,QAAL,CAAc,EAAEF,gCAAF,EAAd;AACH,SA1Ba;;AAEV,cAAKG,KAAL,GAAa,EAAEH,iBAAiB,KAAnB,EAAb;AAFU;AAGb;;;;4CACmB;AAChBI,qBAASC,IAAT,CAAcC,gBAAd,CAA+B,OAA/B,EAAwC,KAAKhB,mBAA7C;AACH;;;+CACsB;AACnBc,qBAASC,IAAT,CAAcE,mBAAd,CAAkC,OAAlC,EAA2C,KAAKjB,mBAAhD;AACH;;;iCAkBQ;AAAA,gBACGI,QADH,GACqC,IADrC,CACGA,QADH;AAAA,gBACaG,OADb,GACqC,IADrC,CACaA,OADb;AAAA,gBACsBE,UADtB,GACqC,IADrC,CACsBA,UADtB;AAAA,yBAOD,KAAKJ,KAPJ;AAAA,gBAGDa,OAHC,UAGDA,OAHC;AAAA,gBAIDV,yBAJC,UAIDA,yBAJC;AAAA,gBAKDW,OALC,UAKDA,OALC;AAAA,gBAMDC,QANC,UAMDA,QANC;AAAA,gBAQGV,eARH,GAQuB,KAAKG,KAR5B,CAQGH,eARH;;AASL,gBAAMW,OAAO,OAAOH,OAAP,KAAmB,UAAnB,GAAgCA,SAAhC,GAA4CA,OAAzD;AACA,mBACI;AAAA;AAAA,kBAAK,WAAU,wBAAf;AACI;AAAA;AAAA;AAAKI,6BAASd,yBAAT;AAAL,iBADJ;AAEI,yDAFJ;AAGI;AAAA;AAAA;AAAMa;AAAN,iBAHJ;AAIKF,0BACG;AAAA;AAAA;AACI,+BAAO,EAAEI,YAAY,EAAd,EAAkBC,YAAY,MAA9B,EADX;AAEI,mCAAU;AAFd;AAIKL;AAJL,iBADH,GAOG,IAXR;AAYKC,2BACG;AAAA;AAAA;AACI;AAAA;AAAA,0BAAO,SAAQ,UAAf;AACI;AACI,gCAAG,UADP;AAEI,kCAAK,UAFT;AAGI,qCAASV,eAHb;AAII,sCAAU,KAAKD;AAJnB,0BADJ;AAOKW;AAPL;AADJ,iBADH,GAYG,IAxBR;AAyBI,yDAzBJ;AA0BI;AAAA;AAAA;AACI,mCAAU,QADd;AAEI,iCAASb,OAFb;AAGI,kCAAU,EAAEa,aAAaK,SAAb,IAA0Bf,eAA5B;AAHd;AAKK,+CAAG,MAAH;AALL,iBA1BJ;AAiCI;AAAA;AAAA;AACI,8BAAK,eADT;AAEI,mCAAU,eAFd;AAGI,iCAASN;AAHb;AAKK,+CAAG,UAAH;AALL;AAjCJ,aADJ;AA2CH;;;EA5FgCsB,gB,UAC1BC,S,GAAY;AACf;AACAvB,cAAUwB,oBAAUC,IAFL;AAGfV,aAASS,oBAAUE,MAHJ;AAIfV,cAAUQ,oBAAUE,MAJL;AAKf;AACAZ,aAASU,oBAAUG,SAAV,CAAoB,CAACH,oBAAUE,MAAX,EAAmBF,oBAAUC,IAA7B,CAApB,CANM;AAOfrB,+BAA2BoB,oBAAUI,MAPtB;AAQf1B,0BAAsBsB,oBAAUC,IARjB;AASftB,aAASqB,oBAAUC;AATJ,C;;AA6FvB,IAAMP,WAAW,SAAXA,QAAW,4BAA6B;AAC1C,QAAMW,QAAQzB,0BAA0B0B,KAA1B,CAAgC,CAC1C,WAD0C,EAE1C,UAF0C,EAG1C,OAH0C,CAAhC,CAAd;AAKA,QAAID,KAAJ,EAAW,OAAOA,KAAP;AACX,QAAME,OAAO3B,0BAA0B4B,GAA1B,CAA8B,MAA9B,CAAb;AACA,WAAO,2BAAG,oCAAH,EAAyC;AAC5CC,yBAAiBF,KACZG,KADY,CACN,GADM,EAEZC,GAFY,CAER;AAAA,mBAAKC,EAAEC,MAAF,CAAS,CAAT,EAAYC,WAAZ,KAA4BF,EAAEG,SAAF,CAAY,CAAZ,CAAjC;AAAA,SAFQ,EAGZC,IAHY,CAGP,GAHO,CAD2B,CAI5B;AAJ4B,KAAzC,CAAP;AAMH,CAdD;;kBAgBe;AACX;AACA,iBAAS;AACL,QAAMpC,4BAA4BK,MAAMgC,WAAN,CAAkBT,GAAlB,CAC9B,2BAD8B,CAAlC;AAGA,QAAM9B,uBAAuBO,MAAMgC,WAAN,CAAkBT,GAAlB,CACzB,sBADyB,CAA7B;AAGA,QAAMlB,UAAUL,MAAMgC,WAAN,CAAkBT,GAAlB,CAAsB,SAAtB,CAAhB;AACA,QAAMjB,UAAUN,MAAMgC,WAAN,CAAkBT,GAAlB,CAAsB,SAAtB,CAAhB;AACA,QAAMhB,WAAWP,MAAMgC,WAAN,CAAkBT,GAAlB,CAAsB,UAAtB,CAAjB;AACA,WAAO;AACH5B,4DADG;AAEHF,kDAFG;AAGHY,wBAHG;AAIHC,wBAJG;AAKHC;AALG,KAAP;AAOH,CAnBU;AAoBX;AACA;AAAA,WAAa;AACTb,iBAAS,4CAA6B;AAClCuC,qBAAShD,mBAAmBiD,WAAnB,EAAT;AACAD,qBACIhD,mBAAmBkD,kBAAnB,4BACOxC,0BAA0ByC,IAA1B,EADP,EADJ;AAKH;AARQ,KAAb;AAAA,CArBW,EA+BblD,sBA/Ba,C","file":"ConfirmTransactionForm.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport * as transactionActions from 'app/redux/TransactionReducer';\nimport { findParent } from 'app/utils/DomUtils';\nimport tt from 'counterpart';\n\nclass ConfirmTransactionForm extends Component {\n    static propTypes = {\n        //Steemit\n        onCancel: PropTypes.func,\n        warning: PropTypes.string,\n        checkbox: PropTypes.string,\n        // redux-form\n        confirm: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n        confirmBroadcastOperation: PropTypes.object,\n        confirmErrorCallback: PropTypes.func,\n        okClick: PropTypes.func,\n    };\n    constructor() {\n        super();\n        this.state = { checkboxChecked: false };\n    }\n    componentDidMount() {\n        document.body.addEventListener('click', this.closeOnOutsideClick);\n    }\n    componentWillUnmount() {\n        document.body.removeEventListener('click', this.closeOnOutsideClick);\n    }\n    closeOnOutsideClick = e => {\n        const inside_dialog = findParent(e.target, 'ConfirmTransactionForm');\n        if (!inside_dialog) this.onCancel();\n    };\n    onCancel = () => {\n        const { confirmErrorCallback, onCancel } = this.props;\n        if (confirmErrorCallback) confirmErrorCallback();\n        if (onCancel) onCancel();\n    };\n    okClick = () => {\n        const { okClick, confirmBroadcastOperation } = this.props;\n        okClick(confirmBroadcastOperation);\n    };\n    onCheckbox = e => {\n        const checkboxChecked = e.target.checked;\n        this.setState({ checkboxChecked });\n    };\n    render() {\n        const { onCancel, okClick, onCheckbox } = this;\n        const {\n            confirm,\n            confirmBroadcastOperation,\n            warning,\n            checkbox,\n        } = this.props;\n        const { checkboxChecked } = this.state;\n        const conf = typeof confirm === 'function' ? confirm() : confirm;\n        return (\n            <div className=\"ConfirmTransactionForm\">\n                <h4>{typeName(confirmBroadcastOperation)}</h4>\n                <hr />\n                <div>{conf}</div>\n                {warning ? (\n                    <div\n                        style={{ paddingTop: 10, fontWeight: 'bold' }}\n                        className=\"error\"\n                    >\n                        {warning}\n                    </div>\n                ) : null}\n                {checkbox ? (\n                    <div>\n                        <label htmlFor=\"checkbox\">\n                            <input\n                                id=\"checkbox\"\n                                type=\"checkbox\"\n                                checked={checkboxChecked}\n                                onChange={this.onCheckbox}\n                            />\n                            {checkbox}\n                        </label>\n                    </div>\n                ) : null}\n                <br />\n                <button\n                    className=\"button\"\n                    onClick={okClick}\n                    disabled={!(checkbox === undefined || checkboxChecked)}\n                >\n                    {tt('g.ok')}\n                </button>\n                <button\n                    type=\"button hollow\"\n                    className=\"button hollow\"\n                    onClick={onCancel}\n                >\n                    {tt('g.cancel')}\n                </button>\n            </div>\n        );\n    }\n}\nconst typeName = confirmBroadcastOperation => {\n    const title = confirmBroadcastOperation.getIn([\n        'operation',\n        '__config',\n        'title',\n    ]);\n    if (title) return title;\n    const type = confirmBroadcastOperation.get('type');\n    return tt('confirmtransactionform_jsx.confirm', {\n        transactionType: type\n            .split('_')\n            .map(n => n.charAt(0).toUpperCase() + n.substring(1))\n            .join(' '), // @todo we should translate each potential transaction type!\n    });\n};\n\nexport default connect(\n    // mapStateToProps\n    state => {\n        const confirmBroadcastOperation = state.transaction.get(\n            'confirmBroadcastOperation'\n        );\n        const confirmErrorCallback = state.transaction.get(\n            'confirmErrorCallback'\n        );\n        const confirm = state.transaction.get('confirm');\n        const warning = state.transaction.get('warning');\n        const checkbox = state.transaction.get('checkbox');\n        return {\n            confirmBroadcastOperation,\n            confirmErrorCallback,\n            confirm,\n            warning,\n            checkbox,\n        };\n    },\n    // mapDispatchToProps\n    dispatch => ({\n        okClick: confirmBroadcastOperation => {\n            dispatch(transactionActions.hideConfirm());\n            dispatch(\n                transactionActions.broadcastOperation({\n                    ...confirmBroadcastOperation.toJS(),\n                })\n            );\n        },\n    })\n)(ConfirmTransactionForm);\n"]}