{"version":3,"sources":["../../../../../src/app/components/modules/Flag/Flag.test.jsx"],"names":["adapter","Adapter","describe","component","fallback","child","it","wrapper","expect","text","toEqual","html","toBe","not"],"mappings":";;AACA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;;;AAPA;AASA,uBAAU,EAAEA,SAAS,IAAIC,4BAAJ,EAAX,EAAV;;AAEAC,SAAS,MAAT,EAAiB,YAAM;AACnB,QAAIC,YAAY,8BAAC,0BAAD,OAAhB;AACA,QAAIC,WAAW,8BAAC,cAAD,IAAM,MAAK,MAAX,GAAf;AACA,QAAIC,QAAQ;AAAA;AAAA;AAAA;AAAA,KAAZ;;AAEAC,OAAG,wDAAH,EAA6D,YAAM;AAC/D,YAAMC,UAAU,qBACZ,8BAAC,cAAD;AACI,qBAAS,IADb;AAEI,2BAAeJ,SAFnB;AAGI,sBAAUC,QAHd;AAII,sBAAUC;AAJd,UADY,CAAhB;AAQAG,eAAOD,QAAQE,IAAR,EAAP,EAAuBC,OAAvB,CAA+B,eAA/B;AACH,KAVD;AAWAJ,OAAG,uFAAH,EAA4F,YAAM;AAC9F,YAAMC,UAAU,qBACZ,8BAAC,cAAD;AACI,qBAAS,IADb;AAEI,2BAAeJ,SAFnB;AAGI,sBAAUC;AAHd,UADY,CAAhB;AAOAI,eAAOD,QAAQE,IAAR,EAAP,EAAuBC,OAAvB,CAA+B,sBAA/B;AACH,KATD;;AAWAJ,OAAG,8EAAH,EAAmF,YAAM;AACrF,YAAMC,UAAU,qBACZ,8BAAC,cAAD,IAAM,SAAS,KAAf,EAAsB,eAAeJ,SAArC,GADY,CAAhB;AAGAK,eAAOD,QAAQI,IAAR,EAAP,EAAuBC,IAAvB,CAA4B,IAA5B;AACH,KALD;;AAOAN,OAAG,qEAAH,EAA0E,YAAM;AAC5E,YAAMC,UAAU,qBACZ,8BAAC,cAAD;AACI,qBAAS,KADb;AAEI,2BAAeJ,SAFnB;AAGI,sBAAUC;AAHd,UADY,CAAhB;AAOAI,eAAOD,QAAQI,IAAR,EAAP,EAAuBE,GAAvB,CAA2BD,IAA3B,CAAgC,IAAhC;AACAJ,eAAOD,QAAQE,IAAR,EAAP,EAAuBC,OAAvB,CAA+B,UAA/B;AACH,KAVD;;AAYAJ,OAAG,mEAAH,EAAwE,YAAM;AAC1E,YAAMC,UAAU,qBACZ,8BAAC,cAAD;AACI,qBAAS,IADb;AAEI,2BAAeJ,SAFnB;AAGI,sBAAUC,QAHd;AAII,sBAAUC;AAJd,UADY,CAAhB;AAQA;AACA;AACAG,eAAOD,QAAQE,IAAR,EAAP,EAAuBC,OAAvB,CAA+B,eAA/B;AACH,KAZD;AAaH,CA3DD","file":"Flag.test.js","sourcesContent":["/*global describe, it, before, beforeEach, after, afterEach */\nimport React from 'react';\nimport { configure, shallow } from 'enzyme';\nimport Adapter from 'enzyme-adapter-react-15';\nimport LoadingIndicator from 'app/components/elements/LoadingIndicator';\nimport Icon from 'app/components/elements/Icon';\n\nimport Flag from 'app/components/modules/Flag';\n\nconfigure({ adapter: new Adapter() });\n\ndescribe('Flag', () => {\n    let component = <LoadingIndicator />;\n    let fallback = <Icon name=\"user\" />;\n    let child = <div> HELLO WORLD </div>;\n\n    it('should render the children  when the flag prop is true', () => {\n        const wrapper = shallow(\n            <Flag\n                flagged={true}\n                FlagComponent={component}\n                Fallback={fallback}\n                children={child}\n            />\n        );\n        expect(wrapper.text()).toEqual(' HELLO WORLD ');\n    });\n    it('should render the FlagComponent  when the flag prop is true and there are no children', () => {\n        const wrapper = shallow(\n            <Flag\n                flagged={true}\n                FlagComponent={component}\n                Fallback={fallback}\n            />\n        );\n        expect(wrapper.text()).toEqual('<LoadingIndicator />');\n    });\n\n    it('should render null when the flag condition fails and no fallback is provided', () => {\n        const wrapper = shallow(\n            <Flag flagged={false} FlagComponent={component} />\n        );\n        expect(wrapper.html()).toBe(null);\n    });\n\n    it('should render the fallback component if the flag condition is false', () => {\n        const wrapper = shallow(\n            <Flag\n                flagged={false}\n                FlagComponent={component}\n                Fallback={fallback}\n            />\n        );\n        expect(wrapper.html()).not.toBe(null);\n        expect(wrapper.text()).toEqual('<Icon />');\n    });\n\n    it('should render children but not FlagComponent if both are provided', () => {\n        const wrapper = shallow(\n            <Flag\n                flagged={true}\n                FlagComponent={component}\n                Fallback={fallback}\n                children={child}\n            />\n        );\n        // There isn't a good way to check for proptypes errors\n        // see https://stackoverflow.com/questions/26124914/how-to-test-react-proptypes-through-jest\n        expect(wrapper.text()).toEqual(' HELLO WORLD ');\n    });\n});\n"]}