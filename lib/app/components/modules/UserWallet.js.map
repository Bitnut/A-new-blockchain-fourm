{"version":3,"sources":["../../../../src/app/components/modules/UserWallet.jsx"],"names":["transactionActions","globalActions","assetPrecision","UserWallet","handleClaimRewards","setState","claimInProgress","props","claimRewards","account","state","onShowDepositSteem","e","preventDefault","name","current_user","get","new_window","window","open","opener","location","onShowWithdrawSteem","onShowDepositPower","current_user_name","onShowDepositSBD","onShowWithdrawSBD","shouldComponentUpdate","convertToSteem","price_per_steem","savings_withdraws","open_orders","gprops","toJS","has","vesting_steem","delegated_steem","isMyAccount","disabledWarning","showTransfer","asset","transferType","to","savings_balance","savings_sbd_balance","powerDown","cancel","vesting_shares","toggleDivestError","errorCallback","e2","toString","successCallback","withdrawVesting","to_withdraw","withdrawn","delegated_vesting_shares","showPowerdown","savings_pending","savings_sbd_pending","forEach","withdraw","split","amount","parseFloat","conversionValue","currentTime","Date","getTime","conversions","reduce","out","item","getIn","timestamp","finishTime","replace","concat","date","toLocaleString","toFixed","balance_steem","saving_balance_steem","divesting","sbd_balance","sbd_balance_savings","sbdOrders","o","order","sell_price","base","indexOf","for_sale","steemOrders","total_sbd","total_steem","total_value","estimate_output","idx","transfer_log","map","data","type","sbd_payout","vesting_payout","filter","el","reverse","steem_menu","value","link","onClick","bind","power_menu","dollar_menu","push","isWithdrawScheduled","now","steem_balance_str","steem_orders_balance_str","power_balance_str","received_power_balance_str","sbd_balance_str","sbd_orders_balance_str","savings_balance_str","savings_sbd_balance_str","savings_menu","LIQUID_TOKEN","savings_sbd_menu","DEBT_TOKENS","sbdInterest","sbd_interest","sbdMessage","reward_steem","reward_sbd","reward_sp","rewards","rewards_str","length","claimbox","VESTING_TOKEN","paddingRight","user_name","React","Component","ownProps","user","global","market","username","dispatch","getState","url","operation","reward_vests","broadcastOperation","showDialog","showChangePassword","remove","key","params"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;AACA;;AACA;;AACA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AAMA;;;;AACA;;;;AACA;;;;AACA;;AACA;;AAMA;;IAAYA,kB;;AACZ;;IAAYC,a;;AACZ;;;;;;;;AA5BA;AA8BA,IAAMC,iBAAiB,IAAvB;;IAEMC,U;;;AACF,0BAAc;AAAA;;AAAA;;AAAA,cA+CdC,kBA/Cc,GA+CO,mBAAW;AAC5B,kBAAKC,QAAL,CAAc,EAAEC,iBAAiB,IAAnB,EAAd,EAD4B,CACc;AAC1C,kBAAKC,KAAL,CAAWC,YAAX,CAAwBC,OAAxB;AACH,SAlDa;;AAEV,cAAKC,KAAL,GAAa;AACTJ,6BAAiB;AADR,SAAb;AAGA,cAAKK,kBAAL,GAA0B,aAAK;AAC3B,gBAAIC,KAAKA,EAAEC,cAAX,EAA2BD,EAAEC,cAAF;AAC3B,gBAAMC,OAAO,MAAKP,KAAL,CAAWQ,YAAX,CAAwBC,GAAxB,CAA4B,UAA5B,CAAb;AACA,gBAAMC,aAAaC,OAAOC,IAAP,EAAnB;AACAF,uBAAWG,MAAX,GAAoB,IAApB;AACAH,uBAAWI,QAAX,GACI,wFACAP,IAFJ;AAGH,SARD;AASA,cAAKQ,mBAAL,GAA2B,aAAK;AAC5BV,cAAEC,cAAF;AACA,gBAAMI,aAAaC,OAAOC,IAAP,EAAnB;AACAF,uBAAWG,MAAX,GAAoB,IAApB;AACAH,uBAAWI,QAAX,GACI,qDADJ;AAEH,SAND;AAOA,cAAKE,kBAAL,GAA0B,UAACC,iBAAD,EAAoBZ,CAApB,EAA0B;AAChDA,cAAEC,cAAF;AACA,gBAAMI,aAAaC,OAAOC,IAAP,EAAnB;AACAF,uBAAWG,MAAX,GAAoB,IAApB;AACAH,uBAAWI,QAAX,GACI,8FACAG,iBAFJ;AAGH,SAPD;AAQA,cAAKC,gBAAL,GAAwB,UAACD,iBAAD,EAAoBZ,CAApB,EAA0B;AAC9CA,cAAEC,cAAF;AACA,gBAAMI,aAAaC,OAAOC,IAAP,EAAnB;AACAF,uBAAWG,MAAX,GAAoB,IAApB;AACAH,uBAAWI,QAAX,GACI,sFACAG,iBAFJ;AAGH,SAPD;AAQA,cAAKE,iBAAL,GAAyB,aAAK;AAC1Bd,cAAEC,cAAF;AACA,gBAAMI,aAAaC,OAAOC,IAAP,EAAnB;AACAF,uBAAWG,MAAX,GAAoB,IAApB;AACAH,uBAAWI,QAAX,GACI,mDADJ;AAEH,SAND;AAOA,cAAKM,qBAAL,GAA6B,4CAA4B,YAA5B,CAA7B;AA5CU;AA6Cb;;;;iCAOQ;AAAA;;AAAA,gBAEDhB,kBAFC,GAOD,IAPC,CAEDA,kBAFC;AAAA,gBAGDW,mBAHC,GAOD,IAPC,CAGDA,mBAHC;AAAA,gBAIDG,gBAJC,GAOD,IAPC,CAIDA,gBAJC;AAAA,gBAKDC,iBALC,GAOD,IAPC,CAKDA,iBALC;AAAA,gBAMDH,kBANC,GAOD,IAPC,CAMDA,kBANC;AAAA,yBAeD,KAAKhB,KAfJ;AAAA,gBASDqB,cATC,UASDA,cATC;AAAA,gBAUDC,eAVC,UAUDA,eAVC;AAAA,gBAWDC,iBAXC,UAWDA,iBAXC;AAAA,gBAYDrB,OAZC,UAYDA,OAZC;AAAA,gBAaDM,YAbC,UAaDA,YAbC;AAAA,gBAcDgB,WAdC,UAcDA,WAdC;;AAgBL,gBAAMC,SAAS,KAAKzB,KAAL,CAAWyB,MAAX,CAAkBC,IAAlB,EAAf;;AAEA;AACA,gBAAI,CAACxB,OAAL,EAAc,OAAO,IAAP;;AAEd;AACA,gBAAI,CAACA,QAAQyB,GAAR,CAAY,gBAAZ,CAAL,EAAoC,OAAO,IAAP;;AAEpC,gBAAIC,gBAAgB,kCAAa1B,QAAQwB,IAAR,EAAb,EAA6BD,MAA7B,CAApB;AACA,gBAAII,kBAAkB,oCAAe3B,QAAQwB,IAAR,EAAf,EAA+BD,MAA/B,CAAtB;;AAEA,gBAAIK,cACAtB,gBACAA,aAAaC,GAAb,CAAiB,UAAjB,MAAiCP,QAAQO,GAAR,CAAY,MAAZ,CAFrC;;AAIA,gBAAMsB,kBAAkB,KAAxB;AACA;;AAEA,gBAAMC,eAAe,SAAfA,YAAe,CAACC,KAAD,EAAQC,YAAR,EAAsB7B,CAAtB,EAA4B;AAC7CA,kBAAEC,cAAF;AACA,uBAAKN,KAAL,CAAWgC,YAAX,CAAwB;AACpBG,wBAAIL,cAAc,IAAd,GAAqB5B,QAAQO,GAAR,CAAY,MAAZ,CADL;AAEpBwB,gCAFoB;AAGpBC;AAHoB,iBAAxB;AAKH,aAPD;;AASA,gBAAME,kBAAkBlC,QAAQO,GAAR,CAAY,iBAAZ,CAAxB;AACA,gBAAM4B,sBAAsBnC,QAAQO,GAAR,CAAY,qBAAZ,CAA5B;;AAEA,gBAAM6B,YAAY,SAAZA,SAAY,CAACC,MAAD,EAASlC,CAAT,EAAe;AAC7BA,kBAAEC,cAAF;AACA,oBAAMC,OAAOL,QAAQO,GAAR,CAAY,MAAZ,CAAb;AACA,oBAAI8B,MAAJ,EAAY;AACR,wBAAMC,iBAAiBD,SACjB,gBADiB,GAEjBrC,QAAQO,GAAR,CAAY,gBAAZ,CAFN;AAGA,2BAAKX,QAAL,CAAc,EAAE2C,mBAAmB,IAArB,EAAd;AACA,wBAAMC,gBAAgB,SAAhBA,aAAgB,KAAM;AACxB,+BAAK5C,QAAL,CAAc,EAAE2C,mBAAmBE,GAAGC,QAAH,EAArB,EAAd;AACH,qBAFD;AAGA,wBAAMC,kBAAkB,SAAlBA,eAAkB,GAAM;AAC1B,+BAAK/C,QAAL,CAAc,EAAE2C,mBAAmB,IAArB,EAAd;AACH,qBAFD;AAGA,2BAAKzC,KAAL,CAAW8C,eAAX,CAA2B;AACvB5C,iCAASK,IADc;AAEvBiC,sDAFuB;AAGvBE,oDAHuB;AAIvBG;AAJuB,qBAA3B;AAMH,iBAjBD,MAiBO;AACH,wBAAME,cAAc7C,QAAQO,GAAR,CAAY,aAAZ,CAApB;AACA,wBAAMuC,YAAY9C,QAAQO,GAAR,CAAY,WAAZ,CAAlB;AACA,wBAAM+B,kBAAiBtC,QAAQO,GAAR,CAAY,gBAAZ,CAAvB;AACA,wBAAMwC,2BAA2B/C,QAAQO,GAAR,CAC7B,0BAD6B,CAAjC;AAGA,2BAAKT,KAAL,CAAWkD,aAAX,CAAyB;AACrBhD,iCAASK,IADY;AAErBwC,gDAFqB;AAGrBC,4CAHqB;AAIrBR,uDAJqB;AAKrBS;AALqB,qBAAzB;AAOH;AACJ,aAnCD;;AAqCA;AACA,gBAAIE,kBAAkB,CAAtB;AAAA,gBACIC,sBAAsB,CAD1B;AAEA,gBAAI7B,iBAAJ,EAAuB;AACnBA,kCAAkB8B,OAAlB,CAA0B,oBAAY;AAAA,8CACVC,SAAS7C,GAAT,CAAa,QAAb,EAAuB8C,KAAvB,CAA6B,GAA7B,CADU;AAAA;AAAA,wBAC3BC,MAD2B;AAAA,wBACnBvB,KADmB;;AAElC,wBAAIA,UAAU,OAAd,EAAuBkB,mBAAmBM,WAAWD,MAAX,CAAnB,CAAvB,KACK;AACD,4BAAIvB,UAAU,KAAd,EACImB,uBAAuBK,WAAWD,MAAX,CAAvB;AACP;AACJ,iBAPD;AAQH;;AAED;AACA,gBAAIE,kBAAkB,CAAtB;AACA,gBAAMC,cAAc,IAAIC,IAAJ,GAAWC,OAAX,EAApB;AACA,gBAAMC,cAAc5D,QACfO,GADe,CACX,eADW,EACM,sBADN,EAEfsD,MAFe,CAER,UAACC,GAAD,EAAMC,IAAN,EAAe;AACnB,oBAAIA,KAAKC,KAAL,CAAW,CAAC,CAAD,EAAI,IAAJ,EAAU,CAAV,CAAX,EAAyB,EAAzB,MAAiC,SAArC,EAAgD,OAAOF,GAAP;;AAEhD,oBAAMG,YAAY,IAAIP,IAAJ,CACdK,KAAKC,KAAL,CAAW,CAAC,CAAD,EAAI,WAAJ,CAAX,CADc,EAEhBL,OAFgB,EAAlB;AAGA,oBAAMO,aAAaD,YAAY,WAAW,GAA1C,CANmB,CAM4B;AAC/C,oBAAIC,aAAaT,WAAjB,EAA8B,OAAOK,GAAP;;AAE9B,oBAAMR,SAASC,WACXQ,KAAKC,KAAL,CAAW,CAAC,CAAD,EAAI,IAAJ,EAAU,CAAV,EAAa,QAAb,CAAX,EAAmCG,OAAnC,CAA2C,MAA3C,EAAmD,EAAnD,CADW,CAAf;AAGAX,mCAAmBF,MAAnB;;AAEA,uBAAOQ,IAAIM,MAAJ,CAAW,CACd;AAAA;AAAA,sBAAK,KAAKL,KAAKxD,GAAL,CAAS,CAAT,CAAV;AACI;AAAC,yCAAD;AAAA;AACI,+BAAG,2BAAG,wCAAH,EAA6C;AAC5C8D,sCAAM,IAAIX,IAAJ,CAASQ,UAAT,EAAqBI,cAArB;AADsC,6BAA7C;AADP;AAKI;AAAA;AAAA;AAAA;AACO,uDAAG,8BAAH,EAAmC;AAClChB,wCAAQ,sCACJ,MAAMA,OAAOiB,OAAP,CAAe,CAAf,CADF;AAD0B,6BAAnC,CADP;AAAA;AAAA;AALJ;AADJ,iBADc,CAAX,CAAP;AAiBH,aAjCe,EAiCb,EAjCa,CAApB;;AAmCA,gBAAMC,gBAAgBjB,WAAWvD,QAAQO,GAAR,CAAY,SAAZ,EAAuB8C,KAAvB,CAA6B,GAA7B,EAAkC,CAAlC,CAAX,CAAtB;AACA,gBAAMoB,uBAAuBlB,WAAWrB,gBAAgBmB,KAAhB,CAAsB,GAAtB,EAA2B,CAA3B,CAAX,CAA7B;AACA,gBAAMqB,YACFnB,WAAWvD,QAAQO,GAAR,CAAY,uBAAZ,EAAqC8C,KAArC,CAA2C,GAA3C,EAAgD,CAAhD,CAAX,IACA,GAFJ;AAGA,gBAAMsB,cAAcpB,WAAWvD,QAAQO,GAAR,CAAY,aAAZ,CAAX,CAApB;AACA,gBAAMqE,sBAAsBrB,WACxBpB,oBAAoBkB,KAApB,CAA0B,GAA1B,EAA+B,CAA/B,CADwB,CAA5B;AAGA,gBAAMwB,YACF,CAACvD,WAAD,IAAgB,CAACM,WAAjB,GACM,CADN,GAEMN,YAAYuC,MAAZ,CAAmB,UAACiB,CAAD,EAAIC,KAAJ,EAAc;AAC7B,oBAAIA,MAAMC,UAAN,CAAiBC,IAAjB,CAAsBC,OAAtB,CAA8B,KAA9B,MAAyC,CAAC,CAA9C,EAAiD;AAC7CJ,yBAAKC,MAAMI,QAAX;AACH;AACD,uBAAOL,CAAP;AACH,aALD,EAKG,CALH,IAKQrF,cARlB;;AAUA,gBAAM2F,cACF,CAAC9D,WAAD,IAAgB,CAACM,WAAjB,GACM,CADN,GAEMN,YAAYuC,MAAZ,CAAmB,UAACiB,CAAD,EAAIC,KAAJ,EAAc;AAC7B,oBAAIA,MAAMC,UAAN,CAAiBC,IAAjB,CAAsBC,OAAtB,CAA8B,OAA9B,MAA2C,CAAC,CAAhD,EAAmD;AAC/CJ,yBAAKC,MAAMI,QAAX;AACH;AACD,uBAAOL,CAAP;AACH,aALD,EAKG,CALH,IAKQrF,cARlB;;AAUA;AACA,gBAAM4F,YACFV,cACAC,mBADA,GAEA1B,mBAFA,GAGA2B,SAHA,GAIArB,eALJ;AAMA,gBAAM8B,cACF5D,gBACA8C,aADA,GAEAC,oBAFA,GAGAxB,eAHA,GAIAmC,WALJ;AAMA,gBAAIG,cACA,MACA,sCACI,CAACD,cAAclE,eAAd,GAAgCiE,SAAjC,EAA4Cd,OAA5C,CAAoD,CAApD,CADJ,CAFJ;;AAMA;AACA,gBAAIiB,kBAAkB;AAAA;AAAA;AAAID;AAAJ,aAAtB;AACA,gBAAI3D,WAAJ,EAAiB;AACb4D,kCAAkB;AAAA;AAAA;AAAID,+BAAJ;AAAA;AAAA,iBAAlB;AACH;;AAED;AACA,gBAAIE,MAAM,CAAV;AACA,gBAAMC,eAAe1F,QAChBO,GADgB,CACZ,kBADY,EAEhBoF,GAFgB,CAEZ,gBAAQ;AACT,oBAAMC,OAAO7B,KAAKC,KAAL,CAAW,CAAC,CAAD,EAAI,IAAJ,EAAU,CAAV,CAAX,CAAb;AACA,oBAAM6B,OAAO9B,KAAKC,KAAL,CAAW,CAAC,CAAD,EAAI,IAAJ,EAAU,CAAV,CAAX,CAAb;;AAEA;AACA,oBACI6B,SAAS,iBAAT,IACAA,SAAS,eADT,IAEAA,SAAS,2BAHb,EAIE;AACE,2BAAO,IAAP;AACH;;AAED,oBACID,KAAKE,UAAL,KAAoB,WAApB,IACAF,KAAKG,cAAL,KAAwB,gBAF5B,EAII,OAAO,IAAP;AACJ,uBACI,8BAAC,4BAAD;AACI,yBAAKN,KADT;AAEI,wBAAI1B,KAAKvC,IAAL,EAFR;AAGI,6BAASxB,QAAQO,GAAR,CAAY,MAAZ;AAHb,kBADJ;AAOH,aA3BgB,EA4BhByF,MA5BgB,CA4BT;AAAA,uBAAM,CAAC,CAACC,EAAR;AAAA,aA5BS,EA6BhBC,OA7BgB,EAArB;;AA+BA,gBAAIC,aAAa,CACb;AACIC,uBAAO,2BAAG,yBAAH,CADX;AAEIC,sBAAM,GAFV;AAGIC,yBAASxE,aAAayE,IAAb,CACL,IADK,EAEL,OAFK,EAGL,qBAHK;AAHb,aADa,EAUb;AACIH,uBAAO,2BAAG,oCAAH,CADX;AAEIC,sBAAM,GAFV;AAGIC,yBAASxE,aAAayE,IAAb,CACL,IADK,EAEL,OAFK,EAGL,qBAHK;AAHb,aAVa,EAmBb;AACIH,uBAAO,2BAAG,yBAAH,CADX;AAEIC,sBAAM,GAFV;AAGIC,yBAASxE,aAAayE,IAAb,CACL,IADK,EAEL,OAFK,EAGL,qBAHK;AAHb,aAnBa,CAAjB;AA6BA,gBAAIC,aAAa,CACb;AACIJ,uBAAO,2BAAG,2BAAH,CADX;AAEIC,sBAAM,GAFV;AAGIC,yBAASlE,UAAUmE,IAAV,CAAe,IAAf,EAAqB,KAArB;AAHb,aADa,CAAjB;AAOA,gBAAIE,cAAc,CACd;AACIL,uBAAO,2BAAG,YAAH,CADX;AAEIC,sBAAM,GAFV;AAGIC,yBAASxE,aAAayE,IAAb,CAAkB,IAAlB,EAAwB,KAAxB,EAA+B,qBAA/B;AAHb,aADc,EAMd;AACIH,uBAAO,2BAAG,oCAAH,CADX;AAEIC,sBAAM,GAFV;AAGIC,yBAASxE,aAAayE,IAAb,CAAkB,IAAlB,EAAwB,KAAxB,EAA+B,qBAA/B;AAHb,aANc,EAWd,EAAEH,OAAO,2BAAG,uBAAH,CAAT,EAAsCC,MAAM,SAA5C,EAXc,CAAlB;AAaA,gBAAIzE,WAAJ,EAAiB;AACbuE,2BAAWO,IAAX,CAAgB;AACZN,2BAAO,2BAAG,OAAH,CADK;AAEZC,0BAAM,GAFM;AAGZC,6BAASpG,mBAAmBqG,IAAnB,CACL,IADK,EAELjG,aAAaC,GAAb,CAAiB,UAAjB,CAFK;AAHG,iBAAhB;AAQA4F,2BAAWO,IAAX,CAAgB;AACZN,2BAAO,2BAAG,QAAH,CADK;AAEZC,0BAAM,GAFM;AAGZC,6BAASzF;AAHG,iBAAhB;AAKAsF,2BAAWO,IAAX,CAAgB;AACZN,2BAAO,2BAAG,uBAAH,CADK;AAEZC,0BAAM;AAFM,iBAAhB;AAIAG,2BAAWE,IAAX,CAAgB;AACZN,2BAAO,2BAAG,OAAH,CADK;AAEZC,0BAAM,GAFM;AAGZC,6BAASxF,mBAAmByF,IAAnB,CACL,IADK,EAELjG,aAAaC,GAAb,CAAiB,UAAjB,CAFK;AAHG,iBAAhB;AAQAkG,4BAAYC,IAAZ,CAAiB;AACbN,2BAAO,2BAAG,OAAH,CADM;AAEbC,0BAAM,GAFO;AAGbC,6BAAStF,iBAAiBuF,IAAjB,CACL,IADK,EAELjG,aAAaC,GAAb,CAAiB,UAAjB,CAFK;AAHI,iBAAjB;AAQAkG,4BAAYC,IAAZ,CAAiB;AACbN,2BAAO,2BAAG,QAAH,CADM;AAEbC,0BAAM,GAFO;AAGbC,6BAASrF;AAHI,iBAAjB;AAKH;AACD,gBAAIyD,SAAJ,EAAe;AACX8B,2BAAWE,IAAX,CAAgB;AACZN,2BAAO,mBADK;AAEZC,0BAAM,GAFM;AAGZC,6BAASlE,UAAUmE,IAAV,CAAe,IAAf,EAAqB,IAArB;AAHG,iBAAhB;AAKH;;AAED,gBAAMI,sBACF,IAAIjD,IAAJ,CAAS1D,QAAQO,GAAR,CAAY,yBAAZ,IAAyC,GAAlD,EAAuDoD,OAAvD,KACAD,KAAKkD,GAAL,EAFJ;;AAIA,gBAAMC,oBAAoB,sCAAiBrC,cAAcD,OAAd,CAAsB,CAAtB,CAAjB,CAA1B;AACA,gBAAMuC,2BAA2B,sCAC7B1B,YAAYb,OAAZ,CAAoB,CAApB,CAD6B,CAAjC;AAGA,gBAAMwC,oBAAoB,sCAAiBrF,cAAc6C,OAAd,CAAsB,CAAtB,CAAjB,CAA1B;AACA,gBAAMyC,6BACF,CAACrF,kBAAkB,CAAlB,GAAsB,GAAtB,GAA4B,EAA7B,IACA,sCAAiB,CAAC,CAACA,eAAF,EAAmB4C,OAAnB,CAA2B,CAA3B,CAAjB,CAFJ;AAGA,gBAAM0C,kBAAkB,sCAAiB,MAAMtC,YAAYJ,OAAZ,CAAoB,CAApB,CAAvB,CAAxB,CA3UK,CA2UmE;AACxE,gBAAM2C,yBAAyB,sCAC3B,MAAMrC,UAAUN,OAAV,CAAkB,CAAlB,CADqB,CAA/B;AAGA,gBAAM4C,sBAAsB,sCACxB1C,qBAAqBF,OAArB,CAA6B,CAA7B,IAAkC,QADV,CAA5B;AAGA,gBAAM6C,0BAA0B,sCAC5B,MAAMxC,oBAAoBL,OAApB,CAA4B,CAA5B,CADsB,CAAhC;;AAIA,gBAAM8C,eAAe,CACjB;AACIjB,uBAAO,2BAAG,sCAAH,EAA2C;AAC9CkB;AAD8C,iBAA3C,CADX;AAIIjB,sBAAM,GAJV;AAKIC,yBAASxE,aAAayE,IAAb,CAAkB,IAAlB,EAAwB,OAAxB,EAAiC,kBAAjC;AALb,aADiB,CAArB;AASA,gBAAMgB,mBAAmB,CACrB;AACInB,uBAAO,2BAAG,qCAAH,EAA0C;AAC7CoB;AAD6C,iBAA1C,CADX;AAIInB,sBAAM,GAJV;AAKIC,yBAASxE,aAAayE,IAAb,CAAkB,IAAlB,EAAwB,KAAxB,EAA+B,kBAA/B;AALb,aADqB,CAAzB;AASA;AACA,gBAAMkB,cAAc,KAAK3H,KAAL,CAAW4H,YAAX,GAA0B,GAA9C;AACA,gBAAMC,aACF;AAAA;AAAA;AAAO,2CAAG,6CAAH;AAAP,aADJ;;AAIA,gBAAMC,eACFrE,WAAWvD,QAAQO,GAAR,CAAY,sBAAZ,EAAoC8C,KAApC,CAA0C,GAA1C,EAA+C,CAA/C,CAAX,IAAgE,CAAhE,GACMrD,QAAQO,GAAR,CAAY,sBAAZ,CADN,GAEM,IAHV;AAIA,gBAAMsH,aACFtE,WAAWvD,QAAQO,GAAR,CAAY,oBAAZ,EAAkC8C,KAAlC,CAAwC,GAAxC,EAA6C,CAA7C,CAAX,IAA8D,CAA9D,GACMrD,QAAQO,GAAR,CAAY,oBAAZ,CADN,GAEM,IAHV;AAIA,gBAAMuH,YACFvE,WAAWvD,QAAQO,GAAR,CAAY,sBAAZ,EAAoC8C,KAApC,CAA0C,GAA1C,EAA+C,CAA/C,CAAX,IAAgE,CAAhE,GACMrD,QAAQO,GAAR,CAAY,sBAAZ,EAAoC4D,OAApC,CAA4C,OAA5C,EAAqD,IAArD,CADN,GAEM,IAHV;;AAKA,gBAAI4D,UAAU,EAAd;AACA,gBAAIH,YAAJ,EAAkBG,QAAQrB,IAAR,CAAakB,YAAb;AAClB,gBAAIC,UAAJ,EAAgBE,QAAQrB,IAAR,CAAamB,UAAb;AAChB,gBAAIC,SAAJ,EAAeC,QAAQrB,IAAR,CAAaoB,SAAb;;AAEf,gBAAIE,oBAAJ;AACA,oBAAQD,QAAQE,MAAhB;AACI,qBAAK,CAAL;AACID,kCAAiBD,QAAQ,CAAR,CAAjB,UAAgCA,QAAQ,CAAR,CAAhC,aAAkDA,QAAQ,CAAR,CAAlD;AACA;AACJ,qBAAK,CAAL;AACIC,kCAAiBD,QAAQ,CAAR,CAAjB,aAAmCA,QAAQ,CAAR,CAAnC;AACA;AACJ,qBAAK,CAAL;AACIC,uCAAiBD,QAAQ,CAAR,CAAjB;AACA;AATR;;AAYA,gBAAIG,iBAAJ;AACA,gBAAI5H,gBAAgB0H,WAAhB,IAA+BpG,WAAnC,EAAgD;AAC5CsG,2BACI;AAAA;AAAA,sBAAK,WAAU,KAAf;AACI;AAAA;AAAA,0BAAK,WAAU,kBAAf;AACI;AAAA;AAAA,8BAAK,WAAU,sBAAf;AACI;AAAA;AAAA,kCAAM,WAAU,2BAAhB;AAAA;AAC2BF;AAD3B,6BADJ;AAII;AAAA;AAAA;AACI,8CAAU,KAAK/H,KAAL,CAAWJ,eADzB;AAEI,+CAAU,QAFd;AAGI,6CAAS,oBAAK;AACV,+CAAKF,kBAAL,CAAwBK,OAAxB;AACH;AALL;AAOK,2DAAG,+BAAH;AAPL;AAJJ;AADJ;AADJ,iBADJ;AAoBH;;AAED,mBACI;AAAA;AAAA,kBAAK,WAAU,YAAf;AACKkI,wBADL;AAEI;AAAA;AAAA,sBAAK,WAAU,KAAf;AACI;AAAA;AAAA,0BAAK,WAAU,0CAAf;AACKtG,sCACG,8BAAC,uBAAD,IAAe,cAAc5B,QAAQO,GAAR,CAAY,MAAZ,CAA7B,GADH,GAGG;AAAA;AAAA;AACI,qEADJ;AAEI;AAAA;AAAA;AAAK,2DAAG,YAAH;AAAL,6BAFJ;AAGI;AAHJ;AAJR,qBADJ;AAaQ;AAAA;AAAA,0BAAK,WAAU,gBAAf;AACKqB,uCACG;AAAA;AAAA;AACI,2CAAU,iCADd;AAEI,yCAAS1B;AAFb;AAIK,uDACG,yCADH;AAJL;AAFR;AAbR,iBAFJ;AA6BI;AAAA;AAAA,sBAAK,WAAU,yBAAf;AACI;AAAA;AAAA,0BAAK,WAAU,0BAAf;AAAA;AAEI,sDAAC,gCAAD;AACI,uCAAU,WADd;AAEI,gCAAG,sBAFP;AAGI,oCAAQ,EAAEoH,yCAAF,EAAgBa,2CAAhB;AAHZ;AAFJ,qBADJ;AASI;AAAA;AAAA,0BAAK,WAAU,0BAAf;AACKvG,sCACG,8BAAC,sBAAD;AACI,uCAAU,iBADd;AAEI,mCAAOuE,UAFX;AAGI,gCAAG,IAHP;AAII,sCAAUU,oBAAoB;AAJlC,0BADH,GAQGA,oBAAoB,QAT5B;AAWKzB,sCACG;AAAA;AAAA;AACI,uCAAO;AACHgD,kDAAcxG,cACR,SADQ,GAER;AAHH;AADX;AAOI;AAAC,iDAAD;AAAA,kCAAM,IAAG,SAAT;AACI;AAAC,qDAAD;AAAA,sCAAS,GAAG,2BAAG,wBAAH,CAAZ;AAAA;AACOkF,4DADP;AAAA;AAAA;AADJ;AAPJ,yBADH,GAcG;AAzBR;AATJ,iBA7BJ;AAkEI;AAAA;AAAA,sBAAK,WAAU,+BAAf;AACI;AAAA;AAAA,0BAAK,WAAU,0BAAf;AAAA;AAEI,sDAAC,gCAAD;AACI,uCAAU,WADd;AAEI,gCAAG;AAFP,0BAFJ;AAMKnF,2CAAmB,CAAnB,GACG;AAAA;AAAA,8BAAM,WAAU,WAAhB;AACK,uDACG,yDADH,EAEG,EAAE0G,WAAWrI,QAAQO,GAAR,CAAY,MAAZ,CAAb,EAFH;AADL,yBADH,GAOG;AAbR,qBADJ;AAgBI;AAAA;AAAA,0BAAK,WAAU,0BAAf;AACKqB,sCACG,8BAAC,sBAAD;AACI,uCAAU,iBADd;AAEI,mCAAO4E,UAFX;AAGI,gCAAG,IAHP;AAII,sCAAUO,oBAAoB;AAJlC,0BADH,GAQGA,oBAAoB,QAT5B;AAWKpF,2CAAmB,CAAnB,GACG;AAAA;AAAA;AACI,uCAAO;AACHyG,kDAAcxG,cACR,SADQ,GAER;AAHH;AADX;AAOI;AAAC,iDAAD;AAAA,kCAAS,GAAE,4CAAX;AAAA;AACMoF,0DADN;AAAA;AAAA;AAPJ,yBADH,GAYG;AAvBR;AAhBJ,iBAlEJ;AA4GI;AAAA;AAAA,sBAAK,WAAU,yBAAf;AACI;AAAA;AAAA,0BAAK,WAAU,0BAAf;AAAA;AAEI;AAAA;AAAA,8BAAK,WAAU,WAAf;AAA4BW;AAA5B;AAFJ,qBADJ;AAKI;AAAA;AAAA,0BAAK,WAAU,0BAAf;AACK/F,sCACG,8BAAC,sBAAD;AACI,uCAAU,iBADd;AAEI,mCAAO6E,WAFX;AAGI,gCAAG,IAHP;AAII,sCAAUQ;AAJd,0BADH,GAQGA,eATR;AAWKpC,oCACG;AAAA;AAAA;AACI,uCAAO;AACHuD,kDAAcxG,cACR,SADQ,GAER;AAHH;AADX;AAOI;AAAC,iDAAD;AAAA,kCAAM,IAAG,SAAT;AACI;AAAC,qDAAD;AAAA,sCAAS,GAAG,2BAAG,wBAAH,CAAZ;AAAA;AACOsF,0DADP;AAAA;AAAA;AADJ;AAPJ,yBADH,GAcG,IAzBR;AA0BKtD;AA1BL;AALJ,iBA5GJ;AA8II;AAAA;AAAA,sBAAK,WAAU,+BAAf;AACI;AAAA;AAAA,0BAAK,WAAU,0BAAf;AACK,mDAAG,wBAAH,CADL;AAEI;AAAA;AAAA,8BAAK,WAAU,WAAf;AACI;AAAA;AAAA;AACK,2DACG,+DADH;AADL;AADJ;AAFJ,qBADJ;AAWI;AAAA;AAAA,0BAAK,WAAU,0BAAf;AACKhC,sCACG,8BAAC,sBAAD;AACI,uCAAU,iBADd;AAEI,mCAAOyF,YAFX;AAGI,gCAAG,IAHP;AAII,sCAAUF;AAJd,0BADH,GAQGA,mBATR;AAWI,iEAXJ;AAYKvF,sCACG,8BAAC,sBAAD;AACI,uCAAU,iBADd;AAEI,mCAAO2F,gBAFX;AAGI,gCAAG,IAHP;AAII,sCAAUH;AAJd,0BADH,GAQGA;AApBR;AAXJ,iBA9IJ;AAiLI;AAAA;AAAA,sBAAK,WAAU,yBAAf;AACI;AAAA;AAAA,0BAAK,WAAU,0BAAf;AACK,mDAAG,wCAAH,CADL;AAEI;AAAA;AAAA,8BAAK,WAAU,WAAf;AACK,uDAAG,yBAAH,EAA8B,EAAEE,yCAAF,EAA9B;AADL;AAFJ,qBADJ;AAOI;AAAA;AAAA,0BAAK,WAAU,0BAAf;AACK9B;AADL;AAPJ,iBAjLJ;AA4LI;AAAA;AAAA,sBAAK,WAAU,yBAAf;AACI;AAAA;AAAA,0BAAK,WAAU,iBAAf;AACKmB,+CACG;AAAA;AAAA;AACK,uDACG,uDADH,CADL;AAAA;AAGa,+BAHb;AAII,0DAAC,wBAAD;AACI,sCAAM3G,QAAQO,GAAR,CACF,yBADE;AADV,8BAJJ;AAAA;AAAA,yBAFR;AAcI,sDAAC,0BAAD,IAAkB,QAAO,kBAAzB;AAdJ;AADJ,iBA5LJ;AA8MKsB,mCACG;AAAA;AAAA,sBAAK,WAAU,KAAf;AACI;AAAA;AAAA,0BAAK,WAAU,iBAAf;AACI;AAAA;AAAA,8BAAK,WAAU,iBAAf;AACK,uDACG,iDADH;AADL;AADJ;AADJ,iBA/MR;AAyNI;AAAA;AAAA,sBAAK,WAAU,KAAf;AACI;AAAA;AAAA,0BAAK,WAAU,iBAAf;AACI;AADJ;AADJ,iBAzNJ;AA+NKD,+BAAe,8BAAC,gCAAD,OA/NpB;AAiOI;AAAA;AAAA,sBAAK,WAAU,KAAf;AACI;AAAA;AAAA,0BAAK,WAAU,iBAAf;AAEI;AAAA;AAAA;AAAK,uDAAG,wBAAH;AAAL,yBAFJ;AAGI;AAAA;AAAA,8BAAK,WAAU,WAAf;AACI;AAAA;AAAA;AACK,2DACG,gDADH;AADL,6BADJ;AAAA;AAOI;AAAA;AAAA;AACK,2DACG,mDADH;AADL;AAPJ,yBAHJ;AAgBI;AAAA;AAAA;AACI;AAAA;AAAA;AAAQ8D;AAAR;AADJ;AAhBJ;AADJ;AAjOJ,aADJ;AA0PH;;;EAptBoB4C,gBAAMC,S;;kBAutBhB;AACX;AACA,UAACtI,KAAD,EAAQuI,QAAR,EAAqB;AACjB,QAAMpH,kBAAkB,mCAAcnB,KAAd,CAAxB;AACA,QAAMoB,oBAAoBpB,MAAMwI,IAAN,CAAWlI,GAAX,CAAe,mBAAf,CAA1B;AACA,QAAMgB,SAAStB,MAAMyI,MAAN,CAAanI,GAAb,CAAiB,OAAjB,CAAf;AACA,QAAMmH,eAAenG,OAAOhB,GAAP,CAAW,mBAAX,CAArB;AACA,sCACOiI,QADP;AAEIlH,qBAAarB,MAAM0I,MAAN,CAAapI,GAAb,CAAiB,aAAjB,CAFjB;AAGIa,wCAHJ;AAIIC,4CAJJ;AAKIqG,kCALJ;AAMInG;AANJ;AAQH,CAfU;AAgBX;AACA;AAAA,WAAa;AACTxB,sBAAc,+BAAW;AACrB,gBAAM6I,WAAW5I,QAAQO,GAAR,CAAY,MAAZ,CAAjB;AACA,gBAAMoC,kBAAkB,SAAlBA,eAAkB,GAAM;AAC1BkG,yBACIrJ,cAAcsJ,QAAd,CAAuB,EAAEC,WAASH,QAAT,eAAF,EAAvB,CADJ;AAGH,aAJD;;AAMA,gBAAMI,YAAY;AACdhJ,yBAAS4I,QADK;AAEdhB,8BAAc5H,QAAQO,GAAR,CAAY,sBAAZ,CAFA;AAGdsH,4BAAY7H,QAAQO,GAAR,CAAY,oBAAZ,CAHE;AAId0I,8BAAcjJ,QAAQO,GAAR,CAAY,wBAAZ;AAJA,aAAlB;;AAOAsI,qBACItJ,mBAAmB2J,kBAAnB,CAAsC;AAClCrD,sBAAM,sBAD4B;AAElCmD,oCAFkC;AAGlCrG;AAHkC,aAAtC,CADJ;AAOH,SAvBQ;AAwBTxB,wBAAgB,2BAAK;AACjB;AACAhB,cAAEC,cAAF;AACA,gBAAMC,OAAO,gBAAb;AACAwI,qBAASrJ,cAAc2J,UAAd,CAAyB,EAAE9I,UAAF,EAAzB,CAAT;AACH,SA7BQ;AA8BT+I,4BAAoB,sCAAY;AAC5B,gBAAM/I,OAAO,gBAAb;AACAwI,qBAASrJ,cAAc6J,MAAd,CAAqB,EAAEC,KAAKjJ,IAAP,EAArB,CAAT;AACAwI,qBAASrJ,cAAc2J,UAAd,CAAyB,EAAE9I,UAAF,EAAQkJ,QAAQ,EAAEX,kBAAF,EAAhB,EAAzB,CAAT;AACH;AAlCQ,KAAb;AAAA,CAjBW,EAqDblJ,UArDa,C","file":"UserWallet.js","sourcesContent":["/* eslint react/prop-types: 0 */\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router';\nimport tt from 'counterpart';\nimport { List } from 'immutable';\nimport SavingsWithdrawHistory from 'app/components/elements/SavingsWithdrawHistory';\nimport TransferHistoryRow from 'app/components/cards/TransferHistoryRow';\nimport TransactionError from 'app/components/elements/TransactionError';\nimport TimeAgoWrapper from 'app/components/elements/TimeAgoWrapper';\nimport {\n    numberWithCommas,\n    vestingSteem,\n    delegatedSteem,\n    pricePerSteem,\n} from 'app/utils/StateFunctions';\nimport WalletSubMenu from 'app/components/elements/WalletSubMenu';\nimport shouldComponentUpdate from 'app/utils/shouldComponentUpdate';\nimport Tooltip from 'app/components/elements/Tooltip';\nimport { FormattedHTMLMessage } from 'app/Translator';\nimport {\n    LIQUID_TOKEN,\n    LIQUID_TICKER,\n    DEBT_TOKENS,\n    VESTING_TOKEN,\n} from 'app/client_config';\nimport * as transactionActions from 'app/redux/TransactionReducer';\nimport * as globalActions from 'app/redux/GlobalReducer';\nimport DropdownMenu from 'app/components/elements/DropdownMenu';\n\nconst assetPrecision = 1000;\n\nclass UserWallet extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            claimInProgress: false,\n        };\n        this.onShowDepositSteem = e => {\n            if (e && e.preventDefault) e.preventDefault();\n            const name = this.props.current_user.get('username');\n            const new_window = window.open();\n            new_window.opener = null;\n            new_window.location =\n                'https://blocktrades.us/?input_coin_type=eth&output_coin_type=steem&receive_address=' +\n                name;\n        };\n        this.onShowWithdrawSteem = e => {\n            e.preventDefault();\n            const new_window = window.open();\n            new_window.opener = null;\n            new_window.location =\n                'https://blocktrades.us/unregistered_trade/steem/eth';\n        };\n        this.onShowDepositPower = (current_user_name, e) => {\n            e.preventDefault();\n            const new_window = window.open();\n            new_window.opener = null;\n            new_window.location =\n                'https://blocktrades.us/?input_coin_type=eth&output_coin_type=steem_power&receive_address=' +\n                current_user_name;\n        };\n        this.onShowDepositSBD = (current_user_name, e) => {\n            e.preventDefault();\n            const new_window = window.open();\n            new_window.opener = null;\n            new_window.location =\n                'https://blocktrades.us/?input_coin_type=eth&output_coin_type=sbd&receive_address=' +\n                current_user_name;\n        };\n        this.onShowWithdrawSBD = e => {\n            e.preventDefault();\n            const new_window = window.open();\n            new_window.opener = null;\n            new_window.location =\n                'https://blocktrades.us/unregistered_trade/sbd/eth';\n        };\n        this.shouldComponentUpdate = shouldComponentUpdate(this, 'UserWallet');\n    }\n\n    handleClaimRewards = account => {\n        this.setState({ claimInProgress: true }); // disable the claim button\n        this.props.claimRewards(account);\n    };\n\n    render() {\n        const {\n            onShowDepositSteem,\n            onShowWithdrawSteem,\n            onShowDepositSBD,\n            onShowWithdrawSBD,\n            onShowDepositPower,\n        } = this;\n        const {\n            convertToSteem,\n            price_per_steem,\n            savings_withdraws,\n            account,\n            current_user,\n            open_orders,\n        } = this.props;\n        const gprops = this.props.gprops.toJS();\n\n        // do not render if account is not loaded or available\n        if (!account) return null;\n\n        // do not render if state appears to contain only lite account info\n        if (!account.has('vesting_shares')) return null;\n\n        let vesting_steem = vestingSteem(account.toJS(), gprops);\n        let delegated_steem = delegatedSteem(account.toJS(), gprops);\n\n        let isMyAccount =\n            current_user &&\n            current_user.get('username') === account.get('name');\n\n        const disabledWarning = false;\n        // isMyAccount = false; // false to hide wallet transactions\n\n        const showTransfer = (asset, transferType, e) => {\n            e.preventDefault();\n            this.props.showTransfer({\n                to: isMyAccount ? null : account.get('name'),\n                asset,\n                transferType,\n            });\n        };\n\n        const savings_balance = account.get('savings_balance');\n        const savings_sbd_balance = account.get('savings_sbd_balance');\n\n        const powerDown = (cancel, e) => {\n            e.preventDefault();\n            const name = account.get('name');\n            if (cancel) {\n                const vesting_shares = cancel\n                    ? '0.000000 VESTS'\n                    : account.get('vesting_shares');\n                this.setState({ toggleDivestError: null });\n                const errorCallback = e2 => {\n                    this.setState({ toggleDivestError: e2.toString() });\n                };\n                const successCallback = () => {\n                    this.setState({ toggleDivestError: null });\n                };\n                this.props.withdrawVesting({\n                    account: name,\n                    vesting_shares,\n                    errorCallback,\n                    successCallback,\n                });\n            } else {\n                const to_withdraw = account.get('to_withdraw');\n                const withdrawn = account.get('withdrawn');\n                const vesting_shares = account.get('vesting_shares');\n                const delegated_vesting_shares = account.get(\n                    'delegated_vesting_shares'\n                );\n                this.props.showPowerdown({\n                    account: name,\n                    to_withdraw,\n                    withdrawn,\n                    vesting_shares,\n                    delegated_vesting_shares,\n                });\n            }\n        };\n\n        // Sum savings withrawals\n        let savings_pending = 0,\n            savings_sbd_pending = 0;\n        if (savings_withdraws) {\n            savings_withdraws.forEach(withdraw => {\n                const [amount, asset] = withdraw.get('amount').split(' ');\n                if (asset === 'STEEM') savings_pending += parseFloat(amount);\n                else {\n                    if (asset === 'SBD')\n                        savings_sbd_pending += parseFloat(amount);\n                }\n            });\n        }\n\n        // Sum conversions\n        let conversionValue = 0;\n        const currentTime = new Date().getTime();\n        const conversions = account\n            .get('other_history', List())\n            .reduce((out, item) => {\n                if (item.getIn([1, 'op', 0], '') !== 'convert') return out;\n\n                const timestamp = new Date(\n                    item.getIn([1, 'timestamp'])\n                ).getTime();\n                const finishTime = timestamp + 86400000 * 3.5; // add 3.5day conversion delay\n                if (finishTime < currentTime) return out;\n\n                const amount = parseFloat(\n                    item.getIn([1, 'op', 1, 'amount']).replace(' SBD', '')\n                );\n                conversionValue += amount;\n\n                return out.concat([\n                    <div key={item.get(0)}>\n                        <Tooltip\n                            t={tt('userwallet_jsx.conversion_complete_tip', {\n                                date: new Date(finishTime).toLocaleString(),\n                            })}\n                        >\n                            <span>\n                                (+{tt('userwallet_jsx.in_conversion', {\n                                    amount: numberWithCommas(\n                                        '$' + amount.toFixed(3)\n                                    ),\n                                })})\n                            </span>\n                        </Tooltip>\n                    </div>,\n                ]);\n            }, []);\n\n        const balance_steem = parseFloat(account.get('balance').split(' ')[0]);\n        const saving_balance_steem = parseFloat(savings_balance.split(' ')[0]);\n        const divesting =\n            parseFloat(account.get('vesting_withdraw_rate').split(' ')[0]) >\n            0.0;\n        const sbd_balance = parseFloat(account.get('sbd_balance'));\n        const sbd_balance_savings = parseFloat(\n            savings_sbd_balance.split(' ')[0]\n        );\n        const sbdOrders =\n            !open_orders || !isMyAccount\n                ? 0\n                : open_orders.reduce((o, order) => {\n                      if (order.sell_price.base.indexOf('SBD') !== -1) {\n                          o += order.for_sale;\n                      }\n                      return o;\n                  }, 0) / assetPrecision;\n\n        const steemOrders =\n            !open_orders || !isMyAccount\n                ? 0\n                : open_orders.reduce((o, order) => {\n                      if (order.sell_price.base.indexOf('STEEM') !== -1) {\n                          o += order.for_sale;\n                      }\n                      return o;\n                  }, 0) / assetPrecision;\n\n        // set displayed estimated value\n        const total_sbd =\n            sbd_balance +\n            sbd_balance_savings +\n            savings_sbd_pending +\n            sbdOrders +\n            conversionValue;\n        const total_steem =\n            vesting_steem +\n            balance_steem +\n            saving_balance_steem +\n            savings_pending +\n            steemOrders;\n        let total_value =\n            '$' +\n            numberWithCommas(\n                (total_steem * price_per_steem + total_sbd).toFixed(2)\n            );\n\n        // format spacing on estimated value based on account state\n        let estimate_output = <p>{total_value}</p>;\n        if (isMyAccount) {\n            estimate_output = <p>{total_value}&nbsp; &nbsp; &nbsp;</p>;\n        }\n\n        /// transfer log\n        let idx = 0;\n        const transfer_log = account\n            .get('transfer_history')\n            .map(item => {\n                const data = item.getIn([1, 'op', 1]);\n                const type = item.getIn([1, 'op', 0]);\n\n                // Filter out rewards\n                if (\n                    type === 'curation_reward' ||\n                    type === 'author_reward' ||\n                    type === 'comment_benefactor_reward'\n                ) {\n                    return null;\n                }\n\n                if (\n                    data.sbd_payout === '0.000 SBD' &&\n                    data.vesting_payout === '0.000000 VESTS'\n                )\n                    return null;\n                return (\n                    <TransferHistoryRow\n                        key={idx++}\n                        op={item.toJS()}\n                        context={account.get('name')}\n                    />\n                );\n            })\n            .filter(el => !!el)\n            .reverse();\n\n        let steem_menu = [\n            {\n                value: tt('userwallet_jsx.transfer'),\n                link: '#',\n                onClick: showTransfer.bind(\n                    this,\n                    'STEEM',\n                    'Transfer to Account'\n                ),\n            },\n            {\n                value: tt('userwallet_jsx.transfer_to_savings'),\n                link: '#',\n                onClick: showTransfer.bind(\n                    this,\n                    'STEEM',\n                    'Transfer to Savings'\n                ),\n            },\n            {\n                value: tt('userwallet_jsx.power_up'),\n                link: '#',\n                onClick: showTransfer.bind(\n                    this,\n                    'VESTS',\n                    'Transfer to Account'\n                ),\n            },\n        ];\n        let power_menu = [\n            {\n                value: tt('userwallet_jsx.power_down'),\n                link: '#',\n                onClick: powerDown.bind(this, false),\n            },\n        ];\n        let dollar_menu = [\n            {\n                value: tt('g.transfer'),\n                link: '#',\n                onClick: showTransfer.bind(this, 'SBD', 'Transfer to Account'),\n            },\n            {\n                value: tt('userwallet_jsx.transfer_to_savings'),\n                link: '#',\n                onClick: showTransfer.bind(this, 'SBD', 'Transfer to Savings'),\n            },\n            { value: tt('userwallet_jsx.market'), link: '/market' },\n        ];\n        if (isMyAccount) {\n            steem_menu.push({\n                value: tt('g.buy'),\n                link: '#',\n                onClick: onShowDepositSteem.bind(\n                    this,\n                    current_user.get('username')\n                ),\n            });\n            steem_menu.push({\n                value: tt('g.sell'),\n                link: '#',\n                onClick: onShowWithdrawSteem,\n            });\n            steem_menu.push({\n                value: tt('userwallet_jsx.market'),\n                link: '/market',\n            });\n            power_menu.push({\n                value: tt('g.buy'),\n                link: '#',\n                onClick: onShowDepositPower.bind(\n                    this,\n                    current_user.get('username')\n                ),\n            });\n            dollar_menu.push({\n                value: tt('g.buy'),\n                link: '#',\n                onClick: onShowDepositSBD.bind(\n                    this,\n                    current_user.get('username')\n                ),\n            });\n            dollar_menu.push({\n                value: tt('g.sell'),\n                link: '#',\n                onClick: onShowWithdrawSBD,\n            });\n        }\n        if (divesting) {\n            power_menu.push({\n                value: 'Cancel Power Down',\n                link: '#',\n                onClick: powerDown.bind(this, true),\n            });\n        }\n\n        const isWithdrawScheduled =\n            new Date(account.get('next_vesting_withdrawal') + 'Z').getTime() >\n            Date.now();\n\n        const steem_balance_str = numberWithCommas(balance_steem.toFixed(3));\n        const steem_orders_balance_str = numberWithCommas(\n            steemOrders.toFixed(3)\n        );\n        const power_balance_str = numberWithCommas(vesting_steem.toFixed(3));\n        const received_power_balance_str =\n            (delegated_steem < 0 ? '+' : '') +\n            numberWithCommas((-delegated_steem).toFixed(3));\n        const sbd_balance_str = numberWithCommas('$' + sbd_balance.toFixed(3)); // formatDecimal(account.sbd_balance, 3)\n        const sbd_orders_balance_str = numberWithCommas(\n            '$' + sbdOrders.toFixed(3)\n        );\n        const savings_balance_str = numberWithCommas(\n            saving_balance_steem.toFixed(3) + ' STEEM'\n        );\n        const savings_sbd_balance_str = numberWithCommas(\n            '$' + sbd_balance_savings.toFixed(3)\n        );\n\n        const savings_menu = [\n            {\n                value: tt('userwallet_jsx.withdraw_LIQUID_TOKEN', {\n                    LIQUID_TOKEN,\n                }),\n                link: '#',\n                onClick: showTransfer.bind(this, 'STEEM', 'Savings Withdraw'),\n            },\n        ];\n        const savings_sbd_menu = [\n            {\n                value: tt('userwallet_jsx.withdraw_DEBT_TOKENS', {\n                    DEBT_TOKENS,\n                }),\n                link: '#',\n                onClick: showTransfer.bind(this, 'SBD', 'Savings Withdraw'),\n            },\n        ];\n        // set dynamic secondary wallet values\n        const sbdInterest = this.props.sbd_interest / 100;\n        const sbdMessage = (\n            <span>{tt('userwallet_jsx.tradeable_tokens_transferred')}</span>\n        );\n\n        const reward_steem =\n            parseFloat(account.get('reward_steem_balance').split(' ')[0]) > 0\n                ? account.get('reward_steem_balance')\n                : null;\n        const reward_sbd =\n            parseFloat(account.get('reward_sbd_balance').split(' ')[0]) > 0\n                ? account.get('reward_sbd_balance')\n                : null;\n        const reward_sp =\n            parseFloat(account.get('reward_vesting_steem').split(' ')[0]) > 0\n                ? account.get('reward_vesting_steem').replace('STEEM', 'SP')\n                : null;\n\n        let rewards = [];\n        if (reward_steem) rewards.push(reward_steem);\n        if (reward_sbd) rewards.push(reward_sbd);\n        if (reward_sp) rewards.push(reward_sp);\n\n        let rewards_str;\n        switch (rewards.length) {\n            case 3:\n                rewards_str = `${rewards[0]}, ${rewards[1]} and ${rewards[2]}`;\n                break;\n            case 2:\n                rewards_str = `${rewards[0]} and ${rewards[1]}`;\n                break;\n            case 1:\n                rewards_str = `${rewards[0]}`;\n                break;\n        }\n\n        let claimbox;\n        if (current_user && rewards_str && isMyAccount) {\n            claimbox = (\n                <div className=\"row\">\n                    <div className=\"columns small-12\">\n                        <div className=\"UserWallet__claimbox\">\n                            <span className=\"UserWallet__claimbox-text\">\n                                Your current rewards: {rewards_str}\n                            </span>\n                            <button\n                                disabled={this.state.claimInProgress}\n                                className=\"button\"\n                                onClick={e => {\n                                    this.handleClaimRewards(account);\n                                }}\n                            >\n                                {tt('userwallet_jsx.redeem_rewards')}\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            );\n        }\n\n        return (\n            <div className=\"UserWallet\">\n                {claimbox}\n                <div className=\"row\">\n                    <div className=\"columns small-10 medium-12 medium-expand\">\n                        {isMyAccount ? (\n                            <WalletSubMenu account_name={account.get('name')} />\n                        ) : (\n                            <div>\n                                <br />\n                                <h4>{tt('g.balances')}</h4>\n                                <br />\n                            </div>\n                        )}\n                    </div>\n                    {\n                        <div className=\"columns shrink\">\n                            {isMyAccount && (\n                                <button\n                                    className=\"UserWallet__buysp button hollow\"\n                                    onClick={onShowDepositSteem}\n                                >\n                                    {tt(\n                                        'userwallet_jsx.buy_steem_or_steem_power'\n                                    )}\n                                </button>\n                            )}\n                        </div>\n                    }\n                </div>\n                <div className=\"UserWallet__balance row\">\n                    <div className=\"column small-12 medium-8\">\n                        STEEM\n                        <FormattedHTMLMessage\n                            className=\"secondary\"\n                            id=\"tips_js.liquid_token\"\n                            params={{ LIQUID_TOKEN, VESTING_TOKEN }}\n                        />\n                    </div>\n                    <div className=\"column small-12 medium-4\">\n                        {isMyAccount ? (\n                            <DropdownMenu\n                                className=\"Wallet_dropdown\"\n                                items={steem_menu}\n                                el=\"li\"\n                                selected={steem_balance_str + ' STEEM'}\n                            />\n                        ) : (\n                            steem_balance_str + ' STEEM'\n                        )}\n                        {steemOrders ? (\n                            <div\n                                style={{\n                                    paddingRight: isMyAccount\n                                        ? '0.85rem'\n                                        : null,\n                                }}\n                            >\n                                <Link to=\"/market\">\n                                    <Tooltip t={tt('market_jsx.open_orders')}>\n                                        (+{steem_orders_balance_str} STEEM)\n                                    </Tooltip>\n                                </Link>\n                            </div>\n                        ) : null}\n                    </div>\n                </div>\n                <div className=\"UserWallet__balance row zebra\">\n                    <div className=\"column small-12 medium-8\">\n                        STEEM POWER\n                        <FormattedHTMLMessage\n                            className=\"secondary\"\n                            id=\"tips_js.influence_token\"\n                        />\n                        {delegated_steem != 0 ? (\n                            <span className=\"secondary\">\n                                {tt(\n                                    'tips_js.part_of_your_steem_power_is_currently_delegated',\n                                    { user_name: account.get('name') }\n                                )}\n                            </span>\n                        ) : null}\n                    </div>\n                    <div className=\"column small-12 medium-4\">\n                        {isMyAccount ? (\n                            <DropdownMenu\n                                className=\"Wallet_dropdown\"\n                                items={power_menu}\n                                el=\"li\"\n                                selected={power_balance_str + ' STEEM'}\n                            />\n                        ) : (\n                            power_balance_str + ' STEEM'\n                        )}\n                        {delegated_steem != 0 ? (\n                            <div\n                                style={{\n                                    paddingRight: isMyAccount\n                                        ? '0.85rem'\n                                        : null,\n                                }}\n                            >\n                                <Tooltip t=\"STEEM POWER delegated to/from this account\">\n                                    ({received_power_balance_str} STEEM)\n                                </Tooltip>\n                            </div>\n                        ) : null}\n                    </div>\n                </div>\n                <div className=\"UserWallet__balance row\">\n                    <div className=\"column small-12 medium-8\">\n                        STEEM DOLLARS\n                        <div className=\"secondary\">{sbdMessage}</div>\n                    </div>\n                    <div className=\"column small-12 medium-4\">\n                        {isMyAccount ? (\n                            <DropdownMenu\n                                className=\"Wallet_dropdown\"\n                                items={dollar_menu}\n                                el=\"li\"\n                                selected={sbd_balance_str}\n                            />\n                        ) : (\n                            sbd_balance_str\n                        )}\n                        {sbdOrders ? (\n                            <div\n                                style={{\n                                    paddingRight: isMyAccount\n                                        ? '0.85rem'\n                                        : null,\n                                }}\n                            >\n                                <Link to=\"/market\">\n                                    <Tooltip t={tt('market_jsx.open_orders')}>\n                                        (+{sbd_orders_balance_str})\n                                    </Tooltip>\n                                </Link>\n                            </div>\n                        ) : null}\n                        {conversions}\n                    </div>\n                </div>\n                <div className=\"UserWallet__balance row zebra\">\n                    <div className=\"column small-12 medium-8\">\n                        {tt('userwallet_jsx.savings')}\n                        <div className=\"secondary\">\n                            <span>\n                                {tt(\n                                    'transfer_jsx.balance_subject_to_3_day_withdraw_waiting_period'\n                                )}\n                            </span>\n                        </div>\n                    </div>\n                    <div className=\"column small-12 medium-4\">\n                        {isMyAccount ? (\n                            <DropdownMenu\n                                className=\"Wallet_dropdown\"\n                                items={savings_menu}\n                                el=\"li\"\n                                selected={savings_balance_str}\n                            />\n                        ) : (\n                            savings_balance_str\n                        )}\n                        <br />\n                        {isMyAccount ? (\n                            <DropdownMenu\n                                className=\"Wallet_dropdown\"\n                                items={savings_sbd_menu}\n                                el=\"li\"\n                                selected={savings_sbd_balance_str}\n                            />\n                        ) : (\n                            savings_sbd_balance_str\n                        )}\n                    </div>\n                </div>\n                <div className=\"UserWallet__balance row\">\n                    <div className=\"column small-12 medium-8\">\n                        {tt('userwallet_jsx.estimated_account_value')}\n                        <div className=\"secondary\">\n                            {tt('tips_js.estimated_value', { LIQUID_TOKEN })}\n                        </div>\n                    </div>\n                    <div className=\"column small-12 medium-4\">\n                        {estimate_output}\n                    </div>\n                </div>\n                <div className=\"UserWallet__balance row\">\n                    <div className=\"column small-12\">\n                        {isWithdrawScheduled && (\n                            <span>\n                                {tt(\n                                    'userwallet_jsx.next_power_down_is_scheduled_to_happen'\n                                )}&nbsp;{' '}\n                                <TimeAgoWrapper\n                                    date={account.get(\n                                        'next_vesting_withdrawal'\n                                    )}\n                                />.\n                            </span>\n                        )}\n                        {/*toggleDivestError && <div className=\"callout alert\">{toggleDivestError}</div>*/}\n                        <TransactionError opType=\"withdraw_vesting\" />\n                    </div>\n                </div>\n                {disabledWarning && (\n                    <div className=\"row\">\n                        <div className=\"column small-12\">\n                            <div className=\"callout warning\">\n                                {tt(\n                                    'userwallet_jsx.transfers_are_temporary_disabled'\n                                )}\n                            </div>\n                        </div>\n                    </div>\n                )}\n                <div className=\"row\">\n                    <div className=\"column small-12\">\n                        <hr />\n                    </div>\n                </div>\n\n                {isMyAccount && <SavingsWithdrawHistory />}\n\n                <div className=\"row\">\n                    <div className=\"column small-12\">\n                        {/** history */}\n                        <h4>{tt('userwallet_jsx.history')}</h4>\n                        <div className=\"secondary\">\n                            <span>\n                                {tt(\n                                    'transfer_jsx.beware_of_spam_and_phishing_links'\n                                )}\n                            </span>\n                            &nbsp;\n                            <span>\n                                {tt(\n                                    'transfer_jsx.transactions_make_take_a_few_minutes'\n                                )}\n                            </span>\n                        </div>\n                        <table>\n                            <tbody>{transfer_log}</tbody>\n                        </table>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default connect(\n    // mapStateToProps\n    (state, ownProps) => {\n        const price_per_steem = pricePerSteem(state);\n        const savings_withdraws = state.user.get('savings_withdraws');\n        const gprops = state.global.get('props');\n        const sbd_interest = gprops.get('sbd_interest_rate');\n        return {\n            ...ownProps,\n            open_orders: state.market.get('open_orders'),\n            price_per_steem,\n            savings_withdraws,\n            sbd_interest,\n            gprops,\n        };\n    },\n    // mapDispatchToProps\n    dispatch => ({\n        claimRewards: account => {\n            const username = account.get('name');\n            const successCallback = () => {\n                dispatch(\n                    globalActions.getState({ url: `@${username}/transfers` })\n                );\n            };\n\n            const operation = {\n                account: username,\n                reward_steem: account.get('reward_steem_balance'),\n                reward_sbd: account.get('reward_sbd_balance'),\n                reward_vests: account.get('reward_vesting_balance'),\n            };\n\n            dispatch(\n                transactionActions.broadcastOperation({\n                    type: 'claim_reward_balance',\n                    operation,\n                    successCallback,\n                })\n            );\n        },\n        convertToSteem: e => {\n            //post 2018-01-31 if no calls to this function exist may be safe to remove. Investigate use of ConvertToSteem.jsx\n            e.preventDefault();\n            const name = 'convertToSteem';\n            dispatch(globalActions.showDialog({ name }));\n        },\n        showChangePassword: username => {\n            const name = 'changePassword';\n            dispatch(globalActions.remove({ key: name }));\n            dispatch(globalActions.showDialog({ name, params: { username } }));\n        },\n    })\n)(UserWallet);\n"]}