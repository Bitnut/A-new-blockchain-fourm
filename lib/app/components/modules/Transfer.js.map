{"version":3,"sources":["../../../../src/app/components/modules/Transfer.jsx"],"names":["transactionActions","userActions","globalActions","TransferForm","props","onAdvanced","e","preventDefault","username","currentUser","get","state","to","onChange","setState","advanced","clearError","trxError","undefined","errorCallback","estr","loading","assetBalanceClick","amount","balanceValue","split","onChangeTo","value","toLowerCase","trim","transferToSelf","transferTo","autocompleteUsers","initForm","setTimeout","focus","ReactDOM","findDOMNode","refs","buildTransferAutocomplete","labelPreviousTransfers","labelFollowingUser","transferToLog","currentAccount","reduce","acc","cur","getIn","numTransfers","set","label","remove","following","toOrderedMap","map","merge","sortBy","a","b","toArray","item","indexOf","transferType","initialValues","insufficientFunds","asset","isWithdraw","balance","parseFloat","toVesting","fields","push","name","instance","validation","values","memo","test","browserTests","memo_encryption","transferTips","APP_NAME","powerTip3","LIQUID_TOKEN","VESTING_TOKEN","dispatchSubmit","transfer","submitting","valid","handleSubmit","isMemoPrivate","form","data","paddingTop","marginBottom","display","width","type","className","autoComplete","autoCorrect","autoCapitalize","spellCheck","disabled","items","el","matchAutocompleteUser","isHighlighted","touched","target","val","error","paddingLeft","paddingRight","minWidth","height","backgroundColor","border","Component","propTypes","PropTypes","object","isRequired","bool","AssetBalance","onClick","borderBottom","cursor","ownProps","user","toJS","global","Error","successCallback","dispatch","getState","url","loadSavingsWithdraw","hideTransfer","asset2","operation","from","toFixed","confirm","request_id","Math","floor","Date","now","broadcastOperation"],"mappings":"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","file":"Transfer.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\nimport reactForm from 'app/utils/ReactForm';\nimport { Map } from 'immutable';\nimport Autocomplete from 'react-autocomplete';\nimport tt from 'counterpart';\n\nimport * as transactionActions from 'app/redux/TransactionReducer';\nimport * as userActions from 'app/redux/UserReducer';\nimport * as globalActions from 'app/redux/GlobalReducer';\nimport LoadingIndicator from 'app/components/elements/LoadingIndicator';\nimport ConfirmTransfer from 'app/components/elements/ConfirmTransfer';\nimport runTests, { browserTests } from 'app/utils/BrowserTests';\nimport {\n    validate_account_name_with_memo,\n    validate_memo_field,\n} from 'app/utils/ChainValidation';\nimport { countDecimals } from 'app/utils/ParsersAndFormatters';\nimport { APP_NAME, LIQUID_TOKEN, VESTING_TOKEN } from 'app/client_config';\n\n/** Warning .. This is used for Power UP too. */\nclass TransferForm extends Component {\n    static propTypes = {\n        // redux\n        currentUser: PropTypes.object.isRequired,\n        toVesting: PropTypes.bool.isRequired,\n        currentAccount: PropTypes.object.isRequired,\n        following: PropTypes.object.isRequired,\n    };\n\n    constructor(props) {\n        super();\n        const { transferToSelf } = props;\n        this.state = {\n            advanced: !transferToSelf,\n            transferTo: false,\n            autocompleteUsers: [],\n        };\n        this.initForm(props);\n    }\n\n    componentDidMount() {\n        setTimeout(() => {\n            const { advanced } = this.state;\n            if (advanced) this.to.focus();\n            else ReactDOM.findDOMNode(this.refs.amount).focus();\n        }, 300);\n\n        runTests();\n\n        this.buildTransferAutocomplete();\n    }\n\n    buildTransferAutocomplete() {\n        // Get names for the recent account transfers\n        const labelPreviousTransfers = tt(\n            'transfer_jsx.autocomplete_previous_transfers'\n        );\n        const labelFollowingUser = tt(\n            'transfer_jsx.autocomplete_user_following'\n        );\n\n        const transferToLog = this.props.currentAccount\n            .get('transfer_history')\n            .reduce((acc, cur) => {\n                if (cur.getIn([1, 'op', 0]) === 'transfer') {\n                    const username = cur.getIn([1, 'op', 1, 'to']);\n                    const numTransfers = acc.get(username)\n                        ? acc.get(username).numTransfers + 1\n                        : 1;\n                    return acc.set(username, {\n                        username,\n                        label: `${numTransfers} ${labelPreviousTransfers}`,\n                        numTransfers,\n                    });\n                }\n                return acc;\n            }, Map())\n            .remove(this.props.currentUser.get('username'));\n\n        // Build a combined list of users you follow & have previously transferred to,\n        // and sort it by 1. desc the number of previous transfers 2. username asc.\n        this.setState({\n            autocompleteUsers: this.props.following\n                .toOrderedMap()\n                .map(username => ({\n                    username,\n                    label: labelFollowingUser,\n                    numTransfers: 0,\n                }))\n                .merge(transferToLog)\n                .sortBy(null, (a, b) => {\n                    //prioritize sorting by number of transfers\n                    if (a.numTransfers > b.numTransfers) {\n                        return -1;\n                    }\n                    if (b.numTransfers > a.numTransfers) {\n                        return 1;\n                    }\n                    //if transfer number is the same, sort by username\n                    if (a.username > b.username) {\n                        return 1;\n                    }\n                    if (b.username > a.username) {\n                        return -1;\n                    }\n                    return 0;\n                })\n                .toArray(),\n        });\n    }\n\n    matchAutocompleteUser(item, value) {\n        return item.username.toLowerCase().indexOf(value.toLowerCase()) > -1;\n    }\n\n    onAdvanced = e => {\n        e.preventDefault(); // prevent form submission!!\n        const username = this.props.currentUser.get('username');\n        this.state.to.props.onChange(username);\n        // setTimeout(() => {ReactDOM.findDOMNode(this.refs.amount).focus()}, 300)\n        this.setState({ advanced: !this.state.advanced });\n    };\n\n    initForm(props) {\n        const { transferType } = props.initialValues;\n        const insufficientFunds = (asset, amount) => {\n            const { currentAccount } = props;\n            const isWithdraw =\n                transferType && transferType === 'Savings Withdraw';\n            const balanceValue =\n                !asset || asset === 'STEEM'\n                    ? isWithdraw\n                      ? currentAccount.get('savings_balance')\n                      : currentAccount.get('balance')\n                    : asset === 'SBD'\n                      ? isWithdraw\n                        ? currentAccount.get('savings_sbd_balance')\n                        : currentAccount.get('sbd_balance')\n                      : null;\n            if (!balanceValue) return false;\n            const balance = balanceValue.split(' ')[0];\n            return parseFloat(amount) > parseFloat(balance);\n        };\n        const { toVesting } = props;\n        const fields = toVesting ? ['to', 'amount'] : ['to', 'amount', 'asset'];\n        if (\n            !toVesting &&\n            transferType !== 'Transfer to Savings' &&\n            transferType !== 'Savings Withdraw'\n        )\n            fields.push('memo');\n        reactForm({\n            name: 'transfer',\n            instance: this,\n            fields,\n            initialValues: props.initialValues,\n            validation: values => ({\n                to: !values.to\n                    ? tt('g.required')\n                    : validate_account_name_with_memo(values.to, values.memo),\n                amount: !values.amount\n                    ? 'Required'\n                    : !/^\\d+(\\.\\d+)?$/.test(values.amount)\n                      ? tt('transfer_jsx.amount_is_in_form')\n                      : insufficientFunds(values.asset, values.amount)\n                        ? tt('transfer_jsx.insufficient_funds')\n                        : countDecimals(values.amount) > 3\n                          ? tt('transfer_jsx.use_only_3_digits_of_precison')\n                          : null,\n                asset: props.toVesting\n                    ? null\n                    : !values.asset ? tt('g.required') : null,\n                memo: values.memo\n                    ? validate_memo_field(\n                          values.memo,\n                          props.currentUser.get('username'),\n                          props.currentAccount.get('memo_key')\n                      )\n                    : values.memo &&\n                      (!browserTests.memo_encryption && /^#/.test(values.memo))\n                      ? 'Encrypted memos are temporarily unavailable (issue #98)'\n                      : null,\n            }),\n        });\n    }\n\n    clearError = () => {\n        this.setState({ trxError: undefined });\n    };\n\n    errorCallback = estr => {\n        this.setState({ trxError: estr, loading: false });\n    };\n\n    balanceValue() {\n        const { transferType } = this.props.initialValues;\n        const { currentAccount } = this.props;\n        const { asset } = this.state;\n        const isWithdraw = transferType && transferType === 'Savings Withdraw';\n        return !asset || asset.value === 'STEEM'\n            ? isWithdraw\n              ? currentAccount.get('savings_balance')\n              : currentAccount.get('balance')\n            : asset.value === 'SBD'\n              ? isWithdraw\n                ? currentAccount.get('savings_sbd_balance')\n                : currentAccount.get('sbd_balance')\n              : null;\n    }\n\n    assetBalanceClick = e => {\n        e.preventDefault();\n        // Convert '9.999 STEEM' to 9.999\n        this.state.amount.props.onChange(this.balanceValue().split(' ')[0]);\n    };\n\n    onChangeTo = value => {\n        this.state.to.props.onChange(value.toLowerCase().trim());\n        this.setState({\n            to: { ...this.state.to, value: value.toLowerCase().trim() },\n        });\n    };\n\n    render() {\n        const transferTips = {\n            'Transfer to Account': tt(\n                'transfer_jsx.move_funds_to_another_account',\n                { APP_NAME }\n            ),\n            'Transfer to Savings': tt(\n                'transfer_jsx.protect_funds_by_requiring_a_3_day_withdraw_waiting_period'\n            ),\n            'Savings Withdraw': tt(\n                'transfer_jsx.withdraw_funds_after_the_required_3_day_waiting_period'\n            ),\n        };\n        const powerTip3 = tt(\n            'tips_js.converted_VESTING_TOKEN_can_be_sent_to_yourself_but_can_not_transfer_again',\n            { LIQUID_TOKEN, VESTING_TOKEN }\n        );\n        const { to, amount, asset, memo } = this.state;\n        const { loading, trxError, advanced } = this.state;\n        const {\n            currentUser,\n            currentAccount,\n            toVesting,\n            transferToSelf,\n            dispatchSubmit,\n        } = this.props;\n        const { transferType } = this.props.initialValues;\n        const { submitting, valid, handleSubmit } = this.state.transfer;\n        // const isMemoPrivate = memo && /^#/.test(memo.value); -- private memos are not supported yet\n        const isMemoPrivate = false;\n\n        const form = (\n            <form\n                onSubmit={handleSubmit(({ data }) => {\n                    this.setState({ loading: true });\n                    dispatchSubmit({\n                        ...data,\n                        errorCallback: this.errorCallback,\n                        currentUser,\n                        toVesting,\n                        transferType,\n                    });\n                })}\n                onChange={this.clearError}\n            >\n                {toVesting && (\n                    <div className=\"row\">\n                        <div className=\"column small-12\">\n                            <p>{tt('tips_js.influence_token')}</p>\n                            <p>\n                                {tt('tips_js.non_transferable', {\n                                    LIQUID_TOKEN,\n                                    VESTING_TOKEN,\n                                })}\n                            </p>\n                        </div>\n                    </div>\n                )}\n\n                {!toVesting && (\n                    <div>\n                        <div className=\"row\">\n                            <div className=\"column small-12\">\n                                {transferTips[transferType]}\n                            </div>\n                        </div>\n                        <br />\n                    </div>\n                )}\n\n                <div className=\"row\">\n                    <div className=\"column small-2\" style={{ paddingTop: 5 }}>\n                        {tt('transfer_jsx.from')}\n                    </div>\n                    <div className=\"column small-10\">\n                        <div\n                            className=\"input-group\"\n                            style={{ marginBottom: '1.25rem' }}\n                        >\n                            <span className=\"input-group-label\">@</span>\n                            <input\n                                className=\"input-group-field bold\"\n                                type=\"text\"\n                                disabled\n                                value={currentUser.get('username')}\n                            />\n                        </div>\n                    </div>\n                </div>\n\n                {advanced && (\n                    <div className=\"row\">\n                        <div\n                            className=\"column small-2\"\n                            style={{ paddingTop: 5 }}\n                        >\n                            {tt('transfer_jsx.to')}\n                        </div>\n                        <div className=\"column small-10\">\n                            <div\n                                className=\"input-group\"\n                                style={{ marginBottom: '1.25rem' }}\n                            >\n                                <span className=\"input-group-label\">@</span>\n                                <Autocomplete\n                                    wrapperStyle={{\n                                        display: 'inline-block',\n                                        width: '100%',\n                                    }}\n                                    inputProps={{\n                                        type: 'text',\n                                        className: 'input-group-field',\n                                        autoComplete: 'off',\n                                        autoCorrect: 'off',\n                                        autoCapitalize: 'off',\n                                        spellCheck: 'false',\n                                        disabled: loading,\n                                    }}\n                                    renderMenu={items => (\n                                        <div\n                                            className=\"react-autocomplete-input\"\n                                            children={items}\n                                        />\n                                    )}\n                                    ref={el => (this.to = el)}\n                                    getItemValue={item => item.username}\n                                    items={this.state.autocompleteUsers}\n                                    shouldItemRender={\n                                        this.matchAutocompleteUser\n                                    }\n                                    renderItem={(item, isHighlighted) => (\n                                        <div\n                                            className={\n                                                isHighlighted ? 'active' : ''\n                                            }\n                                        >\n                                            {`${item.username} (${item.label})`}\n                                        </div>\n                                    )}\n                                    value={this.state.to.value || ''}\n                                    onChange={e => {\n                                        this.setState({\n                                            to: {\n                                                ...this.state.to,\n                                                touched: true,\n                                                value: e.target.value,\n                                            },\n                                        });\n                                    }}\n                                    onSelect={val =>\n                                        this.setState({\n                                            to: {\n                                                ...this.state.to,\n                                                value: val,\n                                            },\n                                        })\n                                    }\n                                />\n                            </div>\n                            {to.touched && to.error ? (\n                                <div className=\"error\">{to.error}&nbsp;</div>\n                            ) : (\n                                <p>{toVesting && powerTip3}</p>\n                            )}\n                        </div>\n                    </div>\n                )}\n\n                <div className=\"row\">\n                    <div className=\"column small-2\" style={{ paddingTop: 5 }}>\n                        {tt('g.amount')}\n                    </div>\n                    <div className=\"column small-10\">\n                        <div\n                            className=\"input-group\"\n                            style={{ marginBottom: 5 }}\n                        >\n                            <input\n                                type=\"text\"\n                                placeholder={tt('g.amount')}\n                                {...amount.props}\n                                ref=\"amount\"\n                                autoComplete=\"off\"\n                                autoCorrect=\"off\"\n                                autoCapitalize=\"off\"\n                                spellCheck=\"false\"\n                                disabled={loading}\n                            />\n                            {asset && (\n                                <span\n                                    className=\"input-group-label\"\n                                    style={{ paddingLeft: 0, paddingRight: 0 }}\n                                >\n                                    <select\n                                        {...asset.props}\n                                        placeholder={tt('transfer_jsx.asset')}\n                                        disabled={loading}\n                                        style={{\n                                            minWidth: '5rem',\n                                            height: 'inherit',\n                                            backgroundColor: 'transparent',\n                                            border: 'none',\n                                        }}\n                                    >\n                                        <option value=\"STEEM\">STEEM</option>\n                                        <option value=\"SBD\">SBD</option>\n                                    </select>\n                                </span>\n                            )}\n                        </div>\n                        <div style={{ marginBottom: '0.6rem' }}>\n                            <AssetBalance\n                                balanceValue={this.balanceValue()}\n                                onClick={this.assetBalanceClick}\n                            />\n                        </div>\n                        {(asset && asset.touched && asset.error) ||\n                        (amount.touched && amount.error) ? (\n                            <div className=\"error\">\n                                {asset &&\n                                    asset.touched &&\n                                    asset.error &&\n                                    asset.error}&nbsp;\n                                {amount.touched &&\n                                    amount.error &&\n                                    amount.error}&nbsp;\n                            </div>\n                        ) : null}\n                    </div>\n                </div>\n\n                {memo && (\n                    <div className=\"row\">\n                        <div\n                            className=\"column small-2\"\n                            style={{ paddingTop: 33 }}\n                        >\n                            {tt('g.memo')}\n                        </div>\n                        <div className=\"column small-10\">\n                            <small>\n                                {isMemoPrivate\n                                    ? tt('transfer_jsx.this_memo_is_private')\n                                    : tt('transfer_jsx.this_memo_is_public')}\n                            </small>\n                            <input\n                                type=\"text\"\n                                placeholder={tt('g.memo')}\n                                {...memo.props}\n                                ref=\"memo\"\n                                autoComplete=\"on\"\n                                autoCorrect=\"off\"\n                                autoCapitalize=\"off\"\n                                spellCheck=\"false\"\n                                disabled={loading}\n                            />\n                            <div className=\"error\">\n                                {memo.touched && memo.error && memo.error}&nbsp;\n                            </div>\n                        </div>\n                    </div>\n                )}\n                <div className=\"row\">\n                    <div className=\"column\">\n                        {loading && (\n                            <span>\n                                <LoadingIndicator type=\"circle\" />\n                                <br />\n                            </span>\n                        )}\n                        {!loading && (\n                            <span>\n                                {trxError && (\n                                    <div className=\"error\">{trxError}</div>\n                                )}\n                                <button\n                                    type=\"submit\"\n                                    disabled={submitting || !valid}\n                                    className=\"button\"\n                                >\n                                    {toVesting\n                                        ? tt('g.power_up')\n                                        : tt('g.next')}\n                                </button>\n                                {transferToSelf && (\n                                    <button\n                                        className=\"button hollow no-border\"\n                                        disabled={submitting}\n                                        onClick={this.onAdvanced}\n                                    >\n                                        {advanced\n                                            ? tt('g.basic')\n                                            : tt('g.advanced')}\n                                    </button>\n                                )}\n                            </span>\n                        )}\n                    </div>\n                </div>\n            </form>\n        );\n        return (\n            <div>\n                <div className=\"row\">\n                    <h3 className=\"column\">\n                        {toVesting\n                            ? tt('transfer_jsx.convert_to_VESTING_TOKEN', {\n                                  VESTING_TOKEN,\n                              })\n                            : transferType}\n                    </h3>\n                </div>\n                {form}\n            </div>\n        );\n    }\n}\n\nconst AssetBalance = ({ onClick, balanceValue }) => (\n    <a\n        onClick={onClick}\n        style={{ borderBottom: '#A09F9F 1px dotted', cursor: 'pointer' }}\n    >\n        {tt('g.balance', { balanceValue })}\n    </a>\n);\n\nimport { connect } from 'react-redux';\n\nexport default connect(\n    // mapStateToProps\n    (state, ownProps) => {\n        const initialValues = state.user.get('transfer_defaults', Map()).toJS();\n        const toVesting = initialValues.asset === 'VESTS';\n        const currentUser = state.user.getIn(['current']);\n        const currentAccount = state.global.getIn([\n            'accounts',\n            currentUser.get('username'),\n        ]);\n\n        if (!toVesting && !initialValues.transferType)\n            initialValues.transferType = 'Transfer to Account';\n\n        let transferToSelf =\n            toVesting ||\n            /Transfer to Savings|Savings Withdraw/.test(\n                initialValues.transferType\n            );\n        if (transferToSelf && !initialValues.to)\n            initialValues.to = currentUser.get('username');\n\n        if (initialValues.to !== currentUser.get('username'))\n            transferToSelf = false; // don't hide the to field\n\n        return {\n            ...ownProps,\n            currentUser,\n            currentAccount,\n            toVesting,\n            transferToSelf,\n            following: state.global.getIn([\n                'follow',\n                'getFollowingAsync',\n                currentUser.get('username'),\n                'blog_result',\n            ]),\n            initialValues,\n        };\n    },\n\n    // mapDispatchToProps\n    dispatch => ({\n        dispatchSubmit: ({\n            to,\n            amount,\n            asset,\n            memo,\n            transferType,\n            toVesting,\n            currentUser,\n            errorCallback,\n        }) => {\n            if (\n                !toVesting &&\n                !/Transfer to Account|Transfer to Savings|Savings Withdraw/.test(\n                    transferType\n                )\n            )\n                throw new Error(\n                    `Invalid transfer params: toVesting ${\n                        toVesting\n                    }, transferType ${transferType}`\n                );\n\n            const username = currentUser.get('username');\n            const successCallback = () => {\n                // refresh transfer history\n                dispatch(\n                    globalActions.getState({ url: `@${username}/transfers` })\n                );\n                if (/Savings Withdraw/.test(transferType)) {\n                    dispatch(userActions.loadSavingsWithdraw({}));\n                }\n                dispatch(userActions.hideTransfer());\n            };\n            const asset2 = toVesting ? 'STEEM' : asset;\n            const operation = {\n                from: username,\n                to,\n                amount: parseFloat(amount, 10).toFixed(3) + ' ' + asset2,\n                memo: toVesting ? undefined : memo ? memo : '',\n            };\n            const confirm = () => <ConfirmTransfer operation={operation} />;\n            if (transferType === 'Savings Withdraw')\n                operation.request_id = Math.floor(\n                    (Date.now() / 1000) % 4294967295\n                );\n            dispatch(\n                transactionActions.broadcastOperation({\n                    type: toVesting\n                        ? 'transfer_to_vesting'\n                        : transferType === 'Transfer to Account'\n                          ? 'transfer'\n                          : transferType === 'Transfer to Savings'\n                            ? 'transfer_to_savings'\n                            : transferType === 'Savings Withdraw'\n                              ? 'transfer_from_savings'\n                              : null,\n                    operation,\n                    successCallback,\n                    errorCallback,\n                    confirm,\n                })\n            );\n        },\n    })\n)(TransferForm);\n"]}