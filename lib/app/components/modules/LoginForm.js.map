{"version":3,"sources":["../../../../src/app/components/modules/LoginForm.jsx"],"names":["transactionActions","globalActions","userActions","LoginForm","props","shouldComponentUpdate","saveLoginToggle","saveLogin","state","saveLoginDefault","localStorage","setItem","onChange","showChangePassword","username","password","value","cryptoTestResult","cryptographyFailure","SignUp","bind","undefined","console","error","usernameOnChange","e","target","toLowerCase","onCancel","preventDefault","loginBroadcastOperation","errorCallback","get","qrReader","data","initForm","refs","focus","pw","name","instance","fields","initialValues","validation","values","split","PublicKey","fromString","onType","document","getElementsByClassName","textContent","window","location","href","SIGNUP_URL","process","env","BROWSER","APP_URL","$STM_Config","read_only_mode","dispatchSubmit","afterLoginRedirectToWelcome","msg","login","submitting","valid","handleSubmit","disabled","opType","postType","getIn","title","authType","test","submitLabel","touched","login_error","message","accountName","password_info","checkPasswordChecksum","isTransfer","Map","isMap","has","indexOf","titleText","signupLink","form","log","clearError","blur","SignIn","Component","propTypes","PropTypes","string","func","defaultProps","hasError","s","getItem","urlAccountName","suggestedAccountName","account_match","hash","match","length","wif","substring","PrivateKey","isWif","user","currentUser","shouldSeeAds","app","initialUsername","loginDefault","toJS","offchainUser","offchain","msg_match","offchain_user","trim","type","operation","successCallback","dispatch","broadcastOperation","usernamePasswordLogin","operationType","closeLogin","loginError","showDialog","params","handleScan","dataCallback","defaultPassword","remove","key"],"mappings":"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","file":"LoginForm.js","sourcesContent":["/* eslint react/prop-types: 0 */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Map } from 'immutable';\nimport * as transactionActions from 'app/redux/TransactionReducer';\nimport * as globalActions from 'app/redux/GlobalReducer';\nimport * as userActions from 'app/redux/UserReducer';\nimport { validate_account_name } from 'app/utils/ChainValidation';\nimport runTests from 'app/utils/BrowserTests';\nimport shouldComponentUpdate from 'app/utils/shouldComponentUpdate';\nimport reactForm from 'app/utils/ReactForm';\nimport { serverApiRecordEvent } from 'app/utils/ServerApiClient';\nimport tt from 'counterpart';\nimport { APP_URL } from 'app/client_config';\nimport { PrivateKey, PublicKey } from '@steemit/steem-js/lib/auth/ecc';\nimport { SIGNUP_URL } from 'shared/constants';\n\nclass LoginForm extends Component {\n    static propTypes = {\n        // Steemit.\n        login_error: PropTypes.string,\n        onCancel: PropTypes.func,\n    };\n\n    static defaultProps = {\n        afterLoginRedirectToWelcome: false,\n    };\n\n    constructor(props) {\n        super();\n        const cryptoTestResult = runTests();\n        let cryptographyFailure = false;\n        this.SignUp = this.SignUp.bind(this);\n        if (cryptoTestResult !== undefined) {\n            console.error(\n                'CreateAccount - cryptoTestResult: ',\n                cryptoTestResult\n            );\n            cryptographyFailure = true;\n        }\n        this.state = { cryptographyFailure };\n        this.usernameOnChange = e => {\n            const value = e.target.value.toLowerCase();\n            this.state.username.props.onChange(value);\n        };\n        this.onCancel = e => {\n            if (e.preventDefault) e.preventDefault();\n            const { onCancel, loginBroadcastOperation } = this.props;\n            const errorCallback =\n                loginBroadcastOperation &&\n                loginBroadcastOperation.get('errorCallback');\n            if (errorCallback) errorCallback('Canceled');\n            if (onCancel) onCancel();\n        };\n        this.qrReader = () => {\n            const { qrReader } = props;\n            const { password } = this.state;\n            qrReader(data => {\n                password.props.onChange(data);\n            });\n        };\n        this.initForm(props);\n    }\n\n    componentDidMount() {\n        if (this.refs.username && !this.refs.username.value)\n            this.refs.username.focus();\n        if (this.refs.username && this.refs.username.value)\n            this.refs.pw.focus();\n    }\n\n    shouldComponentUpdate = shouldComponentUpdate(this, 'LoginForm');\n\n    initForm(props) {\n        reactForm({\n            name: 'login',\n            instance: this,\n            fields: ['username', 'password', 'saveLogin:checked'],\n            initialValues: props.initialValues,\n            validation: values => ({\n                username: !values.username\n                    ? tt('g.required')\n                    : validate_account_name(values.username.split('/')[0]),\n                password: !values.password\n                    ? tt('g.required')\n                    : PublicKey.fromString(values.password)\n                      ? tt('loginform_jsx.you_need_a_private_password_or_key')\n                      : null,\n            }),\n        });\n    }\n\n    SignUp() {\n        const onType = document.getElementsByClassName('OpAction')[0]\n            .textContent;\n        serverApiRecordEvent('FreeMoneySignUp', onType);\n        window.location.href = SIGNUP_URL;\n    }\n\n    SignIn() {\n        const onType = document.getElementsByClassName('OpAction')[0]\n            .textContent;\n        serverApiRecordEvent('SignIn', onType);\n    }\n\n    saveLoginToggle = () => {\n        const { saveLogin } = this.state;\n        saveLoginDefault = !saveLoginDefault;\n        localStorage.setItem('saveLogin', saveLoginDefault ? 'yes' : 'no');\n        saveLogin.props.onChange(saveLoginDefault); // change UI\n    };\n\n    showChangePassword = () => {\n        const { username, password } = this.state;\n        this.props.showChangePassword(username.value, password.value);\n    };\n\n    render() {\n        if (!process.env.BROWSER) {\n            return (\n                <div className=\"row\">\n                    <div className=\"column\">\n                        <p>{'loading'}...</p>\n                    </div>\n                </div>\n            );\n        }\n        if (this.state.cryptographyFailure) {\n            return (\n                <div className=\"row\">\n                    <div className=\"column\">\n                        <div className=\"callout alert\">\n                            <h4>\n                                {tt('loginform_jsx.cryptography_test_failed')}\n                            </h4>\n                            <p>{tt('loginform_jsx.unable_to_log_you_in')}</p>\n                            <p>\n                                {tt('loginform_jsx.the_latest_versions_of')}{' '}\n                                <a href=\"https://www.google.com/chrome/\">\n                                    Chrome\n                                </a>{' '}\n                                {tt('g.and')}{' '}\n                                <a href=\"https://www.mozilla.org/en-US/firefox/new/\">\n                                    Firefox\n                                </a>{' '}\n                                {tt(\n                                    'loginform_jsx.are_well_tested_and_known_to_work_with',\n                                    { APP_URL }\n                                )}\n                            </p>\n                        </div>\n                    </div>\n                </div>\n            );\n        }\n\n        if ($STM_Config.read_only_mode) {\n            return (\n                <div className=\"row\">\n                    <div className=\"column\">\n                        <div className=\"callout alert\">\n                            <p>\n                                {tt('loginform_jsx.due_to_server_maintenance')}\n                            </p>\n                        </div>\n                    </div>\n                </div>\n            );\n        }\n\n        const {\n            loginBroadcastOperation,\n            dispatchSubmit,\n            afterLoginRedirectToWelcome,\n            msg,\n        } = this.props;\n        const { username, password, saveLogin } = this.state;\n        const { submitting, valid, handleSubmit } = this.state.login;\n        const { usernameOnChange, onCancel /*qrReader*/ } = this;\n        const disabled = submitting || !valid;\n        const opType = loginBroadcastOperation\n            ? loginBroadcastOperation.get('type')\n            : null;\n        let postType = '';\n        if (opType === 'vote') {\n            postType = tt('loginform_jsx.login_to_vote');\n        } else if (\n            opType === 'custom_json' &&\n            loginBroadcastOperation.getIn(['operation', 'id']) === 'follow'\n        ) {\n            postType = 'Login to Follow Users';\n        } else if (loginBroadcastOperation) {\n            // check for post or comment in operation\n            postType = loginBroadcastOperation.getIn(['operation', 'title'])\n                ? tt('loginform_jsx.login_to_post')\n                : tt('g.confirm_password');\n        }\n        const title = postType ? postType : tt('g.login');\n        const authType = /^vote|comment/.test(opType)\n            ? tt('loginform_jsx.posting')\n            : tt('loginform_jsx.active_or_owner');\n        const submitLabel = loginBroadcastOperation\n            ? tt('g.sign_in')\n            : tt('g.login');\n        let error =\n            password.touched && password.error\n                ? password.error\n                : this.props.login_error;\n        if (error === 'owner_login_blocked') {\n            error = (\n                <span>\n                    {tt(\n                        'loginform_jsx.this_password_is_bound_to_your_account_owner_key'\n                    )}\n                    {tt('loginform_jsx.however_you_can_use_it_to')}\n                    <a onClick={this.showChangePassword}>\n                        {tt('loginform_jsx.update_your_password')}\n                    </a>{' '}\n                    {tt('loginform_jsx.to_obtain_a_more_secure_set_of_keys')}\n                </span>\n            );\n        } else if (error === 'active_login_blocked') {\n            error = (\n                <span>\n                    {tt(\n                        'loginform_jsx.this_password_is_bound_to_your_account_active_key'\n                    )}{' '}\n                    {tt(\n                        'loginform_jsx.you_may_use_this_active_key_on_other_more'\n                    )}\n                </span>\n            );\n        }\n        let message = null;\n        if (msg) {\n            if (msg === 'accountcreated') {\n                message = (\n                    <div className=\"callout primary\">\n                        <p>\n                            {tt(\n                                'loginform_jsx.you_account_has_been_successfully_created'\n                            )}\n                        </p>\n                    </div>\n                );\n            } else if (msg === 'accountrecovered') {\n                message = (\n                    <div className=\"callout primary\">\n                        <p>\n                            {tt(\n                                'loginform_jsx.you_account_has_been_successfully_recovered'\n                            )}\n                        </p>\n                    </div>\n                );\n            } else if (msg === 'passwordupdated') {\n                message = (\n                    <div className=\"callout primary\">\n                        <p>\n                            {tt('loginform_jsx.password_update_succes', {\n                                accountName: username.value,\n                            })}\n                        </p>\n                    </div>\n                );\n            }\n        }\n        const password_info =\n            checkPasswordChecksum(password.value) === false\n                ? tt('loginform_jsx.password_info')\n                : null;\n\n        const isTransfer =\n            Map.isMap(loginBroadcastOperation) &&\n            loginBroadcastOperation.has('type') &&\n            loginBroadcastOperation\n                .get('type')\n                .toLowerCase()\n                .indexOf('transfer') >= 0;\n\n        const titleText = !isTransfer ? (\n            <h3>\n                {tt('loginform_jsx.returning_users')}\n                <span className=\"OpAction\">{title}</span>\n            </h3>\n        ) : (\n            <h3>\n                <span className=\"OpAction\">\n                    {tt('loginform_jsx.sign_transfer')}\n                </span>\n            </h3>\n        );\n\n        const signupLink = (\n            <div className=\"sign-up\">\n                <hr />\n                <p>\n                    {tt('loginform_jsx.join_our')}{' '}\n                    <em>{tt('loginform_jsx.amazing_community')}</em>\n                    {tt('loginform_jsx.to_comment_and_reward_others')}\n                </p>\n                <button\n                    type=\"button\"\n                    className=\"button hollow\"\n                    onClick={this.SignUp}\n                >\n                    {tt('loginform_jsx.sign_up_get_steem')}\n                </button>\n            </div>\n        );\n\n        const form = (\n            <form\n                onSubmit={handleSubmit(({ data }) => {\n                    // bind redux-form to react-redux\n                    console.log('Login\\tdispatchSubmit');\n                    return dispatchSubmit(\n                        data,\n                        loginBroadcastOperation,\n                        afterLoginRedirectToWelcome\n                    );\n                })}\n                onChange={this.props.clearError}\n                method=\"post\"\n            >\n                <div className=\"input-group\">\n                    <span className=\"input-group-label\">@</span>\n                    <input\n                        className=\"input-group-field\"\n                        type=\"text\"\n                        required\n                        placeholder={tt('loginform_jsx.enter_your_username')}\n                        ref=\"username\"\n                        {...username.props}\n                        onChange={usernameOnChange}\n                        autoComplete=\"on\"\n                        disabled={submitting || isTransfer}\n                    />\n                </div>\n                {username.touched && username.blur && username.error ? (\n                    <div className=\"error\">{username.error}&nbsp;</div>\n                ) : null}\n\n                <div>\n                    <input\n                        type=\"password\"\n                        required\n                        ref=\"pw\"\n                        placeholder={tt('loginform_jsx.password_or_wif')}\n                        {...password.props}\n                        autoComplete=\"on\"\n                        disabled={submitting}\n                    />\n                    {error && <div className=\"error\">{error}&nbsp;</div>}\n                    {error &&\n                        password_info && (\n                            <div className=\"warning\">{password_info}&nbsp;</div>\n                        )}\n                </div>\n                {loginBroadcastOperation && (\n                    <div>\n                        <div className=\"info\">\n                            {tt(\n                                'loginform_jsx.this_operation_requires_your_key_or_master_password',\n                                { authType }\n                            )}\n                        </div>\n                    </div>\n                )}\n                <div>\n                    <label\n                        className=\"LoginForm__save-login\"\n                        htmlFor=\"saveLogin\"\n                    >\n                        <input\n                            id=\"saveLogin\"\n                            type=\"checkbox\"\n                            ref=\"pw\"\n                            {...saveLogin.props}\n                            onChange={this.saveLoginToggle}\n                            disabled={submitting}\n                        />&nbsp;{tt('loginform_jsx.keep_me_logged_in')}\n                    </label>\n                </div>\n                <div className=\"login-modal-buttons\">\n                    <br />\n                    <button\n                        type=\"submit\"\n                        disabled={submitting || disabled}\n                        className=\"button\"\n                        onClick={this.SignIn}\n                    >\n                        {submitLabel}\n                    </button>\n                    {this.props.onCancel && (\n                        <button\n                            type=\"button float-right\"\n                            disabled={submitting}\n                            className=\"button hollow\"\n                            onClick={onCancel}\n                        >\n                            {tt('g.cancel')}\n                        </button>\n                    )}\n                </div>\n                {!isTransfer && signupLink}\n            </form>\n        );\n\n        return (\n            <div className=\"LoginForm row\">\n                <div className=\"column\">\n                    {message}\n                    {titleText}\n                    {form}\n                </div>\n            </div>\n        );\n    }\n}\n\nlet hasError;\nlet saveLoginDefault = true;\nif (process.env.BROWSER) {\n    const s = localStorage.getItem('saveLogin');\n    if (s === 'no') saveLoginDefault = false;\n}\n\nfunction urlAccountName() {\n    let suggestedAccountName = '';\n    const account_match = window.location.hash.match(/account\\=([\\w\\d\\-\\.]+)/);\n    if (account_match && account_match.length > 1)\n        suggestedAccountName = account_match[1];\n    return suggestedAccountName;\n}\n\nfunction checkPasswordChecksum(password) {\n    // A Steemit generated password is a WIF prefixed with a P ..\n    // It is possible to login directly with a WIF\n    const wif = /^P/.test(password) ? password.substring(1) : password;\n\n    if (!/^5[HJK].{45,}/i.test(wif)) {\n        // 51 is the wif length\n        // not even close\n        return undefined;\n    }\n\n    return PrivateKey.isWif(wif);\n}\n\nimport { connect } from 'react-redux';\nexport default connect(\n    // mapStateToProps\n    state => {\n        const login_error = state.user.get('login_error');\n        const currentUser = state.user.get('current');\n        const loginBroadcastOperation = state.user.get(\n            'loginBroadcastOperation'\n        );\n        const shouldSeeAds = state.app.getIn(['googleAds', 'shouldSeeAds']);\n        const initialValues = {\n            saveLogin: saveLoginDefault,\n        };\n\n        // The username input has a value prop, so it should not use initialValues\n        const initialUsername =\n            currentUser && currentUser.has('username')\n                ? currentUser.get('username')\n                : urlAccountName();\n        const loginDefault = state.user.get('loginDefault');\n        if (loginDefault) {\n            const { username, authType } = loginDefault.toJS();\n            if (username && authType)\n                initialValues.username = username + '/' + authType;\n        } else if (initialUsername) {\n            initialValues.username = initialUsername;\n        }\n        const offchainUser = state.offchain.get('user');\n        if (!initialUsername && offchainUser && offchainUser.get('account')) {\n            initialValues.username = offchainUser.get('account');\n        }\n        let msg = '';\n        const msg_match = window.location.hash.match(/msg\\=([\\w]+)/);\n        if (msg_match && msg_match.length > 1) msg = msg_match[1];\n        hasError = !!login_error;\n        return {\n            login_error,\n            loginBroadcastOperation,\n            shouldSeeAds,\n            initialValues,\n            initialUsername,\n            msg,\n            offchain_user: state.offchain.get('user'),\n        };\n    },\n\n    // mapDispatchToProps\n    dispatch => ({\n        dispatchSubmit: (\n            data,\n            loginBroadcastOperation,\n            afterLoginRedirectToWelcome\n        ) => {\n            const { password, saveLogin } = data;\n            const username = data.username.trim().toLowerCase();\n            if (loginBroadcastOperation) {\n                const {\n                    type,\n                    operation,\n                    successCallback,\n                    errorCallback,\n                } = loginBroadcastOperation.toJS();\n                dispatch(\n                    transactionActions.broadcastOperation({\n                        type,\n                        operation,\n                        username,\n                        password,\n                        successCallback,\n                        errorCallback,\n                    })\n                );\n                dispatch(\n                    userActions.usernamePasswordLogin({\n                        username,\n                        password,\n                        saveLogin,\n                        afterLoginRedirectToWelcome,\n                        operationType: type,\n                    })\n                );\n\n                dispatch(userActions.closeLogin());\n            } else {\n                dispatch(\n                    userActions.usernamePasswordLogin({\n                        username,\n                        password,\n                        saveLogin,\n                        afterLoginRedirectToWelcome,\n                    })\n                );\n            }\n        },\n        clearError: () => {\n            if (hasError) dispatch(userActions.loginError({ error: null }));\n        },\n        qrReader: dataCallback => {\n            dispatch(\n                globalActions.showDialog({\n                    name: 'qr_reader',\n                    params: { handleScan: dataCallback },\n                })\n            );\n        },\n        showChangePassword: (username, defaultPassword) => {\n            dispatch(userActions.closeLogin());\n\n            dispatch(globalActions.remove({ key: 'changePassword' }));\n            dispatch(\n                globalActions.showDialog({\n                    name: 'changePassword',\n                    params: { username, defaultPassword },\n                })\n            );\n        },\n    })\n)(LoginForm);\n"]}