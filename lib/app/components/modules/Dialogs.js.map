{"version":3,"sources":["../../../../src/app/components/modules/Dialogs.jsx"],"names":["globalActions","Dialogs","shouldComponentUpdate","hide","props","name","nextProps","active_dialogs","forEach","v","k","idx","dialogs","reduce","r","cmp","width","get","toJS","push","React","Component","propTypes","PropTypes","object","func","isRequired","emptyMap","state","global","dispatch","hideDialog"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AACA;;AACA;;IAAYA,a;;AACZ;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;IAEMC,O;;;AAKF,uBAAc;AAAA;;AAAA;;AAEV,cAAKC,qBAAL,GAA6B,4CAA4B,SAA5B,CAA7B;AACA,cAAKC,IAAL,GAAY,gBAAQ;AAChB,kBAAKC,KAAL,CAAWD,IAAX,CAAgBE,IAAhB;AACH,SAFD;AAHU;AAMb;;;;kDACyBC,S,EAAW;AAAA;;AAAA,gBACzBC,cADyB,GACAD,SADA,CACzBC,cADyB;AAAA,gBACTJ,IADS,GACAG,SADA,CACTH,IADS;;AAEjCI,2BAAeC,OAAf,CAAuB,UAACC,CAAD,EAAIC,CAAJ,EAAU;AAC7B,oBAAI,CAAC,OAAK,UAAUA,CAAf,CAAL,EAAwB,OAAK,UAAUA,CAAf,IAAoB;AAAA,2BAAMP,KAAKO,CAAL,CAAN;AAAA,iBAApB;AAC3B,aAFD;AAGH;;;iCACQ;AAAA;;AAAA,gBACGH,cADH,GACsB,KAAKH,KAD3B,CACGG,cADH;;AAEL,gBAAII,MAAM,CAAV;AACA,gBAAMC,UAAUL,eAAeM,MAAf,CAAsB,UAACC,CAAD,EAAIL,CAAJ,EAAOC,CAAP,EAAa;AAC/C,oBAAMK,MACFL,MAAM,WAAN,GACI;AAAA;AAAA,sBAAM,KAAKC,KAAX;AACI;AAAC,wCAAD;AAAA;AACI,oCAAQ,OAAK,UAAUD,CAAf,CADZ;AAEI,sCAFJ;AAGI,yCAAa,EAAEM,OAAO,OAAT;AAHjB;AAKI,sDAAC,qBAAD,IAAa,SAAS,OAAK,UAAUN,CAAf,CAAtB,GALJ;AAMI,sDAAC,kBAAD;AACI,qCAAS,OAAK,UAAUA,CAAf;AADb,2BAEQD,EAAEQ,GAAF,CAAM,QAAN,EAAgBC,IAAhB,EAFR;AANJ;AADJ,iBADJ,GAcIR,MAAM,gBAAN,GACA;AAAA;AAAA,sBAAM,KAAKC,KAAX;AACI;AAAC,wCAAD;AAAA;AACI,oCAAQ,OAAK,UAAUD,CAAf,CADZ;AAEI,sCAFJ;AAGI,yCAAa,EAAEM,OAAO,OAAT;AAHjB;AAKI,sDAAC,qBAAD,IAAa,SAAS,OAAK,UAAUN,CAAf,CAAtB,GALJ;AAMI,sDAAC,wBAAD,IAAgB,SAAS,OAAK,UAAUA,CAAf,CAAzB;AANJ;AADJ,iBADA,GAWAA,MAAM,iBAAN,GACA;AAAA;AAAA,sBAAM,KAAKC,KAAX;AACI;AAAC,wCAAD;AAAA,0BAAQ,QAAQ,OAAK,UAAUD,CAAf,CAAhB,EAAmC,UAAnC,EAAwC,MAAK,QAA7C;AACI,sDAAC,qBAAD,IAAa,SAAS,OAAK,UAAUA,CAAf,CAAtB,GADJ;AAEI,sDAAC,yBAAD,IAAiB,SAAS,OAAK,UAAUA,CAAf,CAA1B;AAFJ;AADJ,iBADA,GAOAA,MAAM,gBAAN,GACA;AAAA;AAAA,sBAAM,KAAKC,KAAX;AACI;AAAC,wCAAD;AAAA,0BAAQ,QAAQ,OAAK,UAAUD,CAAf,CAAhB,EAAmC,UAAnC;AACI,sDAAC,qBAAD,IAAa,SAAS,OAAK,UAAUA,CAAf,CAAtB,GADJ;AAEI,sDAAC,wBAAD;AACI,qCAAS,OAAK,UAAUA,CAAf;AADb,2BAEQD,EAAEQ,GAAF,CAAM,QAAN,EAAgBC,IAAhB,EAFR;AAFJ;AADJ,iBADA,GAUAR,MAAM,aAAN,GACA;AAAA;AAAA,sBAAM,KAAKC,KAAX;AACI;AAAC,wCAAD;AAAA,0BAAQ,QAAQ,OAAK,UAAUD,CAAf,CAAhB,EAAmC,UAAnC;AACI,sDAAC,qBAAD,IAAa,SAAS,OAAK,UAAUA,CAAf,CAAtB,GADJ;AAEI,sDAAC,qBAAD;AACI,qCAAS,OAAK,UAAUA,CAAf;AADb,2BAEQD,EAAEQ,GAAF,CAAM,QAAN,EAAgBC,IAAhB,EAFR;AAFJ;AADJ,iBADA,GAUAR,MAAM,aAAN,GACA;AAAA;AAAA,sBAAM,KAAKC,KAAX;AACI;AAAC,wCAAD;AAAA,0BAAQ,QAAQ,OAAK,UAAUD,CAAf,CAAhB,EAAmC,UAAnC;AACI,sDAAC,qBAAD,IAAa,SAAS,OAAK,UAAUA,CAAf,CAAtB,GADJ;AAEI,sDAAC,qBAAD;AACI,qCAAS,OAAK,UAAUA,CAAf;AADb,2BAEQD,EAAEQ,GAAF,CAAM,QAAN,EAAgBC,IAAhB,EAFR;AAFJ;AADJ,iBADA,GAUAR,MAAM,QAAN,GACA;AAAA;AAAA,sBAAM,KAAKC,KAAX;AACI;AAAC,wCAAD;AAAA,0BAAQ,QAAQ,OAAK,UAAUD,CAAf,CAAhB,EAAmC,UAAnC;AACI,sDAAC,qBAAD,IAAa,SAAS,OAAK,UAAUA,CAAf,CAAtB,GADJ;AAEI,sDAAC,mBAAD;AACI,qCAAS,OAAK,UAAUA,CAAf;AADb,2BAEQD,EAAEQ,GAAF,CAAM,QAAN,EAAgBC,IAAhB,EAFR;AAFJ;AADJ,iBADA,GAUA,IAzER;AA0EA,uBAAOH,MAAMD,EAAEK,IAAF,CAAOJ,GAAP,CAAN,GAAoBD,CAA3B;AACH,aA5Ee,EA4Eb,sBA5Ea,CAAhB;AA6EA,mBACI;AAAA;AAAA;AACKF,wBAAQM,IAAR,EADL;AAEI,8CAAC,yBAAD;AAFJ,aADJ;AAMH;;;EAxGiBE,gBAAMC,S,UACjBC,S,GAAY;AACff,oBAAgBgB,oBAAUC,MADX;AAEfrB,UAAMoB,oBAAUE,IAAV,CAAeC;AAFN,C;;;AA0GvB,IAAMC,WAAW,qBAAjB;;kBAEe,yBACX,iBAAS;AACL,WAAO;AACHpB,wBAAgBqB,MAAMC,MAAN,CAAaZ,GAAb,CAAiB,gBAAjB,KAAsCU;AADnD,KAAP;AAGH,CALU,EAMX;AAAA,WAAa;AACTxB,cAAM,oBAAQ;AACV2B,qBAAS9B,cAAc+B,UAAd,CAAyB,EAAE1B,UAAF,EAAzB,CAAT;AACH;AAHQ,KAAb;AAAA,CANW,EAWbJ,OAXa,C","file":"Dialogs.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport CloseButton from 'app/components/elements/CloseButton';\nimport Reveal from 'app/components/elements/Reveal';\nimport { Map, List } from 'immutable';\nimport * as globalActions from 'app/redux/GlobalReducer';\nimport shouldComponentUpdate from 'app/utils/shouldComponentUpdate';\nimport QrReader from 'app/components/elements/QrReader';\nimport ConvertToSteem from 'app/components/elements/ConvertToSteem';\nimport SuggestPassword from 'app/components/elements/SuggestPassword';\nimport ChangePassword from 'app/components/elements/ChangePassword';\nimport CheckLoginOwner from 'app/components/elements/CheckLoginOwner';\nimport QrKeyView from 'app/components/elements/QrKeyView';\nimport PromotePost from 'app/components/modules/PromotePost';\nimport ExplorePost from 'app/components/modules/ExplorePost';\n\nclass Dialogs extends React.Component {\n    static propTypes = {\n        active_dialogs: PropTypes.object,\n        hide: PropTypes.func.isRequired,\n    };\n    constructor() {\n        super();\n        this.shouldComponentUpdate = shouldComponentUpdate(this, 'Dialogs');\n        this.hide = name => {\n            this.props.hide(name);\n        };\n    }\n    componentWillReceiveProps(nextProps) {\n        const { active_dialogs, hide } = nextProps;\n        active_dialogs.forEach((v, k) => {\n            if (!this['hide_' + k]) this['hide_' + k] = () => hide(k);\n        });\n    }\n    render() {\n        const { active_dialogs } = this.props;\n        let idx = 0;\n        const dialogs = active_dialogs.reduce((r, v, k) => {\n            const cmp =\n                k === 'qr_reader' ? (\n                    <span key={idx++}>\n                        <Reveal\n                            onHide={this['hide_' + k]}\n                            show\n                            revealStyle={{ width: '355px' }}\n                        >\n                            <CloseButton onClick={this['hide_' + k]} />\n                            <QrReader\n                                onClose={this['hide_' + k]}\n                                {...v.get('params').toJS()}\n                            />\n                        </Reveal>\n                    </span>\n                ) : k === 'convertToSteem' ? (\n                    <span key={idx++}>\n                        <Reveal\n                            onHide={this['hide_' + k]}\n                            show\n                            revealStyle={{ width: '450px' }}\n                        >\n                            <CloseButton onClick={this['hide_' + k]} />\n                            <ConvertToSteem onClose={this['hide_' + k]} />\n                        </Reveal>\n                    </span>\n                ) : k === 'suggestPassword' ? (\n                    <span key={idx++}>\n                        <Reveal onHide={this['hide_' + k]} show size=\"medium\">\n                            <CloseButton onClick={this['hide_' + k]} />\n                            <SuggestPassword onClose={this['hide_' + k]} />\n                        </Reveal>\n                    </span>\n                ) : k === 'changePassword' ? (\n                    <span key={idx++}>\n                        <Reveal onHide={this['hide_' + k]} show>\n                            <CloseButton onClick={this['hide_' + k]} />\n                            <ChangePassword\n                                onClose={this['hide_' + k]}\n                                {...v.get('params').toJS()}\n                            />\n                        </Reveal>\n                    </span>\n                ) : k === 'promotePost' ? (\n                    <span key={idx++}>\n                        <Reveal onHide={this['hide_' + k]} show>\n                            <CloseButton onClick={this['hide_' + k]} />\n                            <PromotePost\n                                onClose={this['hide_' + k]}\n                                {...v.get('params').toJS()}\n                            />\n                        </Reveal>\n                    </span>\n                ) : k === 'explorePost' ? (\n                    <span key={idx++}>\n                        <Reveal onHide={this['hide_' + k]} show>\n                            <CloseButton onClick={this['hide_' + k]} />\n                            <ExplorePost\n                                onClick={this['hide_' + k]}\n                                {...v.get('params').toJS()}\n                            />\n                        </Reveal>\n                    </span>\n                ) : k === 'qr_key' ? (\n                    <span key={idx++}>\n                        <Reveal onHide={this['hide_' + k]} show>\n                            <CloseButton onClick={this['hide_' + k]} />\n                            <QrKeyView\n                                onClose={this['hide_' + k]}\n                                {...v.get('params').toJS()}\n                            />\n                        </Reveal>\n                    </span>\n                ) : null;\n            return cmp ? r.push(cmp) : r;\n        }, List());\n        return (\n            <div>\n                {dialogs.toJS()}\n                <CheckLoginOwner />\n            </div>\n        );\n    }\n}\n\nconst emptyMap = Map();\n\nexport default connect(\n    state => {\n        return {\n            active_dialogs: state.global.get('active_dialogs') || emptyMap,\n        };\n    },\n    dispatch => ({\n        hide: name => {\n            dispatch(globalActions.hideDialog({ name }));\n        },\n    })\n)(Dialogs);\n"]}