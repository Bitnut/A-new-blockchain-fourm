{"version":3,"sources":["../../../../src/app/components/modules/PromotePost.jsx"],"names":["transactionActions","globalActions","PromotePost","props","state","amount","asset","loading","amountError","trxError","onSubmit","bind","errorCallback","amountChange","setTimeout","ReactDOM","findDOMNode","refs","focus","estr","setState","e","preventDefault","author","permlink","onClose","console","log","dispatchSubmit","DEBT_TICKER","currentUser","target","value","currentAccount","balanceValue","get","balance","split","submitDisabled","DEBT_TOKEN","DEBT_TOKEN_SHORT","CURRENCY_SIGN","Component","propTypes","PropTypes","string","isRequired","ownProps","user","getIn","global","username","successCallback","dispatch","getState","url","operation","from","to","parseFloat","toFixed","memo","__config","successMessage","broadcastOperation","type"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;AACA;;IAAYA,kB;;AACZ;;IAAYC,a;;AACZ;;;;AACA;;AAMA;;;;;;;;IAEMC,W;;;AAMF,yBAAYC,KAAZ,EAAmB;AAAA;;AAAA,oJACTA,KADS;;AAEf,cAAKC,KAAL,GAAa;AACTC,oBAAQ,KADC;AAETC,mBAAO,EAFE;AAGTC,qBAAS,KAHA;AAITC,yBAAa,EAJJ;AAKTC,sBAAU;AALD,SAAb;AAOA,cAAKC,QAAL,GAAgB,MAAKA,QAAL,CAAcC,IAAd,OAAhB;AACA,cAAKC,aAAL,GAAqB,MAAKA,aAAL,CAAmBD,IAAnB,OAArB;AACA,cAAKE,YAAL,GAAoB,MAAKA,YAAL,CAAkBF,IAAlB,OAApB;AACA;AAZe;AAalB;;;;4CAEmB;AAAA;;AAChBG,uBAAW,YAAM;AACbC,mCAASC,WAAT,CAAqB,OAAKC,IAAL,CAAUZ,MAA/B,EAAuCa,KAAvC;AACH,aAFD,EAEG,GAFH;AAGH;;;sCAEaC,I,EAAM;AAChB,iBAAKC,QAAL,CAAc,EAAEX,UAAUU,IAAZ,EAAkBZ,SAAS,KAA3B,EAAd;AACH;;;iCAEQc,C,EAAG;AACRA,cAAEC,cAAF;AADQ,yBAE8B,KAAKnB,KAFnC;AAAA,gBAEAoB,MAFA,UAEAA,MAFA;AAAA,gBAEQC,QAFR,UAEQA,QAFR;AAAA,gBAEkBC,OAFlB,UAEkBA,OAFlB;AAAA,gBAGApB,MAHA,GAGW,KAAKD,KAHhB,CAGAC,MAHA;;AAIR,iBAAKe,QAAL,CAAc,EAAEb,SAAS,IAAX,EAAd;AACAmB,oBAAQC,GAAR,CAAY,6BAAZ;AACA,iBAAKxB,KAAL,CAAWyB,cAAX,CAA0B;AACtBvB,8BADsB;AAEtBC,uBAAOuB,0BAFe;AAGtBN,8BAHsB;AAItBC,kCAJsB;AAKtBC,gCALsB;AAMtBK,6BAAa,KAAK3B,KAAL,CAAW2B,WANF;AAOtBlB,+BAAe,KAAKA;AAPE,aAA1B;AASH;;;qCAEYS,C,EAAG;AACZ,gBAAMhB,SAASgB,EAAEU,MAAF,CAASC,KAAxB;AACA;AACA,iBAAKZ,QAAL,CAAc,EAAEf,cAAF,EAAd;AACH;;AAED;AACA;AACA;AACA;AACA;;;;iCAES;AAAA;;AAAA,yBAC8C,KAAKD,KADnD;AAAA,gBACGC,MADH,UACGA,MADH;AAAA,gBACWE,OADX,UACWA,OADX;AAAA,gBACoBC,WADpB,UACoBA,WADpB;AAAA,gBACiCC,QADjC,UACiCA,QADjC;AAAA,gBAEGwB,cAFH,GAEsB,KAAK9B,KAF3B,CAEG8B,cAFH;;AAGL,gBAAMC,eAAeD,eAAeE,GAAf,CAAmB,aAAnB,CAArB;AACA,gBAAMC,UAAUF,eAAeA,aAAaG,KAAb,CAAmB,GAAnB,EAAwB,CAAxB,CAAf,GAA4C,GAA5D;AACA,gBAAMC,iBAAiB,CAACjC,MAAxB;;AAEA,mBACI;AAAA;AAAA,kBAAK,WAAU,iBAAf;AACI;AAAA;AAAA,sBAAK,WAAU,iBAAf;AACI;AAAA;AAAA;AACI,sCAAU,KAAKK,QADnB;AAEI,sCAAU;AAAA,uCAAM,OAAKU,QAAL,CAAc,EAAEX,UAAU,EAAZ,EAAd,CAAN;AAAA;AAFd;AAII;AAAA;AAAA;AAAK,uDAAG,+BAAH;AAAL,yBAJJ;AAKI;AAAA;AAAA;AACK,uDACG,+DADH,EAEG,EAAE8B,qCAAF,EAFH,CADL;AAAA;AAAA,yBALJ;AAWI,iEAXJ;AAYI;AAAA;AAAA,8BAAK,WAAU,KAAf;AACI;AAAA;AAAA,kCAAK,WAAU,iCAAf;AACI;AAAA;AAAA;AAAQ,+DAAG,UAAH;AAAR,iCADJ;AAEI;AAAA;AAAA,sCAAK,WAAU,aAAf;AACI;AACI,mDAAU,mBADd;AAEI,8CAAK,MAFT;AAGI,qDAAa,2BAAG,UAAH,CAHjB;AAII,+CAAOlC,MAJX;AAKI,6CAAI,QALR;AAMI,sDAAa,KANjB;AAOI,kDAAUE,OAPd;AAQI,kDAAU,KAAKM;AARnB,sCADJ;AAWI;AAAA;AAAA,0CAAM,WAAU,mBAAhB;AACK2B,0EAAmB,GADxB;AAAA;AAEQC,oEAFR;AAAA;AAAA,qCAXJ;AAgBI;AAAA;AAAA,0CAAK,WAAU,OAAf;AAAwBjC;AAAxB;AAhBJ;AAFJ;AADJ,yBAZJ;AAmCI;AAAA;AAAA;AACK,uDAAG,WAAH,EAAgB;AACb0B,8CAAiBE,OAAjB,SACII,+BADJ,UAEKC,4BAFL;AADa,6BAAhB;AADL,yBAnCJ;AA0CI,iEA1CJ;AA2CKlC,mCACG;AAAA;AAAA;AACI,0DAAC,0BAAD,IAAkB,MAAK,QAAvB,GADJ;AAEI;AAFJ,yBA5CR;AAiDK,yBAACA,OAAD,IACG;AAAA;AAAA;AACKE,wCACG;AAAA;AAAA,kCAAK,WAAU,OAAf;AAAwBA;AAAxB,6BAFR;AAII;AAAA;AAAA;AACI,0CAAK,QADT;AAEI,+CAAU,QAFd;AAGI,8CAAU6B;AAHd;AAKK,2DAAG,WAAH;AALL;AAJJ;AAlDR;AADJ;AADJ,aADJ;AAsEH;;;EAzIqBI,gB,UACfC,S,GAAY;AACfpB,YAAQqB,oBAAUC,MAAV,CAAiBC,UADV;AAEftB,cAAUoB,oBAAUC,MAAV,CAAiBC;AAFZ,C;;AA2IvB;AACA;;kBAEe,yBACX,UAAC1C,KAAD,EAAQ2C,QAAR,EAAqB;AACjB,QAAMjB,cAAc1B,MAAM4C,IAAN,CAAWC,KAAX,CAAiB,CAAC,SAAD,CAAjB,CAApB;AACA,QAAMhB,iBAAiB7B,MAAM8C,MAAN,CAAaD,KAAb,CAAmB,CACtC,UADsC,EAEtCnB,YAAYK,GAAZ,CAAgB,UAAhB,CAFsC,CAAnB,CAAvB;AAIA,sCAAYY,QAAZ,IAAsBd,8BAAtB,EAAsCH,wBAAtC;AACH,CARU;;AAUX;AACA;AAAA,WAAa;AACTF,wBAAgB,8BAQV;AAAA,gBAPFvB,MAOE,QAPFA,MAOE;AAAA,gBANFC,KAME,QANFA,KAME;AAAA,gBALFiB,MAKE,QALFA,MAKE;AAAA,gBAJFC,QAIE,QAJFA,QAIE;AAAA,gBAHFM,WAGE,QAHFA,WAGE;AAAA,gBAFFL,OAEE,QAFFA,OAEE;AAAA,gBADFb,aACE,QADFA,aACE;;AACF,gBAAMuC,WAAWrB,YAAYK,GAAZ,CAAgB,UAAhB,CAAjB;AACA,gBAAMiB,kBAAkB,SAAlBA,eAAkB,GAAM;AAC1BC,yBACIpD,cAAcqD,QAAd,CAAuB,EAAEC,WAASJ,QAAT,eAAF,EAAvB,CADJ,EAD0B,CAGvB;AACH1B;AACH,aALD;AAMA,gBAAM+B,YAAY;AACdC,sBAAMN,QADQ;AAEdO,oBAAI,MAFU;AAGdrD,wBAAQsD,WAAWtD,MAAX,EAAmB,EAAnB,EAAuBuD,OAAvB,CAA+B,CAA/B,IAAoC,GAApC,GAA0CtD,KAHpC;AAIduD,4BAAUtC,MAAV,SAAoBC,QAJN;AAKdsC,0BAAU;AACNC,oCACI,2BACI,sDADJ,IAEI;AAJF;AALI,aAAlB;AAYAV,qBACIrD,mBAAmBgE,kBAAnB,CAAsC;AAClCC,sBAAM,UAD4B;AAElCT,oCAFkC;AAGlCJ,gDAHkC;AAIlCxC;AAJkC,aAAtC,CADJ;AAQH;AArCQ,KAAb;AAAA,CAXW,EAkDbV,WAlDa,C","file":"PromotePost.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport ReactDOM from 'react-dom';\nimport * as transactionActions from 'app/redux/TransactionReducer';\nimport * as globalActions from 'app/redux/GlobalReducer';\nimport LoadingIndicator from 'app/components/elements/LoadingIndicator';\nimport {\n    DEBT_TOKEN,\n    DEBT_TOKEN_SHORT,\n    CURRENCY_SIGN,\n    DEBT_TICKER,\n} from 'app/client_config';\nimport tt from 'counterpart';\n\nclass PromotePost extends Component {\n    static propTypes = {\n        author: PropTypes.string.isRequired,\n        permlink: PropTypes.string.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            amount: '1.0',\n            asset: '',\n            loading: false,\n            amountError: '',\n            trxError: '',\n        };\n        this.onSubmit = this.onSubmit.bind(this);\n        this.errorCallback = this.errorCallback.bind(this);\n        this.amountChange = this.amountChange.bind(this);\n        // this.assetChange = this.assetChange.bind(this);\n    }\n\n    componentDidMount() {\n        setTimeout(() => {\n            ReactDOM.findDOMNode(this.refs.amount).focus();\n        }, 300);\n    }\n\n    errorCallback(estr) {\n        this.setState({ trxError: estr, loading: false });\n    }\n\n    onSubmit(e) {\n        e.preventDefault();\n        const { author, permlink, onClose } = this.props;\n        const { amount } = this.state;\n        this.setState({ loading: true });\n        console.log('-- PromotePost.onSubmit -->');\n        this.props.dispatchSubmit({\n            amount,\n            asset: DEBT_TICKER,\n            author,\n            permlink,\n            onClose,\n            currentUser: this.props.currentUser,\n            errorCallback: this.errorCallback,\n        });\n    }\n\n    amountChange(e) {\n        const amount = e.target.value;\n        // console.log('-- PromotePost.amountChange -->', amount);\n        this.setState({ amount });\n    }\n\n    // assetChange(e) {\n    //     const asset = e.target.value;\n    //     console.log('-- PromotePost.assetChange -->', e.target.value);\n    //     this.setState({asset});\n    // }\n\n    render() {\n        const { amount, loading, amountError, trxError } = this.state;\n        const { currentAccount } = this.props;\n        const balanceValue = currentAccount.get('sbd_balance');\n        const balance = balanceValue ? balanceValue.split(' ')[0] : 0.0;\n        const submitDisabled = !amount;\n\n        return (\n            <div className=\"PromotePost row\">\n                <div className=\"column small-12\">\n                    <form\n                        onSubmit={this.onSubmit}\n                        onChange={() => this.setState({ trxError: '' })}\n                    >\n                        <h4>{tt('promote_post_jsx.promote_post')}</h4>\n                        <p>\n                            {tt(\n                                'promote_post_jsx.spend_your_DEBT_TOKEN_to_advertise_this_post',\n                                { DEBT_TOKEN }\n                            )}.\n                        </p>\n                        <hr />\n                        <div className=\"row\">\n                            <div className=\"column small-7 medium-5 large-4\">\n                                <label>{tt('g.amount')}</label>\n                                <div className=\"input-group\">\n                                    <input\n                                        className=\"input-group-field\"\n                                        type=\"text\"\n                                        placeholder={tt('g.amount')}\n                                        value={amount}\n                                        ref=\"amount\"\n                                        autoComplete=\"off\"\n                                        disabled={loading}\n                                        onChange={this.amountChange}\n                                    />\n                                    <span className=\"input-group-label\">\n                                        {DEBT_TOKEN_SHORT + ' '} ({\n                                            CURRENCY_SIGN\n                                        })\n                                    </span>\n                                    <div className=\"error\">{amountError}</div>\n                                </div>\n                            </div>\n                        </div>\n                        <div>\n                            {tt('g.balance', {\n                                balanceValue: `${balance} ${\n                                    DEBT_TOKEN_SHORT\n                                } (${CURRENCY_SIGN})`,\n                            })}\n                        </div>\n                        <br />\n                        {loading && (\n                            <span>\n                                <LoadingIndicator type=\"circle\" />\n                                <br />\n                            </span>\n                        )}\n                        {!loading && (\n                            <span>\n                                {trxError && (\n                                    <div className=\"error\">{trxError}</div>\n                                )}\n                                <button\n                                    type=\"submit\"\n                                    className=\"button\"\n                                    disabled={submitDisabled}\n                                >\n                                    {tt('g.promote')}\n                                </button>\n                            </span>\n                        )}\n                    </form>\n                </div>\n            </div>\n        );\n    }\n}\n\n// const AssetBalance = ({onClick, balanceValue}) =>\n//     <a onClick={onClick} style={{borderBottom: '#A09F9F 1px dotted', cursor: 'pointer'}}>Balance: {balanceValue}</a>\n\nexport default connect(\n    (state, ownProps) => {\n        const currentUser = state.user.getIn(['current']);\n        const currentAccount = state.global.getIn([\n            'accounts',\n            currentUser.get('username'),\n        ]);\n        return { ...ownProps, currentAccount, currentUser };\n    },\n\n    // mapDispatchToProps\n    dispatch => ({\n        dispatchSubmit: ({\n            amount,\n            asset,\n            author,\n            permlink,\n            currentUser,\n            onClose,\n            errorCallback,\n        }) => {\n            const username = currentUser.get('username');\n            const successCallback = () => {\n                dispatch(\n                    globalActions.getState({ url: `@${username}/transfers` })\n                ); // refresh transfer history\n                onClose();\n            };\n            const operation = {\n                from: username,\n                to: 'null',\n                amount: parseFloat(amount, 10).toFixed(3) + ' ' + asset,\n                memo: `@${author}/${permlink}`,\n                __config: {\n                    successMessage:\n                        tt(\n                            'promote_post_jsx.you_successfully_promoted_this_post'\n                        ) + '.',\n                },\n            };\n            dispatch(\n                transactionActions.broadcastOperation({\n                    type: 'transfer',\n                    operation,\n                    successCallback,\n                    errorCallback,\n                })\n            );\n        },\n    })\n)(PromotePost);\n"]}