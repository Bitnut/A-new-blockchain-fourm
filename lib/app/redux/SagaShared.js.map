{"version":3,"sources":["../../../src/app/redux/SagaShared.js"],"names":["getAccount","getState","getContent","globalActions","appActions","transactionActions","showTransactionErrorNotification","saveUserPreferences","wait","setTimeout","resolve","ms","sharedWatches","GET_STATE","SET_USER_PREFERENCES","TOGGLE_NIGHTMODE","TOGGLE_BLOGMODE","username","force","state","global","get","account","isLite","console","log","api","getAccountsAsync","receiveAccount","url","payload","getStateAsync","receiveState","error","steemApiError","message","transaction","errors","key","addNotification","deleteError","author","permlink","reject","content","getContentAsync","receiveContent","app","prefs","toJS"],"mappings":"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","file":"SagaShared.js","sourcesContent":["import { fromJS } from 'immutable';\nimport { call, put, select, takeEvery, takeLatest } from 'redux-saga/effects';\nimport tt from 'counterpart';\nimport { api } from '@steemit/steem-js';\nimport * as globalActions from './GlobalReducer';\nimport * as appActions from './AppReducer';\nimport * as transactionActions from './TransactionReducer';\nimport { setUserPreferences } from 'app/utils/ServerApiClient';\nimport { getStateAsync } from 'app/utils/steemApi';\n\nconst wait = ms =>\n    new Promise(resolve => {\n        setTimeout(() => resolve(), ms);\n    });\n\nexport const sharedWatches = [\n    takeEvery(globalActions.GET_STATE, getState),\n    takeLatest(\n        [\n            appActions.SET_USER_PREFERENCES,\n            appActions.TOGGLE_NIGHTMODE,\n            appActions.TOGGLE_BLOGMODE,\n        ],\n        saveUserPreferences\n    ),\n    takeEvery('transaction/ERROR', showTransactionErrorNotification),\n];\n\nexport function* getAccount(username, force = false) {\n    let account = yield select(state =>\n        state.global.get('accounts').get(username)\n    );\n\n    // hive never serves `owner` prop (among others)\n    let isLite = !!account && !account.get('owner');\n\n    if (!account || force || isLite) {\n        console.log(\n            'getAccount: loading',\n            username,\n            'force?',\n            force,\n            'lite?',\n            isLite\n        );\n\n        [account] = yield call([api, api.getAccountsAsync], [username]);\n        if (account) {\n            account = fromJS(account);\n            yield put(globalActions.receiveAccount({ account }));\n        }\n    }\n    return account;\n}\n\n/** Manual refreshes.  The router is in FetchDataSaga. */\nexport function* getState({ payload: { url } }) {\n    try {\n        const state = yield call(getStateAsync, url);\n        yield put(globalActions.receiveState(state));\n    } catch (error) {\n        console.error('~~ Saga getState error ~~>', url, error);\n        yield put(appActions.steemApiError(error.message));\n    }\n}\n\nfunction* showTransactionErrorNotification() {\n    const errors = yield select(state => state.transaction.get('errors'));\n    for (const [key, message] of errors) {\n        // Do not display a notification for the bandwidthError key.\n        if (key !== 'bandwidthError') {\n            yield put(appActions.addNotification({ key, message }));\n            yield put(transactionActions.deleteError({ key }));\n        }\n    }\n}\n\nexport function* getContent({ author, permlink, resolve, reject }) {\n    let content;\n    while (!content) {\n        content = yield call([api, api.getContentAsync], author, permlink);\n        if (content['author'] == '') {\n            // retry if content not found. #1870\n            content = null;\n            yield call(wait, 3000);\n        }\n    }\n\n    yield put(globalActions.receiveContent({ content }));\n    if (resolve && content) {\n        resolve(content);\n    } else if (reject && !content) {\n        reject();\n    }\n}\n\n/**\n * Save this user's preferences, either directly from the submitted payload or from whatever's saved in the store currently.\n *\n * @param {Object?} params.payload\n */\nfunction* saveUserPreferences({ payload }) {\n    if (payload) {\n        yield setUserPreferences(payload);\n    }\n\n    const prefs = yield select(state => state.app.get('user_preferences'));\n    yield setUserPreferences(prefs.toJS());\n}\n"]}