{"version":3,"sources":["../../../src/app/redux/UserSaga.js"],"names":["userActions","loadSavingsWithdraw","removeHighSecurityKeys","usernamePasswordLogin","usernamePasswordLogin2","promptTosAcceptance","getFeatureFlags","saveLogin_localStorage","logout","loginError","lookupPreviousOwnerAuthority","uploadImage","userWatches","USERNAME_PASSWORD_LOGIN","SAVE_LOGIN","LOGOUT","LOGIN_ERROR","LOAD_SAVINGS_WITHDRAW","UPLOAD_IMAGE","ACCEPT_TERMS","acceptTos","getLatestFeedPrice","api","getFeedHistoryAsync","history","feed","last","length","setLatestFeedPrice","highSecurityPages","state","user","getIn","username","getSavingsWithdrawToAsync","to","getSavingsWithdrawFromAsync","fro","m","v","id","withdraws","values","sort","a","b","strCmp","get","set","key","value","pathname","payload","highSecurityPage","find","p","test","action","sessionStorage","getItem","current","loadFollows","clean","undefined","password","saveLogin","operationType","afterLoginRedirectToWelcome","loginType","justLoggedIn","console","log","feedURL","autopost","memoWif","login_owner_pubkey","login_wif_owner_pubkey","data","localStorage","Buffer","toString","split","offchain","offchain_account","userProvidedRole","indexOf","global","highSecurityLogin","isRole","role","fn","getAccount","account","error","DMCAUserList","includes","private_keys","private_key","PrivateKey","fromWif","toPublicKey","posting_private","active_private","memo_private","e","fromSeed","accountAuthLookup","authority","hasActiveAuth","accountName","setAuthority","auth","fullAuths","reduce","r","type","add","size","removeItem","owner_pub_key","generated_type","name","remove","owner_pubkey","active_pubkey","posting_pubkey","memo_pubkey","has","setUser","vesting_shares","received_vesting_shares","delegated_vesting_shares","offchainData","serverAccount","challengeString","signatures","challenge","token","bufSha","hash","sha256","sign","d","sig","Signature","signBufferSha256","toHex","response","json","body","app","adsEnabled","url","URL","window","location","href","searchParams","replace","browserHistory","push","document","isTosAccepted","accepted","showTerms","signedCallAsync","flags","process","env","BROWSER","postingPubkey","forEach","memoKey","toWif","setItem","logoutType","saveLoginConfirm","reload","key_auths","fromJS","getOwnerHistoryAsync","owner_history","count","aa","bb","previous_owner_authority","o","weight_threshold","key3","key2","file","dataUrl","filename","progress","_progress","msg","stateUser","dataBs64","reader","FileReader","addEventListener","result","resolve","readAsBinaryString","commaIdx","substring","prefix","concat","formData","FormData","append","postUrl","$STM_Config","upload_image","xhr","XMLHttpRequest","open","onload","status","responseText","res","JSON","parse","onerror","upload","onprogress","event","lengthComputable","percent","Math","round","loaded","total","message","send"],"mappings":"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","file":"UserSaga.js","sourcesContent":["import { fromJS, Set, List } from 'immutable';\nimport { call, put, select, fork, takeLatest } from 'redux-saga/effects';\nimport { api } from '@steemit/steem-js';\nimport { PrivateKey, Signature, hash } from '@steemit/steem-js/lib/auth/ecc';\n\nimport { accountAuthLookup } from 'app/redux/AuthSaga';\nimport { getAccount } from 'app/redux/SagaShared';\nimport * as userActions from 'app/redux/UserReducer';\nimport { receiveFeatureFlags } from 'app/redux/AppReducer';\nimport { browserHistory } from 'react-router';\nimport {\n    serverApiLogin,\n    serverApiLogout,\n    serverApiRecordEvent,\n    isTosAccepted,\n    acceptTos,\n} from 'app/utils/ServerApiClient';\nimport { loadFollows } from 'app/redux/FollowSaga';\nimport { translate } from 'app/Translator';\nimport DMCAUserList from 'app/utils/DMCAUserList';\n\nexport const userWatches = [\n    takeLatest('@@router/LOCATION_CHANGE', removeHighSecurityKeys), // keep first to remove keys early when a page change happens\n    takeLatest(\n        'user/lookupPreviousOwnerAuthority',\n        lookupPreviousOwnerAuthority\n    ),\n    takeLatest(userActions.USERNAME_PASSWORD_LOGIN, usernamePasswordLogin),\n    takeLatest(userActions.SAVE_LOGIN, saveLogin_localStorage),\n    takeLatest(userActions.LOGOUT, logout),\n    takeLatest(userActions.LOGIN_ERROR, loginError),\n    takeLatest(userActions.LOAD_SAVINGS_WITHDRAW, loadSavingsWithdraw),\n    takeLatest(userActions.UPLOAD_IMAGE, uploadImage),\n    takeLatest(userActions.ACCEPT_TERMS, function*() {\n        try {\n            yield call(acceptTos);\n        } catch (e) {\n            // TODO: log error to server, conveyor is unavailable\n        }\n    }),\n    function* getLatestFeedPrice() {\n        try {\n            const history = yield call([api, api.getFeedHistoryAsync]);\n            const feed = history['price_history'];\n            const last = fromJS(feed[feed.length - 1]);\n            yield put(userActions.setLatestFeedPrice(last));\n        } catch (error) {\n            // (exceedingly rare) ignore, UI will fall back to feed_price\n        }\n    },\n];\n\nconst highSecurityPages = [\n    /\\/market/,\n    /\\/@.+\\/(transfers|permissions|password)/,\n    /\\/~witnesses/,\n];\n\nfunction* loadSavingsWithdraw() {\n    const username = yield select(state =>\n        state.user.getIn(['current', 'username'])\n    );\n    const to = yield call([api, api.getSavingsWithdrawToAsync], username);\n    const fro = yield call([api, api.getSavingsWithdrawFromAsync], username);\n\n    const m = {};\n    for (const v of to) m[v.id] = v;\n    for (const v of fro) m[v.id] = v;\n\n    const withdraws = List(fromJS(m).values()).sort((a, b) =>\n        strCmp(a.get('complete'), b.get('complete'))\n    );\n\n    yield put(\n        userActions.set({\n            key: 'savings_withdraws',\n            value: withdraws,\n        })\n    );\n}\n\nconst strCmp = (a, b) => (a > b ? 1 : a < b ? -1 : 0);\n\n// function* getCurrentAccountWatch() {\n//     // yield* takeLatest('user/SHOW_TRANSFER', getCurrentAccount);\n// }\n\nfunction* removeHighSecurityKeys({ payload: { pathname } }) {\n    const highSecurityPage =\n        highSecurityPages.find(p => p.test(pathname)) != null;\n    // Let the user keep the active key when going from one high security page to another.  This helps when\n    // the user logins into the Wallet then the Permissions tab appears (it was hidden).  This keeps them\n    // from getting logged out when they click on Permissions (which is really bad because that tab\n    // disappears again).\n    if (!highSecurityPage) yield put(userActions.removeHighSecurityKeys());\n}\n\n/**\n    @arg {object} action.username - Unless a WIF is provided, this is hashed with the password and key_type to create private keys.\n    @arg {object} action.password - Password or WIF private key.  A WIF becomes the posting key, a password can create all three\n        key_types: active, owner, posting keys.\n*/\nfunction* usernamePasswordLogin(action) {\n    // This is a great place to mess with session-related user state (:\n    // If the user hasn't previously hidden the announcement in this session,\n    // or if the user's browser does not support session storage,\n    // show the announcement.\n    if (\n        typeof sessionStorage === 'undefined' ||\n        (typeof sessionStorage !== 'undefined' &&\n            sessionStorage.getItem('hideAnnouncement') !== 'true')\n    ) {\n        // Uncomment to re-enable announcment\n        // TODO: use config to enable/disable\n        // yield put(userActions.showAnnouncement());\n    }\n\n    // Sets 'loading' while the login is taking place.  The key generation can take a while on slow computers.\n    yield call(usernamePasswordLogin2, action.payload);\n    const current = yield select(state => state.user.get('current'));\n    if (current) {\n        const username = current.get('username');\n        yield fork(loadFollows, 'getFollowingAsync', username, 'blog');\n        yield fork(loadFollows, 'getFollowingAsync', username, 'ignore');\n    }\n}\n\n// const isHighSecurityOperations = ['transfer', 'transfer_to_vesting', 'withdraw_vesting',\n//     'limit_order_create', 'limit_order_cancel', 'account_update', 'account_witness_vote']\n\nconst clean = value =>\n    value == null || value === '' || /null|undefined/.test(value)\n        ? undefined\n        : value;\n\nfunction* usernamePasswordLogin2({\n    username,\n    password,\n    saveLogin,\n    operationType /*high security*/,\n    afterLoginRedirectToWelcome,\n}) {\n    const user = yield select(state => state.user);\n    const loginType = user.get('login_type');\n    const justLoggedIn = loginType === 'basic';\n    console.log(\n        'Login type:',\n        loginType,\n        'Just logged in?',\n        justLoggedIn,\n        'username:',\n        username\n    );\n\n    // login, using saved password\n    let feedURL = false;\n    let autopost, memoWif, login_owner_pubkey, login_wif_owner_pubkey;\n    if (!username && !password) {\n        const data = localStorage.getItem('autopost2');\n        if (data) {\n            // auto-login with a low security key (like a posting key)\n            autopost = true; // must use simi-colon\n            // The 'password' in this case must be the posting private wif .. See setItme('autopost')\n            [username, password, memoWif, login_owner_pubkey] = new Buffer(\n                data,\n                'hex'\n            )\n                .toString()\n                .split('\\t');\n            memoWif = clean(memoWif);\n            login_owner_pubkey = clean(login_owner_pubkey);\n        }\n    }\n    // no saved password\n    if (!username || !password) {\n        console.log('No saved password');\n        const offchain_account = yield select(state =>\n            state.offchain.get('account')\n        );\n        if (offchain_account) serverApiLogout();\n        return;\n    }\n\n    let userProvidedRole; // login via:  username/owner\n    if (username.indexOf('/') > -1) {\n        // \"alice/active\" will login only with Alices active key\n        [username, userProvidedRole] = username.split('/');\n    }\n\n    const pathname = yield select(state => state.global.get('pathname'));\n    const highSecurityLogin =\n        // /owner|active/.test(userProvidedRole) ||\n        // isHighSecurityOperations.indexOf(operationType) !== -1 ||\n        highSecurityPages.find(p => p.test(pathname)) != null;\n\n    const isRole = (role, fn) =>\n        !userProvidedRole || role === userProvidedRole ? fn() : undefined;\n\n    const account = yield call(getAccount, username);\n    if (!account) {\n        console.log('No account');\n        yield put(userActions.loginError({ error: 'Username does not exist' }));\n        return;\n    }\n    //dmca user block\n    if (username && DMCAUserList.includes(username)) {\n        console.log('DMCA list');\n        yield put(\n            userActions.loginError({ error: translate('terms_violation') })\n        );\n        return;\n    }\n\n    let private_keys;\n    try {\n        const private_key = PrivateKey.fromWif(password);\n        login_wif_owner_pubkey = private_key.toPublicKey().toString();\n        private_keys = fromJS({\n            posting_private: isRole('posting', () => private_key),\n            active_private: isRole('active', () => private_key),\n            memo_private: private_key,\n        });\n    } catch (e) {\n        // Password (non wif)\n        login_owner_pubkey = PrivateKey.fromSeed(username + 'owner' + password)\n            .toPublicKey()\n            .toString();\n        private_keys = fromJS({\n            posting_private: isRole('posting', () =>\n                PrivateKey.fromSeed(username + 'posting' + password)\n            ),\n            active_private: isRole('active', () =>\n                PrivateKey.fromSeed(username + 'active' + password)\n            ),\n            memo_private: PrivateKey.fromSeed(username + 'memo' + password),\n        });\n    }\n    if (memoWif)\n        private_keys = private_keys.set(\n            'memo_private',\n            PrivateKey.fromWif(memoWif)\n        );\n\n    yield call(accountAuthLookup, {\n        payload: {\n            account,\n            private_keys,\n            highSecurityLogin,\n            login_owner_pubkey,\n        },\n    });\n    let authority = yield select(state =>\n        state.user.getIn(['authority', username])\n    );\n    const hasActiveAuth = authority.get('active') === 'full';\n    if (!highSecurityLogin) {\n        const accountName = account.get('name');\n        authority = authority.set('active', 'none');\n        yield put(userActions.setAuthority({ accountName, auth: authority }));\n    }\n    const fullAuths = authority.reduce(\n        (r, auth, type) => (auth === 'full' ? r.add(type) : r),\n        Set()\n    );\n    if (!fullAuths.size) {\n        console.log('No full auths');\n        localStorage.removeItem('autopost2');\n        const owner_pub_key = account.getIn(['owner', 'key_auths', 0, 0]);\n        if (\n            login_owner_pubkey === owner_pub_key ||\n            login_wif_owner_pubkey === owner_pub_key\n        ) {\n            yield put(userActions.loginError({ error: 'owner_login_blocked' }));\n        } else if (!highSecurityLogin && hasActiveAuth) {\n            yield put(\n                userActions.loginError({ error: 'active_login_blocked' })\n            );\n        } else {\n            const generated_type = password[0] === 'P' && password.length > 40;\n            serverApiRecordEvent(\n                'login_attempt',\n                JSON.stringify({\n                    name: username,\n                    login_owner_pubkey,\n                    owner_pub_key,\n                    generated_type,\n                })\n            );\n            yield put(userActions.loginError({ error: 'Incorrect Password' }));\n        }\n        return;\n    }\n    if (authority.get('posting') !== 'full')\n        private_keys = private_keys.remove('posting_private');\n\n    if (!highSecurityLogin || authority.get('active') !== 'full')\n        private_keys = private_keys.remove('active_private');\n\n    const owner_pubkey = account.getIn(['owner', 'key_auths', 0, 0]);\n    const active_pubkey = account.getIn(['active', 'key_auths', 0, 0]);\n    const posting_pubkey = account.getIn(['posting', 'key_auths', 0, 0]);\n\n    if (\n        private_keys.get('memo_private') &&\n        account.get('memo_key') !==\n            private_keys\n                .get('memo_private')\n                .toPublicKey()\n                .toString()\n    )\n        // provided password did not yield memo key\n        private_keys = private_keys.remove('memo_private');\n\n    if (!highSecurityLogin) {\n        console.log('Not high security login');\n        if (\n            posting_pubkey === owner_pubkey ||\n            posting_pubkey === active_pubkey\n        ) {\n            yield put(\n                userActions.loginError({\n                    error:\n                        'This login gives owner or active permissions and should not be used here.  Please provide a posting only login.',\n                })\n            );\n            localStorage.removeItem('autopost2');\n            return;\n        }\n    }\n    const memo_pubkey = private_keys.has('memo_private')\n        ? private_keys\n              .get('memo_private')\n              .toPublicKey()\n              .toString()\n        : null;\n\n    if (memo_pubkey === owner_pubkey || memo_pubkey === active_pubkey)\n        // Memo key could be saved in local storage.. In RAM it is not purged upon LOCATION_CHANGE\n        private_keys = private_keys.remove('memo_private');\n\n    // If user is signing operation by operaion and has no saved login, don't save to RAM\n    if (!operationType || saveLogin) {\n        if (username) feedURL = '/@' + username + '/feed';\n        // Keep the posting key in RAM but only when not signing an operation.\n        // No operation or the user has checked: Keep me logged in...\n        yield put(\n            userActions.setUser({\n                username,\n                private_keys,\n                login_owner_pubkey,\n                vesting_shares: account.get('vesting_shares'),\n                received_vesting_shares: account.get('received_vesting_shares'),\n                delegated_vesting_shares: account.get(\n                    'delegated_vesting_shares'\n                ),\n            })\n        );\n    } else {\n        if (username) feedURL = '/@' + username + '/feed';\n        yield put(\n            userActions.setUser({\n                username,\n                vesting_shares: account.get('vesting_shares'),\n                received_vesting_shares: account.get('received_vesting_shares'),\n                delegated_vesting_shares: account.get(\n                    'delegated_vesting_shares'\n                ),\n            })\n        );\n    }\n\n    if (!autopost && saveLogin) {\n        yield put(userActions.saveLogin());\n    }\n\n    try {\n        // const challengeString = yield serverApiLoginChallenge()\n        const offchainData = yield select(state => state.offchain);\n        const serverAccount = offchainData.get('account');\n        const challengeString = offchainData.get('login_challenge');\n        if (!serverAccount && challengeString) {\n            console.log('No server account, but challenge string');\n            const signatures = {};\n            const challenge = { token: challengeString };\n            const bufSha = hash.sha256(JSON.stringify(challenge, null, 0));\n            const sign = (role, d) => {\n                console.log('Sign before');\n                if (!d) return;\n                console.log('Sign after');\n                const sig = Signature.signBufferSha256(bufSha, d);\n                signatures[role] = sig.toHex();\n            };\n            sign('posting', private_keys.get('posting_private'));\n            // sign('active', private_keys.get('active_private'))\n\n            console.log('Logging in as', username);\n            const response = yield serverApiLogin(username, signatures);\n            const body = yield response.json();\n\n            if (justLoggedIn) {\n                // If ads are enabled, reload the page instead of changing the browser\n                // history when they log in, so headers will get re-requested.\n                const adsEnabled = yield select(state =>\n                    state.app.getIn(['googleAds', 'enabled'])\n                );\n                if (adsEnabled) {\n                    var url = new URL(window.location.href);\n                    url.searchParams.set('auth', 'true');\n                    console.log('New post-login URL', url.toString());\n                    window.location.replace(url.toString());\n                    return;\n                }\n            }\n        }\n    } catch (error) {\n        // Does not need to be fatal\n        console.error('Server Login Error', error);\n    }\n\n    // Feature Flags\n    if (private_keys.get('posting_private')) {\n        yield fork(\n            getFeatureFlags,\n            username,\n            private_keys.get('posting_private').toString()\n        );\n    }\n    // TOS acceptance\n    yield fork(promptTosAcceptance, username);\n\n    // Redirect user to the appropriate page after login.\n    if (afterLoginRedirectToWelcome) {\n        console.log('Redirecting to welcome page');\n        browserHistory.push('/welcome');\n    } else if (feedURL && document.location.pathname === '/') {\n        console.log('Redirecting to feed page', feedURL);\n        browserHistory.push(feedURL);\n    }\n}\n\nfunction* promptTosAcceptance(username) {\n    try {\n        const accepted = yield call(isTosAccepted, username);\n        if (!accepted) {\n            yield put(userActions.showTerms());\n        }\n    } catch (e) {\n        // TODO: log error to server, conveyor is unavailable\n    }\n}\n\nfunction* getFeatureFlags(username, posting_private) {\n    try {\n        const flags = yield call(\n            [api, api.signedCallAsync],\n            'conveyor.get_feature_flags',\n            { account: username },\n            username,\n            posting_private\n        );\n        yield put(receiveFeatureFlags(flags));\n    } catch (error) {\n        // Do nothing; feature flags are not ready yet. Or posting_private is not available.\n    }\n}\n\nfunction* saveLogin_localStorage() {\n    if (!process.env.BROWSER) {\n        console.error('Non-browser environment, skipping localstorage');\n        return;\n    }\n    localStorage.removeItem('autopost2');\n    const [username, private_keys, login_owner_pubkey] = yield select(state => [\n        state.user.getIn(['current', 'username']),\n        state.user.getIn(['current', 'private_keys']),\n        state.user.getIn(['current', 'login_owner_pubkey']),\n    ]);\n    if (!username) {\n        console.error('Not logged in');\n        return;\n    }\n    // Save the lowest security key\n    const posting_private = private_keys.get('posting_private');\n    if (!posting_private) {\n        console.error('No posting key to save?');\n        return;\n    }\n    const account = yield select(state =>\n        state.global.getIn(['accounts', username])\n    );\n    if (!account) {\n        console.error('Missing global.accounts[' + username + ']');\n        return;\n    }\n    const postingPubkey = posting_private.toPublicKey().toString();\n    try {\n        account.getIn(['active', 'key_auths']).forEach(auth => {\n            if (auth.get(0) === postingPubkey)\n                throw 'Login will not be saved, posting key is the same as active key';\n        });\n        account.getIn(['owner', 'key_auths']).forEach(auth => {\n            if (auth.get(0) === postingPubkey)\n                throw 'Login will not be saved, posting key is the same as owner key';\n        });\n    } catch (e) {\n        console.error(e);\n        return;\n    }\n\n    const memoKey = private_keys.get('memo_private');\n    const memoWif = memoKey && memoKey.toWif();\n    const data = new Buffer(\n        `${username}\\t${posting_private.toWif()}\\t${memoWif ||\n            ''}\\t${login_owner_pubkey || ''}`\n    ).toString('hex');\n    // autopost is a auto login for a low security key (like the posting key)\n    localStorage.setItem('autopost2', data);\n}\n\nfunction* logout(action) {\n    const payload = (action || {}).payload || {};\n    const logoutType = payload.type || 'default';\n    console.log('Logging out', arguments, 'logout type', logoutType);\n\n    // Just in case it is still showing\n    yield put(userActions.saveLoginConfirm(false));\n\n    if (process.env.BROWSER) {\n        localStorage.removeItem('autopost2');\n    }\n\n    yield serverApiLogout();\n\n    // If ads are enabled, reload the page instead of changing the browser\n    // history when they log out, so headers will get re-requested.\n    const adsEnabled = yield select(state =>\n        state.app.getIn(['googleAds', 'enabled'])\n    );\n    if (logoutType == 'default' && adsEnabled) {\n        window.location.reload();\n    }\n}\n\nfunction* loginError({\n    payload: {\n        /*error*/\n    },\n}) {\n    serverApiLogout();\n}\n\n/**\n    If the owner key was changed after the login owner key, this function will find the next owner key history record after the change and store it under user.previous_owner_authority.\n*/\nfunction* lookupPreviousOwnerAuthority({ payload: {} }) {\n    const current = yield select(state => state.user.getIn(['current']));\n    if (!current) return;\n\n    const login_owner_pubkey = current.get('login_owner_pubkey');\n    if (!login_owner_pubkey) return;\n\n    const username = current.get('username');\n    const key_auths = yield select(state =>\n        state.global.getIn(['accounts', username, 'owner', 'key_auths'])\n    );\n    if (key_auths && key_auths.find(key => key.get(0) === login_owner_pubkey)) {\n        // console.log('UserSaga ---> Login matches current account owner');\n        return;\n    }\n    // Owner history since this index was installed July 14\n    let owner_history = fromJS(\n        yield call([api, api.getOwnerHistoryAsync], username)\n    );\n    if (owner_history.count() === 0) return;\n    owner_history = owner_history.sort((b, a) => {\n        //sort decending\n        const aa = a.get('last_valid_time');\n        const bb = b.get('last_valid_time');\n        return aa < bb ? -1 : aa > bb ? 1 : 0;\n    });\n    // console.log('UserSaga ---> owner_history', owner_history.toJS())\n    const previous_owner_authority = owner_history.find(o => {\n        const auth = o.get('previous_owner_authority');\n        const weight_threshold = auth.get('weight_threshold');\n        const key3 = auth\n            .get('key_auths')\n            .find(\n                key2 =>\n                    key2.get(0) === login_owner_pubkey &&\n                    key2.get(1) >= weight_threshold\n            );\n        return key3 ? auth : null;\n    });\n    if (!previous_owner_authority) {\n        console.log('UserSaga ---> Login owner does not match owner history');\n        return;\n    }\n    // console.log('UserSage ---> previous_owner_authority', previous_owner_authority.toJS())\n    yield put(userActions.setUser({ previous_owner_authority }));\n}\n\nfunction* uploadImage({\n    payload: { file, dataUrl, filename = 'image.txt', progress },\n}) {\n    const _progress = progress;\n    progress = msg => {\n        // console.log('Upload image progress', msg)\n        _progress(msg);\n    };\n\n    const stateUser = yield select(state => state.user);\n    const username = stateUser.getIn(['current', 'username']);\n    const d = stateUser.getIn(['current', 'private_keys', 'posting_private']);\n    if (!username) {\n        progress({ error: 'Please login first.' });\n        return;\n    }\n    if (!d) {\n        progress({ error: 'Login with your posting key' });\n        return;\n    }\n\n    if (!file && !dataUrl) {\n        console.error('uploadImage required: file or dataUrl');\n        return;\n    }\n\n    let data, dataBs64;\n    if (file) {\n        // drag and drop\n        const reader = new FileReader();\n        data = yield new Promise(resolve => {\n            reader.addEventListener('load', () => {\n                const result = new Buffer(reader.result, 'binary');\n                resolve(result);\n            });\n            reader.readAsBinaryString(file);\n        });\n    } else {\n        // recover from preview\n        const commaIdx = dataUrl.indexOf(',');\n        dataBs64 = dataUrl.substring(commaIdx + 1);\n        data = new Buffer(dataBs64, 'base64');\n    }\n\n    // The challenge needs to be prefixed with a constant (both on the server and checked on the client) to make sure the server can't easily make the client sign a transaction doing something else.\n    const prefix = new Buffer('ImageSigningChallenge');\n    const bufSha = hash.sha256(Buffer.concat([prefix, data]));\n\n    const formData = new FormData();\n    if (file) {\n        formData.append('file', file);\n    } else {\n        // formData.append('file', file, filename) <- Failed to add filename=xxx to Content-Disposition\n        // Can't easily make this look like a file so this relies on the server supporting: filename and filebinary\n        formData.append('filename', filename);\n        formData.append('filebase64', dataBs64);\n    }\n\n    const sig = Signature.signBufferSha256(bufSha, d);\n    const postUrl = `${$STM_Config.upload_image}/${username}/${sig.toHex()}`;\n\n    const xhr = new XMLHttpRequest();\n    xhr.open('POST', postUrl);\n    xhr.onload = function() {\n        console.log(xhr.status, xhr.responseText);\n        const res = JSON.parse(xhr.responseText);\n        const { error } = res;\n        if (error) {\n            progress({ error: 'Error: ' + error });\n            return;\n        }\n        const { url } = res;\n        progress({ url });\n    };\n    xhr.onerror = function(error) {\n        console.error(filename, error);\n        progress({ error: 'Unable to contact the server.' });\n    };\n    xhr.upload.onprogress = function(event) {\n        if (event.lengthComputable) {\n            const percent = Math.round(event.loaded / event.total * 100);\n            progress({ message: `Uploading ${percent}%` });\n            // console.log('Upload', percent)\n        }\n    };\n    xhr.send(formData);\n}\n\n// function* getCurrentAccount() {\n//     const current = yield select(state => state.user.get('current'))\n//     if (!current) return\n//     const [account] = yield call([api, api.getAccountsAsync], [current.get('username')])\n//     yield put(g.actions.receiveAccount({ account }))\n// }\n"]}