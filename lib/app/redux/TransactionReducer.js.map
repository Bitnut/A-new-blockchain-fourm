{"version":3,"sources":["../../../src/app/redux/TransactionReducer.js"],"names":["reducer","CONFIRM_OPERATION","HIDE_CONFIRM","BROADCAST_OPERATION","UPDATE_AUTHORITIES","UPDATE_META","ERROR","DELETE_ERROR","DISMISS_ERROR","SET","REMOVE","RECOVER_ACCOUNT","defaultState","operations","status","key","error","busy","errors","bandwidthError","state","action","payload","type","operation","confirm","warning","merge","show_confirm_modal","confirmBroadcastOperation","confirmErrorCallback","errorCallback","undefined","errorStr","toString","errorKey","test","console","hasIn","setIn","exception","message","err_lines","split","length","txt","trim","substring","update","set","includes","Error","deleteIn","Array","isArray","value","removeIn","confirmOperation","hideConfirm","broadcastOperation","updateAuthorities","updateMeta","deleteError","dismissError","remove","recoverAccount"],"mappings":"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","file":"TransactionReducer.js","sourcesContent":["import { fromJS, Map } from 'immutable';\n\n// Action constants\nconst CONFIRM_OPERATION = 'transaction/CONFIRM_OPERATION';\nconst HIDE_CONFIRM = 'transaction/HIDE_CONFIRM';\nexport const BROADCAST_OPERATION = 'transaction/BROADCAST_OPERATION';\nexport const UPDATE_AUTHORITIES = 'transaction/UPDATE_AUTHORITIES';\nexport const UPDATE_META = 'transaction/UPDATE_META';\nconst ERROR = 'transaction/ERROR'; // Has a watcher in SagaShared\nconst DELETE_ERROR = 'transaction/DELETE_ERROR';\nconst DISMISS_ERROR = 'transaction/DISMISS_ERROR';\nconst SET = 'transaction/SET';\nconst REMOVE = 'transaction/REMOVE';\n// Saga-related\nexport const RECOVER_ACCOUNT = 'transaction/RECOVER_ACCOUNT';\nconst defaultState = fromJS({\n    operations: [],\n    status: { key: '', error: false, busy: false },\n    errors: {\n        bandwidthError: false,\n    },\n});\n\nexport default function reducer(state = defaultState, action) {\n    const payload = action.payload;\n\n    switch (action.type) {\n        case CONFIRM_OPERATION: {\n            const operation = fromJS(payload.operation);\n            const confirm = payload.confirm;\n            const warning = payload.warning;\n            return state.merge({\n                show_confirm_modal: true,\n                confirmBroadcastOperation: operation,\n                confirmErrorCallback: payload.errorCallback,\n                confirm,\n                warning,\n            });\n        }\n\n        case HIDE_CONFIRM:\n            return state.merge({\n                show_confirm_modal: false,\n                confirmBroadcastOperation: undefined,\n                confirm: undefined,\n            });\n\n        case BROADCAST_OPERATION:\n            // See TransactionSaga.js\n            return state;\n\n        case UPDATE_AUTHORITIES:\n            return state;\n\n        case UPDATE_META:\n            return state;\n\n        case ERROR: {\n            const { operations, error, errorCallback } = payload;\n\n            let errorStr = error.toString();\n            let errorKey = 'Transaction broadcast error.';\n            for (const [type /*, operation*/] of operations) {\n                switch (type) {\n                    case 'vote':\n                        if (/uniqueness constraint/.test(errorStr)) {\n                            errorKey = 'You already voted for this post';\n                            console.error('You already voted for this post.');\n                        }\n                        if (/Voting weight is too small/.test(errorStr)) {\n                            errorKey = 'Voting weight is too small';\n                            errorStr =\n                                'Voting weight is too small, please accumulate more voting power or steem power.';\n                        }\n                        break;\n                    case 'comment':\n                        if (\n                            /You may only post once per minute/.test(errorStr)\n                        ) {\n                            errorKey = 'You may only post once per minute.';\n                        } else if (errorStr === 'Testing, fake error')\n                            errorKey = 'Testing, fake error';\n                        break;\n                    case 'transfer':\n                        if (/get_balance/.test(errorStr)) {\n                            errorKey = 'Insufficient balance.';\n                        }\n                        break;\n                    case 'withdraw_vesting':\n                        if (\n                            /Account registered by another account requires 10x account creation fee worth of Steem Power/.test(\n                                errorStr\n                            )\n                        )\n                            errorKey =\n                                'Account requires 10x the account creation fee in Steem Power (approximately 30 SP) before it can power down.';\n                        break;\n                    default:\n                        break;\n                }\n                if (state.hasIn(['TransactionError', type + '_listener'])) {\n                    state = state.setIn(\n                        ['TransactionError', type],\n                        fromJS({ key: errorKey, exception: errorStr })\n                    );\n                } else {\n                    if (error.message) {\n                        // TODO: This reformatting could be better, in most cases, errorKey and errorString end up being similar if not identical.\n                        // Depends on FC_ASSERT formatting\n                        // https://github.com/steemit/steemit.com/issues/222\n                        const err_lines = error.message.split('\\n');\n                        if (err_lines.length > 2) {\n                            errorKey = err_lines[1];\n                            const txt = errorKey.split(': ');\n                            if (\n                                txt.length &&\n                                txt[txt.length - 1].trim() !== ''\n                            ) {\n                                errorKey = errorStr = txt[txt.length - 1];\n                            } else\n                                errorStr = `Transaction failed: ${\n                                    err_lines[1]\n                                }`;\n                        }\n                    }\n                    // TODO: This would perhaps be better expressed as a Case, Switch statement.\n                    // TODO: The precise reason for why this clipping needs to happen is unclear.\n                    if (errorStr.length > 200)\n                        errorStr = errorStr.substring(0, 200);\n                    // Catch for unknown key better error handling\n                    if (/unknown key: /.test(errorKey)) {\n                        errorKey = \"Steem account doesn't exist.\";\n                        errorStr =\n                            \"Transaction failed: Steem account doesn't exist.\";\n                    }\n                    // Catch for invalid active authority\n                    if (/Missing Active Authority /.test(errorKey)) {\n                        errorKey = 'Not your valid active key.';\n                        errorStr =\n                            'Transaction failed: Not your valid active key.';\n                    }\n                    // TODO: refactor this so that the keys are consistent and sane, i.e. do not include user name in error key.\n                    state = state.update('errors', errors => {\n                        return errors\n                            ? errors.set(errorKey, errorStr)\n                            : Map({ [errorKey]: errorStr });\n                    });\n                    // Sane error key for the bandwidth error.\n                    if (\n                        errorKey.includes('bandwidth') ||\n                        errorStr.includes('bandwidth') ||\n                        errorStr.includes('RC') // Error key for HF-20 insufficient RC error, #3001.\n                    ) {\n                        state = state.setIn(['errors', 'bandwidthError'], true);\n                    }\n                }\n            }\n\n            if (errorCallback) {\n                errorCallback(errorKey);\n            } else {\n                throw new Error(\n                    'PANIC: no callback registered to handle error ' + errorKey\n                );\n            }\n\n            return state;\n        }\n\n        case DELETE_ERROR:\n            return state.deleteIn(['errors', payload.key]);\n\n        case DISMISS_ERROR:\n            return state.setIn(['errors', payload.key], false);\n\n        case SET:\n            return state.setIn(\n                Array.isArray(payload.key) ? payload.key : [payload.key],\n                fromJS(payload.value)\n            );\n\n        case REMOVE:\n            return state.removeIn(\n                Array.isArray(payload.key) ? payload.key : [payload.key]\n            );\n\n        default:\n            return state;\n    }\n}\n\n// Action creators\nexport const confirmOperation = payload => ({\n    type: CONFIRM_OPERATION,\n    payload,\n});\n\nexport const hideConfirm = payload => ({\n    type: HIDE_CONFIRM,\n    payload,\n});\n\nexport const broadcastOperation = payload => ({\n    type: BROADCAST_OPERATION,\n    payload,\n});\n\nexport const updateAuthorities = payload => ({\n    type: UPDATE_AUTHORITIES,\n    payload,\n});\n\nexport const updateMeta = payload => ({\n    type: UPDATE_META,\n    payload,\n});\n\nexport const error = payload => ({\n    type: ERROR,\n    payload,\n});\n\nexport const deleteError = payload => ({\n    type: DELETE_ERROR,\n    payload,\n});\n\nexport const dismissError = payload => ({\n    type: DISMISS_ERROR,\n    payload,\n});\n\nexport const set = payload => ({\n    type: SET,\n    payload,\n});\n\nexport const remove = payload => ({\n    type: REMOVE,\n    payload,\n});\n\nexport const recoverAccount = payload => ({\n    type: RECOVER_ACCOUNT,\n    payload,\n});\n"]}