{"version":3,"sources":["../../../src/app/redux/RootReducer.js"],"names":["initReducer","reducer","type","state","action","Map","content","get","withMutations","c","forEach","cc","key","getIn","setIn","set","payload","pathname","global","globalReducer","market","marketReducer","offchain","offchainReducer","user","userReducer","transaction","transactionReducer","discussion","routing","routerReducer","app","appReducer","form","formReducer"],"mappings":";;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,SAASA,WAAT,CAAqBC,OAArB,EAA8BC,IAA9B,EAAoC;AAChC,WAAO,UAACC,KAAD,EAAQC,MAAR,EAAmB;AACtB,YAAI,CAACD,KAAL,EAAY,OAAOF,QAAQE,KAAR,EAAeC,MAAf,CAAP;;AAEZ;AACA,YAAIA,OAAOF,IAAP,KAAgB,cAAhB,IAAkCE,OAAOF,IAAP,KAAgB,QAAtD,EAAgE;AAC5D,gBAAI,EAAEC,iBAAiBE,cAAnB,CAAJ,EAA6B;AACzBF,wBAAQ,uBAAOA,KAAP,CAAR;AACH;AACD,gBAAID,SAAS,QAAb,EAAuB;AACnB,oBAAMI,UAAUH,MAAMI,GAAN,CAAU,SAAV,EAAqBC,aAArB,CAAmC,aAAK;AACpDC,sBAAEC,OAAF,CAAU,UAACC,EAAD,EAAKC,GAAL,EAAa;AACnB,4BAAI,CAACH,EAAEI,KAAF,CAAQ,CAACD,GAAD,EAAM,OAAN,CAAR,CAAL,EAA8B;AAC1B;AACA;AACA;AACAH,8BAAEK,KAAF,CAAQ,CAACF,GAAD,EAAM,OAAN,CAAR,EAAwB,uBAAO,kCAAaD,EAAb,CAAP,CAAxB;AACH;AACJ,qBAPD;AAQH,iBATe,CAAhB;AAUAR,wBAAQA,MAAMY,GAAN,CAAU,SAAV,EAAqBT,OAArB,CAAR;AACH;AACD,mBAAOH,KAAP;AACH;;AAED,YAAIC,OAAOF,IAAP,KAAgB,0BAAhB,IAA8CA,SAAS,QAA3D,EAAqE;AACjEC,oBAAQA,MAAMY,GAAN,CAAU,UAAV,EAAsBX,OAAOY,OAAP,CAAeC,QAArC,CAAR;AACA;AACH;;AAED,eAAOhB,QAAQE,KAAR,EAAeC,MAAf,CAAP;AACH,KA9BD;AA+BH,C,CAzCoD;kBA2CtC,4BAAgB;AAC3Bc,YAAQlB,YAAYmB,uBAAZ,EAA2B,QAA3B,CADmB;AAE3BC,YAAQpB,YAAYqB,uBAAZ,CAFmB;AAG3BC,cAAUtB,YAAYuB,yBAAZ,CAHiB;AAI3BC,UAAMxB,YAAYyB,qBAAZ,CAJqB;AAK3BC,iBAAa1B,YAAY2B,4BAAZ,CALc;AAM3BC,gBAAY5B,YAAY;AAAA,YAACG,KAAD,uEAAS,EAAT;AAAA,eAAgBA,KAAhB;AAAA,KAAZ,CANe;AAO3B0B,aAAS7B,YAAY8B,+BAAZ,CAPkB;AAQ3BC,SAAK/B,YAAYgC,oBAAZ,CARsB;AAS3BC,UAAMC;AATqB,CAAhB,C","file":"RootReducer.js","sourcesContent":["import { Map, fromJS } from 'immutable';\nimport { routerReducer } from 'react-router-redux';\nimport { combineReducers } from 'redux';\nimport { reducer as formReducer } from 'redux-form'; // @deprecated, instead use: app/utils/ReactForm.js\nimport { contentStats } from 'app/utils/StateFunctions';\nimport appReducer from './AppReducer';\nimport globalReducer from './GlobalReducer';\nimport marketReducer from './MarketReducer';\nimport userReducer from './UserReducer';\nimport transactionReducer from './TransactionReducer';\nimport offchainReducer from './OffchainReducer';\n\nfunction initReducer(reducer, type) {\n    return (state, action) => {\n        if (!state) return reducer(state, action);\n\n        // @@redux/INIT server and client init\n        if (action.type === '@@redux/INIT' || action.type === '@@INIT') {\n            if (!(state instanceof Map)) {\n                state = fromJS(state);\n            }\n            if (type === 'global') {\n                const content = state.get('content').withMutations(c => {\n                    c.forEach((cc, key) => {\n                        if (!c.getIn([key, 'stats'])) {\n                            // This may have already been set in UniversalRender; if so, then\n                            //   active_votes were cleared from server response. In this case it\n                            //   is important to not try to recalculate the stats. (#1040)\n                            c.setIn([key, 'stats'], fromJS(contentStats(cc)));\n                        }\n                    });\n                });\n                state = state.set('content', content);\n            }\n            return state;\n        }\n\n        if (action.type === '@@router/LOCATION_CHANGE' && type === 'global') {\n            state = state.set('pathname', action.payload.pathname);\n            // console.log(action.type, type, action, state.toJS())\n        }\n\n        return reducer(state, action);\n    };\n}\n\nexport default combineReducers({\n    global: initReducer(globalReducer, 'global'),\n    market: initReducer(marketReducer),\n    offchain: initReducer(offchainReducer),\n    user: initReducer(userReducer),\n    transaction: initReducer(transactionReducer),\n    discussion: initReducer((state = {}) => state),\n    routing: initReducer(routerReducer),\n    app: initReducer(appReducer),\n    form: formReducer,\n});\n"]}