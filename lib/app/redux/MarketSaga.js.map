{"version":3,"sources":["../../../src/app/redux/MarketSaga.js"],"names":["fetchMarket","fetchOpenOrders","reloadMarket","marketActions","appActions","userActions","marketWatches","SET_USER","UPDATE_MARKET","wait","setTimeout","resolve","ms","polling","active_user","last_trade","location_change_action","pathname","payload","api","getOrderBookAsync","state","receiveOrderbook","trades","getRecentTradesAsync","receiveTradeHistory","start","toISOString","slice","getTradeHistoryAsync","reverse","appendTradeHistory","length","Date","parse","getTime","getTickerAsync","state3","receiveTicker","console","error","steemApiError","message","set_user_action","username","getOpenOrdersAsync","receiveOpenOrders","getAccount","reload_action"],"mappings":"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","file":"MarketSaga.js","sourcesContent":["import { call, put, takeLatest } from 'redux-saga/effects';\nimport { api } from '@steemit/steem-js';\n\nimport * as marketActions from './MarketReducer';\nimport * as appActions from './AppReducer';\nimport * as userActions from './UserReducer';\nimport { getAccount } from './SagaShared';\n\nexport const marketWatches = [\n    takeLatest(userActions.SET_USER, fetchOpenOrders),\n    takeLatest('@@router/LOCATION_CHANGE', fetchMarket),\n    takeLatest(marketActions.UPDATE_MARKET, reloadMarket),\n];\n\nconst wait = ms =>\n    new Promise(resolve => {\n        setTimeout(() => resolve(), ms);\n    });\n\nlet polling = false;\nlet active_user = null;\nlet last_trade = null;\n\nexport function* fetchMarket(location_change_action) {\n    const { pathname } = location_change_action.payload;\n    if (pathname && pathname != '/market') {\n        polling = false;\n        return;\n    }\n\n    if (polling == true) return;\n    polling = true;\n\n    while (polling) {\n        try {\n            const state = yield call([api, api.getOrderBookAsync], 500);\n            yield put(marketActions.receiveOrderbook(state));\n\n            let trades;\n            if (last_trade == null) {\n                trades = yield call([api, api.getRecentTradesAsync], 25);\n                yield put(marketActions.receiveTradeHistory(trades));\n            } else {\n                let start = last_trade.toISOString().slice(0, -5);\n                trades = yield call(\n                    [api, api.getTradeHistoryAsync],\n                    start,\n                    '1969-12-31T23:59:59',\n                    1000\n                );\n                trades = trades.reverse();\n                yield put(marketActions.appendTradeHistory(trades));\n            }\n            if (trades.length > 0) {\n                last_trade = new Date(\n                    new Date(Date.parse(trades[0]['date'])).getTime() + 1000\n                );\n            }\n\n            const state3 = yield call([api, api.getTickerAsync]);\n            yield put(marketActions.receiveTicker(state3));\n        } catch (error) {\n            console.error('~~ Saga fetchMarket error ~~>', error);\n            yield put(appActions.steemApiError(error.message));\n        }\n\n        yield call(wait, 3000);\n    }\n}\n\nexport function* fetchOpenOrders(set_user_action) {\n    const { username } = set_user_action.payload;\n\n    try {\n        const state = yield call([api, api.getOpenOrdersAsync], username);\n        yield put(marketActions.receiveOpenOrders(state));\n        yield call(getAccount, username, true);\n    } catch (error) {\n        console.error('~~ Saga fetchOpenOrders error ~~>', error);\n        yield put(appActions.steemApiError(error.message));\n    }\n}\n\nexport function* reloadMarket(reload_action) {\n    yield fetchMarket(reload_action);\n    yield fetchOpenOrders(reload_action);\n}\n"]}