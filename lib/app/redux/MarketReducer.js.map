{"version":3,"sources":["../../../src/app/redux/MarketReducer.js"],"names":["reducer","RECEIVE_ORDERBOOK","RECEIVE_TICKER","RECEIVE_OPEN_ORDERS","RECEIVE_TRADE_HISTORY","APPEND_TRADE_HISTORY","TOGGLE_OPEN_ORDERS_SORT","UPDATE_MARKET","defaultState","status","open_orders_sort","column","dataType","dir","state","action","payload","type","set","get","toJS","getValue","v","parseFloat","open_orders","map","o","sell_price","base","indexOf","LIQUID_TICKER","sbd","quote","steem","price","sort","toggledColumn","toggledDataType","toggledDir","toggledGetValue","sortedState","receiveOrderbook","receiveTicker","receiveOpenOrders","receiveTradeHistory","appendTradeHistory","updateMarket","toggleOpenOrdersSort"],"mappings":"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","file":"MarketReducer.js","sourcesContent":["import { Map } from 'immutable';\n\nimport { createOrderSorter } from 'app/utils/MarketUtils';\nimport { LIQUID_TICKER } from 'app/client_config';\n\n// Action constants\nconst RECEIVE_ORDERBOOK = 'market/RECEIVE_ORDERBOOK';\nconst RECEIVE_TICKER = 'market/RECEIVE_TICKER';\nconst RECEIVE_OPEN_ORDERS = 'market/RECEIVE_OPEN_ORDERS';\nconst RECEIVE_TRADE_HISTORY = 'market/RECEIVE_TRADE_HISTORY';\nconst APPEND_TRADE_HISTORY = 'market/APPEND_TRADE_HISTORY';\nconst TOGGLE_OPEN_ORDERS_SORT = 'market/TOGGLE_OPEN_ORDERS_SORT';\n// Saga-related\nexport const UPDATE_MARKET = 'market/UPDATE_MARKET';\n\nconst defaultState = Map({\n    status: {},\n    open_orders_sort: Map({\n        column: 'created',\n        dataType: 'string',\n        dir: 1,\n    }),\n});\n\nexport default function reducer(state = defaultState, action = {}) {\n    const payload =\n        typeof action.payload !== 'undefined' ? action.payload : null;\n\n    switch (action.type) {\n        case RECEIVE_ORDERBOOK:\n            return state.set('orderbook', payload);\n\n        case RECEIVE_TICKER:\n            return state.set('ticker', payload);\n\n        case RECEIVE_OPEN_ORDERS:\n            // Store normalized data right in redux, and apply current sort.\n            const { dir, column, dataType } = state\n                .get('open_orders_sort')\n                .toJS();\n            const getValue = dataType === 'string' ? v => v : parseFloat;\n\n            const open_orders = action.payload\n                .map(o => {\n                    const type =\n                        o.sell_price.base.indexOf(LIQUID_TICKER) > 0\n                            ? 'ask'\n                            : 'bid';\n                    const sbd =\n                        type == 'bid' ? o.sell_price.base : o.sell_price.quote;\n                    const steem =\n                        type == 'ask' ? o.sell_price.base : o.sell_price.quote;\n                    return {\n                        ...o,\n                        type: type,\n                        price: parseFloat(sbd) / parseFloat(steem),\n                        steem,\n                        sbd,\n                    };\n                })\n                .sort(createOrderSorter(getValue, column, dir));\n\n            return state.set('open_orders', open_orders);\n\n        case RECEIVE_TRADE_HISTORY:\n            return state.set('history', payload);\n\n        case APPEND_TRADE_HISTORY:\n            return state.set('history', [...payload, ...state.get('history')]);\n\n        case TOGGLE_OPEN_ORDERS_SORT:\n            const toggledColumn = action.payload.column || 'created';\n            const toggledDataType = action.payload.dataType || 'float';\n\n            const toggledDir = -state.get('open_orders_sort').get('dir');\n\n            const toggledGetValue =\n                toggledDataType === 'string' ? v => v : parseFloat;\n\n            const sortedState = state.set(\n                'open_orders',\n                state\n                    .get('open_orders')\n                    .sort(\n                        createOrderSorter(\n                            toggledGetValue,\n                            toggledColumn,\n                            toggledDir\n                        )\n                    )\n            );\n\n            return sortedState.set(\n                'open_orders_sort',\n                Map({\n                    column: toggledColumn,\n                    dataType: toggledDir,\n                    dir: toggledDir,\n                })\n            );\n\n        default:\n            return state;\n    }\n}\n\n// Action creators\nexport const receiveOrderbook = payload => ({\n    type: RECEIVE_ORDERBOOK,\n    payload,\n});\n\nexport const receiveTicker = payload => ({\n    type: RECEIVE_TICKER,\n    payload,\n});\n\nexport const receiveOpenOrders = payload => ({\n    type: RECEIVE_OPEN_ORDERS,\n    payload,\n});\n\nexport const receiveTradeHistory = payload => ({\n    type: RECEIVE_TRADE_HISTORY,\n    payload,\n});\n\nexport const appendTradeHistory = payload => ({\n    type: APPEND_TRADE_HISTORY,\n    payload,\n});\n\nexport const updateMarket = payload => ({\n    type: UPDATE_MARKET,\n    payload,\n});\n\nexport const toggleOpenOrdersSort = payload => ({\n    type: TOGGLE_OPEN_ORDERS_SORT,\n    payload,\n});\n"]}