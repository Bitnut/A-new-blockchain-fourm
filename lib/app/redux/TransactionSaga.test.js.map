{"version":3,"sources":["../../../src/app/redux/TransactionSaga.test.js"],"names":["transactionActions","adapter","Adapter","operation","type","author","body","category","json_metadata","tags","app","format","parent_author","parent_permlink","title","__config","errorCallback","successCallback","memo","username","describe","gen","transactionWatches","it","expect","toEqual","BROADCAST_OPERATION","broadcastOperation","UPDATE_AUTHORITIES","updateAuthorities","UPDATE_META","updateMeta","RECOVER_ACCOUNT","recoverAccount","payload","account_to_recover","old_password","new_password","onError","onSuccess","actual","next","id","name","value","mockCall","api","getAccountsAsync","broadcast","sendAsync","extensions","operations","new_owner_authority","recent_owner_authority","account","active","weight_threshold","account_auths","key_auths","posting","memo_key","noAutoVests","clone","getWithdrawRoutes","done","toBe","withAutoVests","from_account","to_account","setWithdrawVestingRoute","undefined","testString","operationSansMemo","arg","genR","expected","state","user","getIn","getContentAsync","permlink","indexOf","gen2","Buffer","trim","originalBod","originalBody","from"],"mappings":"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","file":"TransactionSaga.test.js","sourcesContent":["/* global describe, it, before, beforeEach, after, afterEach */\n\nimport { call, select, all, takeEvery } from 'redux-saga/effects';\nimport steem, { api, broadcast } from '@steemit/steem-js';\nimport { cloneableGenerator } from 'redux-saga/utils';\nimport * as transactionActions from 'app/redux/TransactionReducer';\nimport {\n    preBroadcast_comment,\n    createPermlink,\n    createPatch,\n    recoverAccount,\n    preBroadcast_transfer,\n    transactionWatches,\n    broadcastOperation,\n    updateAuthorities,\n    updateMeta,\n} from './TransactionSaga';\nimport { DEBT_TICKER } from 'app/client_config';\n\nimport { configure, shallow } from 'enzyme';\nimport Adapter from 'enzyme-adapter-react-15';\n\nconfigure({ adapter: new Adapter() });\n\nconst operation = {\n    type: 'comment',\n    author: 'Alice',\n    body:\n        \"The Body is a pretty long chunck of text that represents the user's voice, it seems they have much to say, and this is one place where they can do that.\",\n    category: 'hi',\n    json_metadata: {\n        tags: ['hi'],\n        app: 'steemit/0.1',\n        format: 'markdown',\n    },\n    parent_author: 'candide',\n    parent_permlink: 'cool',\n    title: 'test',\n    __config: {},\n    errorCallback: () => '',\n    successCallback: () => '',\n    memo: '#testing',\n};\n\nconst username = 'Beatrice';\n\ndescribe('TransactionSaga', () => {\n    describe('watch user actions and trigger appropriate saga', () => {\n        const gen = transactionWatches;\n        it('should call the broadcastOperation saga with every transactionActions.BROADCAST_OPERATION action', () => {\n            expect(gen).toEqual([\n                takeEvery(\n                    transactionActions.BROADCAST_OPERATION,\n                    broadcastOperation\n                ),\n                takeEvery(\n                    transactionActions.UPDATE_AUTHORITIES,\n                    updateAuthorities\n                ),\n                takeEvery(transactionActions.UPDATE_META, updateMeta),\n                takeEvery(transactionActions.RECOVER_ACCOUNT, recoverAccount),\n            ]);\n        });\n    });\n\n    describe('recoverAccount', () => {\n        const gen = cloneableGenerator(recoverAccount)({\n            payload: {\n                account_to_recover: 'one',\n                old_password: 'two34567',\n                new_password: 'two34567',\n                onError: () => 'error!',\n                onSuccess: () => 'success!',\n            },\n        });\n        it('should call getAccountsAsync with account_to_recover username as argument', () => {\n            const actual = gen.next([{ id: 123, name: 'one' }]).value;\n            const mockCall = call([api, api.getAccountsAsync], ['one']);\n            expect(actual).toEqual(mockCall);\n        });\n        it('should call sendAsync with recover_account operation', () => {\n            const actual = gen.next([{ id: 123, name: 'one' }]).value;\n            const mockCall = broadcast.sendAsync(\n                {\n                    extensions: [],\n                    operations: [\n                        [\n                            'recover_account',\n                            {\n                                account_to_recover: 'one',\n                                new_owner_authority: 'idk',\n                                recent_owner_authority: 'something',\n                            },\n                        ],\n                    ],\n                },\n                ['123', '345']\n            );\n            expect(actual).toEqual(mockCall);\n        });\n        it('should call sendAsync with account_update operation', () => {\n            const actual = gen.next().value;\n            const mockCall = broadcast.sendAsync(\n                {\n                    extensions: [],\n                    operations: [\n                        [\n                            'account_update',\n                            {\n                                account_to_recover: 'one',\n                                new_owner_authority: 'idk',\n                                recent_owner_authority: 'something',\n\n                                account: 'one',\n                                active: {\n                                    weight_threshold: 1,\n                                    account_auths: [],\n                                    key_auths: [['newactive', 1]],\n                                },\n                                posting: {\n                                    weight_threshold: 1,\n                                    account_auths: [],\n                                    key_auths: [['newposting', 1]],\n                                },\n                                memo_key: 'newmemo',\n                            },\n                        ],\n                    ],\n                },\n                ['newownerprivate']\n            );\n            expect(actual).toEqual(mockCall);\n        });\n        it('should call getWithdrawRoutes with account name and outgoing as parameters', () => {\n            const noAutoVests = gen.clone();\n            const actual = noAutoVests.next().value;\n            const mockCall = call(\n                [api, api.getWithdrawRoutes],\n                ['one', 'outgoing']\n            );\n            expect(actual).toEqual(mockCall);\n            const done = noAutoVests.next().done;\n            expect(done).toBe(true);\n        });\n        it('should call getWithdrawRoutes with account name and outgoing as parameters, and be done if none are found', () => {\n            const noAutoVests = gen.clone();\n            const actual = noAutoVests.next().value;\n            const mockCall = call(\n                [api, api.getWithdrawRoutes],\n                ['one', 'outgoing']\n            );\n            expect(actual).toEqual(mockCall);\n            const done = noAutoVests.next().done;\n            expect(done).toBe(true);\n        });\n        it('should call getWithdrawRoutes with account name and outgoing as parameters, and reset all outgoing auto vesting routes to 0.', () => {\n            const withAutoVests = gen.clone();\n            withAutoVests.next([{ from_account: 'one', to_account: 'two' }])\n                .value;\n            const actual = withAutoVests.next([\n                { from_account: 'one', to_account: 'two' },\n            ]).value;\n            const mockCall = all([\n                call(\n                    [broadcast, broadcast.setWithdrawVestingRoute],\n                    [\n                        'STM7UbRctdfcdBU6rMBEX5yPjWaR68xmq6buCkotR7RVEJHYWt1Jb',\n                        'one',\n                        'two',\n                        0,\n                        true,\n                    ]\n                ),\n            ]);\n            expect(actual).toEqual(mockCall);\n        });\n    });\n\n    describe('createPatch', () => {\n        it('should return undefined if empty arguments are passed', () => {\n            const actual = createPatch('', '');\n            expect(actual).toEqual(undefined);\n        });\n        it('should return the patch that reconciles two different strings', () => {\n            const testString =\n                'there is something interesting going on here that I do not fully understand it is seemingly complex but it is actually quite simple';\n            const actual = createPatch(testString, testString + 'ILU');\n            expect(actual).toEqual(\n                '@@ -120,12 +120,15 @@\\n quite simple\\n+ILU\\n'\n            );\n        });\n    });\n\n    describe('preBroadcast_transfer', () => {\n        const operationSansMemo = {\n            ...operation,\n            memo: undefined,\n        };\n        const arg = { operation: operationSansMemo };\n        it('should return select object if it has a memo attribute with string value starting with #', () => {\n            const genR = preBroadcast_transfer({ operation });\n            const actual = genR.next().value;\n            const expected = select(state =>\n                state.user.getIn(['current', 'private_keys', 'memo_private'])\n            );\n            expect(Object.keys(actual)).toEqual(['@@redux-saga/IO', 'SELECT']);\n        });\n        it('should return the operation unchanged if it has no memo attribute', () => {\n            let gen = preBroadcast_transfer(arg);\n            const actual = gen.next().value;\n            expect(actual).toEqual(operationSansMemo);\n        });\n    });\n\n    describe('createPermlink', () => {\n        const gen = createPermlink(\n            operation.title,\n            operation.author,\n            operation.parent_author,\n            operation.parent_permlink\n        );\n        it('should call the api to get a permlink if the title is valid', () => {\n            const actual = gen.next().value;\n            const mockCall = call(\n                [api, api.getContentAsync],\n                operation.author,\n                operation.title\n            );\n            expect(actual).toEqual(mockCall);\n        });\n        it('should return a string containing the transformed data from the api', () => {\n            const permlink = gen.next({ body: 'test' }).value;\n            expect(permlink.indexOf('test') > -1).toEqual(true); // TODO: cannot deep equal due to date stamp at runtime.\n        });\n        it('should generate own permlink, independent of api if title is empty', () => {\n            const gen2 = createPermlink(\n                '',\n                operation.author,\n                operation.parent_author,\n                operation.parent_permlink\n            );\n            const actual = gen2.next().value;\n            expect(\n                actual.indexOf(\n                    `re-${operation.parent_author}-${\n                        operation.parent_permlink\n                    }-`\n                ) > -1\n            ).toEqual(true); // TODO: cannot deep equal due to random hash at runtime.\n        });\n    });\n\n    describe('preBroadcast_comment', () => {\n        let gen = preBroadcast_comment({ operation, username });\n\n        it('should call createPermlink', () => {\n            const permlink = gen.next(\n                operation.title,\n                operation.author,\n                operation.parent_author,\n                operation.parent_permlink\n            ).value;\n            const actual = permlink.next().value;\n            const expected = call(\n                [api, api.getContentAsync],\n                operation.author,\n                operation.title\n            );\n            expect(expected).toEqual(actual);\n        });\n        it('should return the comment options array.', () => {\n            let actual = gen.next('mock-permlink-123').value;\n            const expected = [\n                [\n                    'comment',\n                    {\n                        author: operation.author,\n                        category: operation.category,\n                        errorCallback: operation.errorCallback,\n                        successCallback: operation.successCallback,\n                        parent_author: operation.parent_author,\n                        parent_permlink: operation.parent_permlink,\n                        type: operation.type,\n                        __config: operation.__config,\n                        memo: operation.memo,\n                        permlink: 'mock-permlink-123',\n                        json_metadata: JSON.stringify(operation.json_metadata),\n                        title: new Buffer(\n                            (operation.title || '').trim(),\n                            'utf-8'\n                        ),\n                        body: new Buffer(operation.body, 'utf-8'), // TODO: new Buffer is deprecated, prefer Buffer.from()\n                    },\n                ],\n            ];\n            expect(actual).toEqual(expected);\n        });\n        it('should return a patch as body value if patch is smaller than body.', () => {\n            const originalBod = operation.body + 'minor difference';\n            operation.__config.originalBody = originalBod;\n            gen = preBroadcast_comment({ operation, username });\n            gen.next(\n                operation.title,\n                operation.author,\n                operation.parent_author,\n                operation.parent_permlink\n            );\n            const actual = gen.next('mock-permlink-123').value;\n            const expected = Buffer.from(\n                createPatch(originalBod, operation.body),\n                'utf-8'\n            );\n            expect(actual[0][1].body).toEqual(expected);\n        });\n        it('should return body as body value if patch is larger than body.', () => {\n            const originalBod = 'major difference';\n            operation.__config.originalBody = originalBod;\n            gen = preBroadcast_comment({ operation, username });\n            gen.next(\n                operation.title,\n                operation.author,\n                operation.parent_author,\n                operation.parent_permlink\n            );\n            const actual = gen.next('mock-permlink-123').value;\n            const expected = Buffer.from(operation.body, 'utf-8');\n            expect(actual[0][1].body).toEqual(expected, 'utf-8');\n        });\n    });\n});\n"]}