{"version":3,"sources":["../../../src/app/redux/FetchDataSaga.test.js"],"names":["appActions","globalActions","describe","payload","order","author","permlink","accountname","postFilter","value","action","category","constants","FETCH_DATA_BATCH_SIZE","gen","it","actual","next","expect","toEqual","fetchingData","fetchDataBegin","api","getDiscussionsByBlogAsync","tag","limit","start_author","start_permlink","receiveData","data","firstPermlink","fetching","endOfData","fetchDataEnd","MAX_BATCHES"],"mappings":"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","file":"FetchDataSaga.test.js","sourcesContent":["import { call, put } from 'redux-saga/effects';\nimport { api } from '@steemit/steem-js';\nimport * as appActions from './AppReducer';\nimport * as globalActions from './GlobalReducer';\nimport constants from './constants';\n\nimport { fetchData } from './FetchDataSaga';\n\ndescribe('FetchDataSaga', () => {\n    describe('should fetch multiple and filter', () => {\n        let payload = {\n            order: 'by_author',\n            author: 'alice',\n            permlink: 'hair',\n            accountname: 'bob',\n            postFilter: value => value.author === 'bob',\n        };\n        let action = {\n            category: '',\n            payload,\n        };\n        constants.FETCH_DATA_BATCH_SIZE = 2;\n        const gen = fetchData(action);\n        it('should signal data fetch', () => {\n            const actual = gen.next().value;\n            expect(actual).toEqual(\n                put(\n                    globalActions.fetchingData({\n                        order: 'by_author',\n                        category: '',\n                    })\n                )\n            );\n        });\n        it('should call discussions by blog', () => {\n            let actual = gen.next().value;\n            expect(actual).toEqual(put(appActions.fetchDataBegin()));\n\n            actual = gen.next().value;\n            expect(actual).toEqual(\n                call([api, api.getDiscussionsByBlogAsync], {\n                    tag: payload.accountname,\n                    limit: constants.FETCH_DATA_BATCH_SIZE,\n                    start_author: payload.author,\n                    start_permlink: payload.permlink,\n                })\n            );\n        });\n        it('should continue fetching data filtering 1 out', () => {\n            let actual = gen.next([\n                {\n                    author: 'alice',\n                },\n                {\n                    author: 'bob',\n                    permlink: 'post1',\n                },\n            ]).value;\n            expect(actual).toEqual(\n                put(\n                    globalActions.receiveData({\n                        data: [\n                            { author: 'alice' },\n                            { author: 'bob', permlink: 'post1' },\n                        ],\n                        order: 'by_author',\n                        category: '',\n                        author: 'alice',\n                        firstPermlink: payload.permlink,\n                        accountname: 'bob',\n                        fetching: true,\n                        endOfData: false,\n                    })\n                )\n            );\n        });\n        it('should finish fetching data filtering 1 out', () => {\n            let actual = gen.next().value;\n            expect(actual).toEqual(\n                call([api, api.getDiscussionsByBlogAsync], {\n                    tag: payload.accountname,\n                    limit: constants.FETCH_DATA_BATCH_SIZE,\n                    start_author: 'bob',\n                    start_permlink: 'post1',\n                })\n            );\n\n            actual = gen.next([\n                {\n                    author: 'bob',\n                    permlink: 'post2',\n                },\n            ]).value;\n            expect(actual).toEqual(\n                put(\n                    globalActions.receiveData({\n                        data: [{ author: 'bob', permlink: 'post2' }],\n                        order: 'by_author',\n                        category: '',\n                        author: 'alice',\n                        firstPermlink: payload.permlink,\n                        accountname: 'bob',\n                        fetching: false,\n                        endOfData: true,\n                    })\n                )\n            );\n\n            actual = gen.next().value;\n            expect(actual).toEqual(put(appActions.fetchDataEnd()));\n        });\n    });\n    describe('should not fetch more batches than max batch size', () => {\n        let payload = {\n            order: 'by_author',\n            author: 'alice',\n            permlink: 'hair',\n            accountname: 'bob',\n            postFilter: value => value.author === 'bob',\n        };\n        let action = {\n            category: '',\n            payload,\n        };\n        constants.FETCH_DATA_BATCH_SIZE = 2;\n        constants.MAX_BATCHES = 2;\n        const gen = fetchData(action);\n\n        let actual = gen.next().value;\n        expect(actual).toEqual(\n            put(\n                globalActions.fetchingData({\n                    order: 'by_author',\n                    category: '',\n                })\n            )\n        );\n\n        actual = gen.next().value;\n        expect(actual).toEqual(put(appActions.fetchDataBegin()));\n\n        actual = gen.next().value;\n        expect(actual).toEqual(\n            call([api, api.getDiscussionsByBlogAsync], {\n                tag: payload.accountname,\n                limit: constants.FETCH_DATA_BATCH_SIZE,\n                start_author: payload.author,\n                start_permlink: payload.permlink,\n            })\n        );\n\n        // these all will not satisfy the filter\n        actual = gen.next([\n            {\n                author: 'alice',\n            },\n            {\n                author: 'alice',\n            },\n        ]).value;\n        expect(actual).toEqual(\n            put(\n                globalActions.receiveData({\n                    data: [{ author: 'alice' }, { author: 'alice' }],\n                    order: 'by_author',\n                    category: '',\n                    author: 'alice',\n                    firstPermlink: payload.permlink,\n                    accountname: 'bob',\n                    fetching: true,\n                    endOfData: false,\n                })\n            )\n        );\n\n        actual = gen.next().value;\n        expect(actual).toEqual(\n            call([api, api.getDiscussionsByBlogAsync], {\n                tag: payload.accountname,\n                limit: constants.FETCH_DATA_BATCH_SIZE,\n                start_author: 'alice',\n            })\n        );\n\n        actual = gen.next([\n            {\n                author: 'alice',\n            },\n            {\n                author: 'alice',\n            },\n        ]).value;\n        expect(actual).toEqual(\n            put(\n                globalActions.receiveData({\n                    data: [{ author: 'alice' }, { author: 'alice' }],\n                    order: 'by_author',\n                    category: '',\n                    author: 'alice',\n                    firstPermlink: payload.permlink,\n                    accountname: 'bob',\n                    fetching: false,\n                    endOfData: false,\n                })\n            )\n        );\n\n        actual = gen.next().value;\n        expect(actual).toEqual(put(appActions.fetchDataEnd()));\n    });\n});\n"]}