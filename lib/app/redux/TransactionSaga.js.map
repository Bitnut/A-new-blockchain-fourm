{"version":3,"sources":["../../../src/app/redux/TransactionSaga.js"],"names":["preBroadcast_transfer","broadcastOperation","preBroadcast_comment","createPermlink","createPatch","recoverAccount","updateAuthorities","updateMeta","appActions","globalActions","transactionActions","userActions","preBroadcast_vote","preBroadcast_account_witness_vote","error_account_witness_vote","broadcastPayload","accepted_comment","accepted_custom_json","accepted_delete_comment","accepted_vote","accepted_account_witness_vote","accepted_withdraw_vesting","accepted_account_update","error_custom_json","error_vote","transactionWatches","BROADCAST_OPERATION","UPDATE_AUTHORITIES","UPDATE_META","RECOVER_ACCOUNT","hook","operation","memoStr","memo","toStringUtf8","trim","test","state","user","getIn","memo_private","Error","getAccount","to","account","memo_key","get","encode","o","Buffer","isBuffer","toString","username","voter","author","permlink","weight","set","key","value","voted","witness","approve","addActiveWitnessVote","updateAccountWitnessVote","payload","type","confirm","warning","keys","password","successCallback","errorCallback","allowPostUnsafe","operationParam","conf","confirmOperation","operations","hasPrivateKeys","checkbox","length","findSigningKey","opType","signingKey","push","showLogin","saveLogin","eventType","replace","g","toUpperCase","parent_author","page","console","error","blob","m","re","exec","PrivateKey","fromWif","e","$STM_Config","read_only_mode","remove","newOps","op","Array","isArray","broadcastedEvent","resolve","reject","env","process","bump","BROWSER","parseInt","localStorage","getItem","log","setTimeout","broadcast","send","extensions","err","config","__config","successMessage","addNotification","Date","now","message","dismissAfter","getContent","linkReply","updateFollowState","action","following","update","r","delete","add","size","json","JSON","parse","id","follower","what","notSet","updater","deleteContent","removeActiveWitnessVote","api","getAccountsAsync","receiveAccount","originalBody","comment_options","parent_permlink","category","title","body","body2","patch","md","json_metadata","toLowerCase","comment_op","max_accepted_payout","DEBT_TICKER","join","percent_steem_dollars","allow_votes","allow_curation_rewards","s","slug","base58","secureRandom","randomBuffer","getContentAsync","slugState","prefix","timeStr","toISOString","substring","dmp","diff_match_patch","text1","text2","undefined","patches","patch_make","patch_toText","required_posting_auths","text","truncate","pwPubkey","name","pw","role","auth","wifToPublic","toWif","account_to_recover","old_password","new_password","onError","onSuccess","isWif","isPubkey","oldOwnerPrivate","oldOwner","newOwnerPrivate","newOwner","newActive","newPosting","newMemo","new_owner_authority","weight_threshold","account_auths","key_auths","recent_owner_authority","sendAsync","active","posting","getWithdrawRoutes","outgoingAutoVestingRoutes","map","setWithdrawVestingRoute","ovr","from_account","to_account","accountName","auths","twofa","ops2","oldPrivate","addAuth","authType","oldAuth","newAuth","oldAuthPubkey","oldPrivateAuth","toPublic","PublicKey","fromStringOrThrow","e2","fromSeed","toPublicKey","newPrivate","newAuthPubkey","authority","toJS","priv","pubkey","i","params","meta","account_name","json_meta"],"mappings":"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","file":"TransactionSaga.js","sourcesContent":["import { call, put, select, all, takeEvery } from 'redux-saga/effects';\nimport { fromJS, Set, Map } from 'immutable';\nimport tt from 'counterpart';\nimport getSlug from 'speakingurl';\nimport base58 from 'bs58';\nimport secureRandom from 'secure-random';\nimport { PrivateKey, PublicKey } from '@steemit/steem-js/lib/auth/ecc';\nimport { api, broadcast, auth, memo } from '@steemit/steem-js';\n\nimport { getAccount, getContent } from 'app/redux/SagaShared';\nimport { findSigningKey } from 'app/redux/AuthSaga';\nimport * as appActions from 'app/redux/AppReducer';\nimport * as globalActions from 'app/redux/GlobalReducer';\nimport * as transactionActions from 'app/redux/TransactionReducer';\nimport * as userActions from 'app/redux/UserReducer';\nimport { DEBT_TICKER } from 'app/client_config';\nimport { serverApiRecordEvent } from 'app/utils/ServerApiClient';\n\nexport const transactionWatches = [\n    takeEvery(transactionActions.BROADCAST_OPERATION, broadcastOperation),\n    takeEvery(transactionActions.UPDATE_AUTHORITIES, updateAuthorities),\n    takeEvery(transactionActions.UPDATE_META, updateMeta),\n    takeEvery(transactionActions.RECOVER_ACCOUNT, recoverAccount),\n];\n\nconst hook = {\n    preBroadcast_comment,\n    preBroadcast_transfer,\n    preBroadcast_vote,\n    preBroadcast_account_witness_vote,\n    error_vote,\n    error_custom_json,\n    // error_account_update,\n    error_account_witness_vote,\n    accepted_comment,\n    accepted_custom_json,\n    accepted_delete_comment,\n    accepted_account_witness_vote,\n    accepted_vote,\n    accepted_account_update,\n    accepted_withdraw_vesting,\n};\n\nexport function* preBroadcast_transfer({ operation }) {\n    let memoStr = operation.memo;\n    if (memoStr) {\n        memoStr = toStringUtf8(memoStr);\n        memoStr = memoStr.trim();\n        if (/^#/.test(memoStr)) {\n            const memo_private = yield select(state =>\n                state.user.getIn(['current', 'private_keys', 'memo_private'])\n            );\n            if (!memo_private)\n                throw new Error(\n                    'Unable to encrypt memo, missing memo private key'\n                );\n            const account = yield call(getAccount, operation.to);\n            if (!account) throw new Error(`Unknown to account ${operation.to}`);\n            const memo_key = account.get('memo_key');\n            memoStr = memo.encode(memo_private, memo_key, memoStr);\n            operation.memo = memoStr;\n        }\n    }\n    return operation;\n}\nconst toStringUtf8 = o =>\n    o ? (Buffer.isBuffer(o) ? o.toString('utf-8') : o.toString()) : o;\n\nfunction* preBroadcast_vote({ operation, username }) {\n    if (!operation.voter) operation.voter = username;\n    const { voter, author, permlink, weight } = operation;\n    // give immediate feedback\n    yield put(\n        globalActions.set({\n            key: `transaction_vote_active_${author}_${permlink}`,\n            value: true,\n        })\n    );\n    yield put(\n        globalActions.voted({ username: voter, author, permlink, weight })\n    );\n    return operation;\n}\nfunction* preBroadcast_account_witness_vote({ operation, username }) {\n    if (!operation.account) operation.account = username;\n    const { account, witness, approve } = operation;\n    // give immediate feedback\n    yield put(\n        globalActions.addActiveWitnessVote({\n            account,\n            witness,\n        })\n    );\n    return operation;\n}\n\nfunction* error_account_witness_vote({\n    operation: { account, witness, approve },\n}) {\n    yield put(\n        globalActions.updateAccountWitnessVote({\n            account,\n            witness,\n            approve: !approve,\n        })\n    );\n}\n\n/** Keys, username, and password are not needed for the initial call.  This will check the login and may trigger an action to prompt for the password / key. */\nexport function* broadcastOperation({\n    payload: {\n        type,\n        operation,\n        confirm,\n        warning,\n        keys,\n        username,\n        password,\n        successCallback,\n        errorCallback,\n        allowPostUnsafe,\n    },\n}) {\n    const operationParam = {\n        type,\n        operation,\n        keys,\n        username,\n        password,\n        successCallback,\n        errorCallback,\n        allowPostUnsafe,\n    };\n\n    const conf = typeof confirm === 'function' ? confirm() : confirm;\n    if (conf) {\n        yield put(\n            transactionActions.confirmOperation({\n                confirm,\n                warning,\n                operation: operationParam,\n                errorCallback,\n            })\n        );\n        return;\n    }\n    const payload = {\n        operations: [[type, operation]],\n        keys,\n        username,\n        successCallback,\n        errorCallback,\n    };\n    if (!allowPostUnsafe && hasPrivateKeys(payload)) {\n        const confirm = tt('g.post_key_warning.confirm');\n        const warning = tt('g.post_key_warning.warning');\n        const checkbox = tt('g.post_key_warning.checkbox');\n        operationParam.allowPostUnsafe = true;\n        yield put(\n            transactionActions.confirmOperation({\n                confirm,\n                warning,\n                checkbox,\n                operation: operationParam,\n                errorCallback,\n            })\n        );\n        return;\n    }\n    try {\n        if (!keys || keys.length === 0) {\n            payload.keys = [];\n            // user may already be logged in, or just enterend a signing passowrd or wif\n            const signingKey = yield call(findSigningKey, {\n                opType: type,\n                username,\n                password,\n            });\n            if (signingKey) payload.keys.push(signingKey);\n            else {\n                if (!password) {\n                    yield put(\n                        userActions.showLogin({\n                            operation: {\n                                type,\n                                operation,\n                                username,\n                                successCallback,\n                                errorCallback,\n                                saveLogin: true,\n                            },\n                        })\n                    );\n                    return;\n                }\n            }\n        }\n        yield call(broadcastPayload, { payload });\n        let eventType = type\n            .replace(/^([a-z])/, g => g.toUpperCase())\n            .replace(/_([a-z])/g, g => g[1].toUpperCase());\n        if (eventType === 'Comment' && !operation.parent_author)\n            eventType = 'Post';\n        const page =\n            eventType === 'Vote'\n                ? `@${operation.author}/${operation.permlink}`\n                : '';\n        serverApiRecordEvent(eventType, page);\n    } catch (error) {\n        console.error('TransactionSage', error);\n        if (errorCallback) errorCallback(error.toString());\n    }\n}\n\nfunction hasPrivateKeys(payload) {\n    const blob = JSON.stringify(payload.operations);\n    let m,\n        re = /P?(5[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{50})/g;\n    while (true) {\n        m = re.exec(blob);\n        if (m) {\n            try {\n                PrivateKey.fromWif(m[1]); // performs the base58check\n                return true;\n            } catch (e) {}\n        } else {\n            break;\n        }\n    }\n    return false;\n}\n\nfunction* broadcastPayload({\n    payload: { operations, keys, username, successCallback, errorCallback },\n}) {\n    // console.log('broadcastPayload')\n    if ($STM_Config.read_only_mode) return;\n    for (const [type] of operations) // see also transaction/ERROR\n        yield put(\n            transactionActions.remove({ key: ['TransactionError', type] })\n        );\n\n    {\n        const newOps = [];\n        for (const [type, operation] of operations) {\n            if (hook['preBroadcast_' + type]) {\n                const op = yield call(hook['preBroadcast_' + type], {\n                    operation,\n                    username,\n                });\n                if (Array.isArray(op)) for (const o of op) newOps.push(o);\n                else newOps.push([type, op]);\n            } else {\n                newOps.push([type, operation]);\n            }\n        }\n        operations = newOps;\n    }\n\n    // status: broadcasting\n    const broadcastedEvent = () => {\n        for (const [type, operation] of operations) {\n            if (hook['broadcasted_' + type]) {\n                try {\n                    hook['broadcasted_' + type]({ operation });\n                } catch (error) {\n                    console.error(error);\n                }\n            }\n        }\n    };\n\n    try {\n        yield new Promise((resolve, reject) => {\n            // Bump transaction (for live UI testing).. Put 0 in now (no effect),\n            // to enable browser's autocomplete and help prevent typos.\n            const env = process.env;\n            const bump = env.BROWSER\n                ? parseInt(localStorage.getItem('bump') || 0)\n                : 0;\n            if (env.BROWSER && bump === 1) {\n                // for testing\n                console.log(\n                    'TransactionSaga bump(no broadcast) and reject',\n                    JSON.stringify(operations, null, 2)\n                );\n                setTimeout(() => {\n                    reject(new Error('Testing, fake error'));\n                }, 2000);\n            } else if (env.BROWSER && bump === 2) {\n                // also for testing\n                console.log(\n                    'TransactionSaga bump(no broadcast) and resolve',\n                    JSON.stringify(operations, null, 2)\n                );\n                setTimeout(() => {\n                    resolve();\n                    broadcastedEvent();\n                }, 2000);\n            } else {\n                broadcast.send({ extensions: [], operations }, keys, err => {\n                    if (err) {\n                        console.error(err);\n                        reject(err);\n                    } else {\n                        broadcastedEvent();\n                        resolve();\n                    }\n                });\n            }\n        });\n        // status: accepted\n        for (const [type, operation] of operations) {\n            if (hook['accepted_' + type]) {\n                try {\n                    yield call(hook['accepted_' + type], { operation });\n                } catch (error) {\n                    console.error(error);\n                }\n            }\n            const config = operation.__config;\n            if (config && config.successMessage) {\n                yield put(\n                    appActions.addNotification({\n                        key: 'trx_' + Date.now(),\n                        message: config.successMessage,\n                        dismissAfter: 5000,\n                    })\n                );\n            }\n        }\n        if (successCallback)\n            try {\n                successCallback();\n            } catch (error) {\n                console.error(error);\n            }\n    } catch (error) {\n        console.error('TransactionSaga\\tbroadcastPayload', error);\n        // status: error\n        yield put(\n            transactionActions.error({ operations, error, errorCallback })\n        );\n        for (const [type, operation] of operations) {\n            if (hook['error_' + type]) {\n                try {\n                    yield call(hook['error_' + type], { operation });\n                } catch (error2) {\n                    console.error(error2);\n                }\n            }\n        }\n    }\n}\n\nfunction* accepted_comment({ operation }) {\n    const { author, permlink } = operation;\n    // update again with new $$ amount from the steemd node\n    yield call(getContent, { author, permlink });\n    // receiveComment did the linking already (but that is commented out)\n    yield put(globalActions.linkReply(operation));\n    // mark the time (can only post 1 per min)\n    // yield put(user.actions.acceptedComment())\n}\n\nfunction updateFollowState(action, following, state) {\n    if (action == null) {\n        state = state.update('blog_result', Set(), r => r.delete(following));\n        state = state.update('ignore_result', Set(), r => r.delete(following));\n    } else if (action === 'blog') {\n        state = state.update('blog_result', Set(), r => r.add(following));\n        state = state.update('ignore_result', Set(), r => r.delete(following));\n    } else if (action === 'ignore') {\n        state = state.update('ignore_result', Set(), r => r.add(following));\n        state = state.update('blog_result', Set(), r => r.delete(following));\n    }\n    state = state.set('blog_count', state.get('blog_result', Set()).size);\n    state = state.set('ignore_count', state.get('ignore_result', Set()).size);\n    return state;\n}\n\nfunction* accepted_custom_json({ operation }) {\n    const json = JSON.parse(operation.json);\n    if (operation.id === 'follow') {\n        console.log(operation);\n        try {\n            if (json[0] === 'follow') {\n                const { follower, following, what: [action] } = json[1];\n                yield put(\n                    globalActions.update({\n                        key: ['follow', 'getFollowingAsync', follower],\n                        notSet: Map(),\n                        updater: m => updateFollowState(action, following, m),\n                    })\n                );\n            }\n        } catch (e) {\n            console.error(\n                'TransactionSaga unrecognized follow custom_json format',\n                operation.json\n            );\n        }\n    }\n    return operation;\n}\n\nfunction* accepted_delete_comment({ operation }) {\n    yield put(globalActions.deleteContent(operation));\n}\n\nfunction* accepted_vote({ operation: { author, permlink, weight } }) {\n    console.log(\n        'Vote accepted, weight',\n        weight,\n        'on',\n        author + '/' + permlink,\n        'weight'\n    );\n    // update again with new $$ amount from the steemd node\n    yield put(\n        globalActions.remove({\n            key: `transaction_vote_active_${author}_${permlink}`,\n        })\n    );\n    yield call(getContent, { author, permlink });\n}\n\nfunction* accepted_account_witness_vote({\n    operation: { account, witness, approve },\n}) {\n    yield put(\n        globalActions.updateAccountWitnessVote({ account, witness, approve })\n    );\n\n    yield put(\n        globalActions.removeActiveWitnessVote({\n            account,\n            witness,\n        })\n    );\n}\n\nfunction* accepted_withdraw_vesting({ operation }) {\n    let [account] = yield call(\n        [api, api.getAccountsAsync],\n        [operation.account]\n    );\n    account = fromJS(account);\n    yield put(globalActions.receiveAccount({ account }));\n}\n\nfunction* accepted_account_update({ operation }) {\n    let [account] = yield call(\n        [api, api.getAccountsAsync],\n        [operation.account]\n    );\n    account = fromJS(account);\n    yield put(globalActions.receiveAccount({ account }));\n\n    // bug, fork, etc.. the folowing would be mis-leading\n    // const {account} = operation\n    // const {owner, active, posting, memo_key, json_metadata} = operation\n    // {\n    //     const update = { accounts: { [account]: {memo_key, json_metadata} } }\n    //     if (posting) update.accounts[account].posting = posting\n    //     if (active) update.accounts[account].active = active\n    //     if (owner) update.accounts[account].owner = owner\n    //     yield put(g.actions.receiveState(update))\n    // }\n}\n\n// TODO remove soon, this was replaced by the UserKeys edit running usernamePasswordLogin (on dialog close)\n// function* error_account_update({operation}) {\n//     const {account} = operation\n//     const stateUser = yield select(state => state.user)\n//     const username = stateUser.getIn(['current', 'username'])\n//     if (username === account) {\n//         const pending_private_key = stateUser.getIn(['current', 'pending_private_key'])\n//         if (pending_private_key) {\n//             // remove pending key\n//             const update = { pending_private_key: undefined }\n//             yield put(user.actions.setUser(update))\n//         }\n//     }\n// }\n\n// function* preBroadcast_account_witness_vote({operation, username}) {\n// }\nexport function* preBroadcast_comment({ operation, username }) {\n    if (!operation.author) operation.author = username;\n    let permlink = operation.permlink;\n    const { author, __config: { originalBody, comment_options } } = operation;\n    const {\n        parent_author = '',\n        parent_permlink = operation.category,\n    } = operation;\n    const { title } = operation;\n    let { body } = operation;\n\n    body = body.trim();\n\n    // TODO Slightly smaller blockchain comments: if body === json_metadata.steem.link && Object.keys(steem).length > 1 remove steem.link ..This requires an adjust of get_state and the API refresh of the comment to put the steem.link back if Object.keys(steem).length >= 1\n\n    let body2;\n    if (originalBody) {\n        const patch = createPatch(originalBody, body);\n        // Putting body into buffer will expand Unicode characters into their true length\n        if (patch && patch.length < new Buffer(body, 'utf-8').length)\n            body2 = patch;\n    }\n    if (!body2) body2 = body;\n    if (!permlink)\n        permlink = yield createPermlink(\n            title,\n            author,\n            parent_author,\n            parent_permlink\n        );\n\n    const md = operation.json_metadata;\n    const json_metadata = typeof md === 'string' ? md : JSON.stringify(md);\n    const op = {\n        ...operation,\n        permlink: permlink.toLowerCase(),\n        parent_author,\n        parent_permlink,\n        json_metadata,\n        title: new Buffer((operation.title || '').trim(), 'utf-8'),\n        body: new Buffer(body2, 'utf-8'),\n    };\n\n    const comment_op = [['comment', op]];\n\n    // comment_options must come directly after comment\n    if (comment_options) {\n        const {\n            max_accepted_payout = ['1000000.000', DEBT_TICKER].join(' '),\n            percent_steem_dollars = 10000, // 10000 === 100%\n            allow_votes = true,\n            allow_curation_rewards = true,\n        } = comment_options;\n        comment_op.push([\n            'comment_options',\n            {\n                author,\n                permlink,\n                max_accepted_payout,\n                percent_steem_dollars,\n                allow_votes,\n                allow_curation_rewards,\n                extensions: comment_options.extensions\n                    ? comment_options.extensions\n                    : [],\n            },\n        ]);\n    }\n\n    return comment_op;\n}\n\nexport function* createPermlink(title, author, parent_author, parent_permlink) {\n    let permlink;\n    if (title && title.trim() !== '') {\n        let s = slug(title);\n        if (s === '') {\n            s = base58.encode(secureRandom.randomBuffer(4));\n        }\n        // ensure the permlink(slug) is unique\n        const slugState = yield call([api, api.getContentAsync], author, s);\n        let prefix;\n        if (slugState.body !== '') {\n            // make sure slug is unique\n            prefix = base58.encode(secureRandom.randomBuffer(4)) + '-';\n        } else {\n            prefix = '';\n        }\n        permlink = prefix + s;\n    } else {\n        // comments: re-parentauthor-parentpermlink-time\n        const timeStr = new Date().toISOString().replace(/[^a-zA-Z0-9]+/g, '');\n        parent_permlink = parent_permlink.replace(/(-\\d{8}t\\d{9}z)/g, '');\n        permlink = `re-${parent_author}-${parent_permlink}-${timeStr}`;\n    }\n    if (permlink.length > 255) {\n        // STEEMIT_MAX_PERMLINK_LENGTH\n        permlink = permlink.substring(permlink.length - 255, permlink.length);\n    }\n    // only letters numbers and dashes shall survive\n    permlink = permlink.toLowerCase().replace(/[^a-z0-9-]+/g, '');\n    return permlink;\n}\n\nimport diff_match_patch from 'diff-match-patch';\nconst dmp = new diff_match_patch();\n\nexport function createPatch(text1, text2) {\n    if (!text1 && text1 === '') return undefined;\n    const patches = dmp.patch_make(text1, text2);\n    const patch = dmp.patch_toText(patches);\n    return patch;\n}\n\nfunction* error_custom_json({ operation: { id, required_posting_auths } }) {\n    if (id === 'follow') {\n        const follower = required_posting_auths[0];\n        yield put(\n            globalActions.update({\n                key: ['follow', 'getFollowingAsync', follower, 'loading'],\n                updater: () => null,\n            })\n        );\n    }\n}\n\nfunction* error_vote({ operation: { author, permlink } }) {\n    yield put(\n        globalActions.remove({\n            key: `transaction_vote_active_${author}_${permlink}`,\n        })\n    );\n    yield call(getContent, { author, permlink }); // unvote\n}\n\n// function* error_comment({operation}) {\n//     // Rollback an immediate UI update (the transaction had an error)\n//     yield put(g.actions.deleteContent(operation))\n//     const {author, permlink, parent_author, parent_permlink} = operation\n//     yield call(getContent, {author, permlink})\n//     if (parent_author !== '' && parent_permlink !== '') {\n//         yield call(getContent, {parent_author, parent_permlink})\n//     }\n// }\n\nfunction slug(text) {\n    return getSlug(text.replace(/[<>]/g, ''), { truncate: 128 });\n    //const shorten = txt => {\n    //    let t = ''\n    //    let words = 0\n    //    const txt2 = txt.replace(/ +/g, ' ') // only 1 space in a row\n    //    for (let i = 0; i < txt2.length; i++) {\n    //        const ch = txt2.charAt(i)\n    //        if (ch === '.' && i !== 0) {\n    //            if(i === txt2.length - 1)\n    //                break\n    //            // If it looks like the end of a sentence\n    //            if(txt2.charAt(i + 1) === ' ')\n    //                break\n    //        }\n    //        if (ch === ' ' || ch === '\\n') {\n    //            words++\n    //            if (words === 15) break\n    //            if (i > 100) break\n    //        }\n    //        t += ch\n    //    }\n    //    return t\n    //}\n    //return shorten(text)\n    //    .replace(/\\n/g, ' ')\n    //    .replace(/[ \\.]/g, '-')\n    //    .replace(/[^a-zA-Z0-9-_]+/g, '') // only letters and numbers _ and -\n    //    .replace(/--/g, '-')\n    //    .toLowerCase()\n}\n\nconst pwPubkey = (name, pw, role) =>\n    auth.wifToPublic(auth.toWif(name, pw.trim(), role));\n\nexport function* recoverAccount({\n    payload: {\n        account_to_recover,\n        old_password,\n        new_password,\n        onError,\n        onSuccess,\n    },\n}) {\n    const [account] = yield call(\n        [api, api.getAccountsAsync],\n        [account_to_recover]\n    );\n\n    if (!account) {\n        onError('Unknown account ' + account);\n        return;\n    }\n    if (auth.isWif(new_password)) {\n        onError('Your new password should not be a WIF');\n        return;\n    }\n    if (auth.isPubkey(new_password)) {\n        onError('Your new password should not be a Public Key');\n        return;\n    }\n\n    const oldOwnerPrivate = auth.isWif(old_password)\n        ? old_password\n        : auth.toWif(account_to_recover, old_password, 'owner');\n\n    const oldOwner = auth.wifToPublic(oldOwnerPrivate);\n\n    const newOwnerPrivate = auth.toWif(\n        account_to_recover,\n        new_password.trim(),\n        'owner'\n    );\n    const newOwner = auth.wifToPublic(newOwnerPrivate);\n    const newActive = pwPubkey(\n        account_to_recover,\n        new_password.trim(),\n        'active'\n    );\n    const newPosting = pwPubkey(\n        account_to_recover,\n        new_password.trim(),\n        'posting'\n    );\n    const newMemo = pwPubkey(account_to_recover, new_password.trim(), 'memo');\n\n    const new_owner_authority = {\n        weight_threshold: 1,\n        account_auths: [],\n        key_auths: [[newOwner, 1]],\n    };\n\n    const recent_owner_authority = {\n        weight_threshold: 1,\n        account_auths: [],\n        key_auths: [[oldOwner, 1]],\n    };\n\n    try {\n        // TODO: Investigate wrapping in a redux-saga call fn, so it can be tested!.\n        yield broadcast.sendAsync(\n            {\n                extensions: [],\n                operations: [\n                    [\n                        'recover_account',\n                        {\n                            account_to_recover,\n                            new_owner_authority,\n                            recent_owner_authority,\n                        },\n                    ],\n                ],\n            },\n            [oldOwnerPrivate, newOwnerPrivate]\n        );\n\n        // change password\n        // change password probably requires a separate transaction (single trx has not been tested)\n        const { json_metadata } = account;\n        // TODO: Investigate wrapping in a redux-saga call fn, so it can be tested!\n        yield broadcast.sendAsync(\n            {\n                extensions: [],\n                operations: [\n                    [\n                        'account_update',\n                        {\n                            account: account.name,\n                            active: {\n                                weight_threshold: 1,\n                                account_auths: [],\n                                key_auths: [[newActive, 1]],\n                            },\n                            posting: {\n                                weight_threshold: 1,\n                                account_auths: [],\n                                key_auths: [[newPosting, 1]],\n                            },\n                            memo_key: newMemo,\n                            json_metadata,\n                        },\n                    ],\n                ],\n            },\n            [newOwnerPrivate]\n        );\n        // Reset all outgoing auto-vesting routes for this user. Condenser - #2835\n        const outgoingAutoVestingRoutes = yield call(\n            [api, api.getWithdrawRoutes],\n            [account.name, 'outgoing']\n        );\n        if (outgoingAutoVestingRoutes && outgoingAutoVestingRoutes.length > 0) {\n            yield all(\n                outgoingAutoVestingRoutes.map(ovr => {\n                    return call(\n                        [broadcast, broadcast.setWithdrawVestingRoute],\n                        [newActive, ovr.from_account, ovr.to_account, 0, true]\n                    );\n                })\n            );\n        }\n        if (onSuccess) onSuccess();\n    } catch (error) {\n        console.error('Recover account', error);\n        if (onError) onError(error);\n    }\n}\n\n/** auths must start with most powerful key: owner for example */\n// const twofaAccount = 'steem'\nexport function* updateAuthorities({\n    payload: { accountName, signingKey, auths, twofa, onSuccess, onError },\n}) {\n    // Be sure this account is up-to-date (other required fields are sent in the update)\n    const [account] = yield call([api, api.getAccountsAsync], [accountName]);\n    if (!account) {\n        onError('Account not found');\n        return;\n    }\n    // const signingPubkey = signingKey ? signingKey.toPublicKey() : null\n    const ops2 = {};\n    let oldPrivate;\n    const addAuth = (authType, oldAuth, newAuth) => {\n        let oldAuthPubkey, oldPrivateAuth;\n        try {\n            oldPrivateAuth = PrivateKey.fromWif(oldAuth);\n            oldAuthPubkey = oldPrivateAuth.toPublic().toString();\n        } catch (e) {\n            try {\n                oldAuthPubkey = PublicKey.fromStringOrThrow(oldAuth).toString();\n            } catch (e2) {\n                //\n            }\n        }\n        if (!oldAuthPubkey) {\n            if (!oldAuth) {\n                onError('Missing old key, not sure what to replace');\n                console.error('Missing old key, not sure what to replace');\n                return false;\n            }\n            oldPrivateAuth = PrivateKey.fromSeed(\n                accountName + authType + oldAuth\n            );\n            oldAuthPubkey = oldPrivateAuth.toPublicKey().toString();\n        }\n        if (authType === 'owner' && !oldPrivate) oldPrivate = oldPrivateAuth;\n        else if (authType === 'active' && !oldPrivate)\n            oldPrivate = oldPrivateAuth;\n        else if (authType === 'posting' && !oldPrivate)\n            oldPrivate = oldPrivateAuth;\n\n        let newPrivate, newAuthPubkey;\n        try {\n            newPrivate = PrivateKey.fromWif(newAuth);\n            newAuthPubkey = newPrivate.toPublicKey().toString();\n        } catch (e) {\n            newPrivate = PrivateKey.fromSeed(accountName + authType + newAuth);\n            newAuthPubkey = newPrivate.toPublicKey().toString();\n        }\n        // if (oldAuthPubkey === newAuthPubkey) {\n        //     onError('This is the same key')\n        //     return false\n        // }\n        let authority;\n        if (authType === 'memo') {\n            account.memo_key = newAuthPubkey;\n        } else {\n            authority = fromJS(account[authType]).toJS();\n            authority.key_auths = [];\n            authority.key_auths.push([\n                newAuthPubkey,\n                authority.weight_threshold,\n            ]);\n            // const key_auths = authority.key_auths\n            // let found\n            // for (let i = 0; i < key_auths.length; i++) {\n            //     if (key_auths[i][0] === oldAuthPubkey) {\n            //         key_auths[i][0] = newAuthPubkey\n            //         found = true\n            //         break\n            //     }\n            // }\n            // if (!found) {\n            // key_auths.push([newAuthPubkey, authority.weight_threshold])\n            //     console.log(`Could not find an ${authType} key to update, adding instead`)\n            // }\n\n            // Add twofaAccount with full authority\n            // if(twofa && authType === 'owner') {\n            //     let account_auths = fromJS(authority.account_auths)\n            //     if(!account_auths.find(v => v.get(0) === twofaAccount)) {\n            //         account_auths = account_auths.push(fromJS([twofaAccount, authority.weight_threshold]))\n            //     }\n            //     authority.account_auths = account_auths.toJS()\n            // }\n        }\n        ops2[authType] = authority ? authority : account[authType];\n        return true;\n    };\n    for (const auth of auths)\n        if (!addAuth(auth.authType, auth.oldAuth, auth.newAuth)) return;\n\n    let key = oldPrivate;\n    if (!key) {\n        try {\n            key = PrivateKey.fromWif(signingKey);\n        } catch (e2) {\n            // probably updating a memo .. see if we got an active or owner\n            const auth = authType => {\n                const priv = PrivateKey.fromSeed(\n                    accountName + authType + signingKey\n                );\n                const pubkey = priv.toPublicKey().toString();\n                const authority = account[authType];\n                const key_auths = authority.key_auths;\n                for (let i = 0; i < key_auths.length; i++) {\n                    if (key_auths[i][0] === pubkey) {\n                        return priv;\n                    }\n                }\n                return null;\n            };\n            key = auth('active');\n            if (!key) key = auth('owner');\n        }\n    }\n    if (!key) {\n        onError(`Incorrect Password`);\n        throw new Error('Trying to update a memo without a signing key?');\n    }\n    const { memo_key, json_metadata } = account;\n    const payload = {\n        type: 'account_update',\n        operation: {\n            account: account.name,\n            ...ops2,\n            memo_key,\n            json_metadata,\n        },\n        keys: [key],\n        successCallback: onSuccess,\n        errorCallback: onError,\n    };\n    // console.log('sign key.toPublicKey().toString()', key.toPublicKey().toString())\n    // console.log('payload', payload)\n    yield call(broadcastOperation, { payload });\n}\n\n/** auths must start with most powerful key: owner for example */\n// const twofaAccount = 'steem'\nexport function* updateMeta(params) {\n    // console.log('params', params)\n    const {\n        meta,\n        account_name,\n        signingKey,\n        onSuccess,\n        onError,\n    } = params.payload.operation;\n    console.log('meta', meta);\n    console.log('account_name', account_name);\n    // Be sure this account is up-to-date (other required fields are sent in the update)\n    const [account] = yield call([api, api.getAccountsAsync], [account_name]);\n    if (!account) {\n        onError('Account not found');\n        return;\n    }\n    if (!signingKey) {\n        onError(`Incorrect Password`);\n        throw new Error('Have to pass owner key in order to change meta');\n    }\n\n    try {\n        console.log('account.name', account.name);\n        const operations = [\n            'update_account_meta',\n            {\n                account_name: account.name,\n                json_meta: JSON.stringify(meta),\n            },\n        ];\n        yield broadcast.sendAsync({ extensions: [], operations }, [signingKey]);\n        if (onSuccess) onSuccess();\n        // console.log('sign key.toPublicKey().toString()', key.toPublicKey().toString())\n        // console.log('payload', payload)\n    } catch (e) {\n        console.error('Update meta', e);\n        if (onError) onError(e);\n    }\n}\n"]}