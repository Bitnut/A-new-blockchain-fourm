{"version":3,"sources":["../../../src/app/redux/FetchDataSaga.js"],"names":["getContentCaller","fetchState","fetchData","fetchMeta","globalActions","appActions","getTransferUsers","syncPinnedPosts","getAccounts","fetchJson","REQUEST_DATA","GET_CONTENT","FETCH_STATE","fetchDataWatches","action","payload","is_initial_state","location_change_action","pathname","m","match","length","username","fetchFollowCount","loadFollows","state","offchain","get","server_location","ignore_fetch","url","indexOf","replace","fetchDataBegin","getStateAsync","receiveState","console","error","steemApiError","message","fetchDataEnd","global","getIn","transferHistory","transferUsers","reduce","acc","cur","toJS","from","to","add","Set","pinnedPosts","seenPinnedPosts","map","post","set","localStorage","getItem","forEach","setItem","usernames","api","getAccountsAsync","accounts","receiveAccounts","order","author","permlink","accountname","postFilter","category","toLowerCase","fetchingData","call_name","args","tag","limit","constants","FETCH_DATA_BATCH_SIZE","start_author","start_permlink","firstPermlink","fetched","endOfData","fetchLimitReached","fetchDone","batch","call","data","MAX_BATCHES","lastValue","filter","receiveData","fetching","id","link","resolve","reject","reqListener","resp","JSON","parse","responseText","oReq","XMLHttpRequest","addEventListener","open","send","metaArray","title","metaTags","meta","i","name","content","card","site","description","image","alt","receiveMeta","body","successCallback","skipLoading","method","headers","Accept","undefined","fetch","result","json","fetchJsonResult","actions","requestData","type","getContent"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;QA6BiBA,gB,GAAAA,gB;QAKAC,U,GAAAA,U;QAgHAC,S,GAAAA,S;QAqOAC,S,GAAAA,S;;AAvXjB;;AAQA;;AACA;;AACA;;AACA;;IAAYC,a;;AACZ;;IAAYC,U;;AACZ;;;;AACA;;AACA;;;;;;sDAciBL,gB;uDAKAC,U;uDAqDPK,gB;uDAuBAC,e;uDA+BAC,W;uDAKON,S;uDAqOAC,S;uDAiDPM,S;;AAvZV,IAAMC,eAAe,4BAArB;AACA,IAAMC,cAAc,2BAApB;AACA,IAAMC,cAAc,2BAApB;;AAEO,IAAMC,8CAAmB,CAC5B,yBAAWH,YAAX,EAAyBR,SAAzB,CAD4B,EAE5B,wBAAUS,WAAV,EAAuBX,gBAAvB,CAF4B,EAG5B,yBAAW,0BAAX,EAAuCC,UAAvC,CAH4B,EAI5B,yBAAWW,WAAX,EAAwBX,UAAxB,CAJ4B,EAK5B,wBAAU,mBAAV,EAA+BQ,SAA/B,CAL4B,CAAzB;;AAQA,SAAUT,gBAAV,CAA2Bc,MAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BACG,4BAAWA,OAAOC,OAAlB,CADH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIP,IAAIC,mBAAmB,IAAvB;AACO,SAAUf,UAAV,CAAqBgB,sBAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AACKC,4BADL,GACkBD,uBAAuBF,OADzC,CACKG,QADL;AAEGC,qBAFH,GAEOD,SAASE,KAAT,CAAe,oBAAf,CAFP;;AAAA,0BAGCD,KAAKA,EAAEE,MAAF,KAAa,CAHnB;AAAA;AAAA;AAAA;;AAIOC,4BAJP,GAIkBH,EAAE,CAAF,CAJlB;AAAA;AAAA,2BAKO,mBAAKI,4BAAL,EAAuBD,QAAvB,CALP;;AAAA;AAAA;AAAA,2BAMO,mBAAKE,uBAAL,EAAkB,mBAAlB,EAAuCF,QAAvC,EAAiD,MAAjD,CANP;;AAAA;AAAA;AAAA,2BAOO,mBAAKE,uBAAL,EAAkB,mBAAlB,EAAuCF,QAAvC,EAAiD,MAAjD,CAPP;;AAAA;AAAA;AAAA,2BAY2B,qBAAO;AAAA,+BACjCG,MAAMC,QAAN,CAAeC,GAAf,CAAmB,iBAAnB,CADiC;AAAA,qBAAP,CAZ3B;;AAAA;AAYGC,mCAZH;AAeGC,gCAfH,GAekBX,aAAaU,eAAb,IAAgCZ,gBAflD;;AAgBHA,uCAAmB,KAAnB;;AAhBG,yBAiBCa,YAjBD;AAAA;AAAA;AAAA;;AAAA;AAAA,2BAmBO,mBAAKvB,gBAAL,EAAuBY,QAAvB,CAnBP;;AAAA;AAAA;;AAAA;AAwBCY,uBAxBD,QAwBUZ,QAxBV;;AAyBH,wBAAIY,QAAQ,GAAZ,EAAiBA,MAAM,UAAN;AACjB;AACA;AACA,wBAAIA,IAAIC,OAAJ,CAAY,mBAAZ,MAAqC,CAAC,CAA1C,EACID,MAAMA,IAAIE,OAAJ,CAAY,mBAAZ,EAAiC,YAAjC,CAAN;AACJ,wBAAIF,IAAIC,OAAJ,CAAY,iBAAZ,MAAmC,CAAC,CAAxC,EACID,MAAMA,IAAIE,OAAJ,CAAY,iBAAZ,EAA+B,YAA/B,CAAN;;AA/BD;AAAA,2BAiCG,kBAAI3B,WAAW4B,cAAX,EAAJ,CAjCH;;AAAA;AAAA;AAAA;AAAA,2BAmCqB,mBAAKC,uBAAL,EAAoBJ,GAApB,CAnCrB;;AAAA;AAmCOL,yBAnCP;AAAA;AAAA,2BAoCO,kBAAIrB,cAAc+B,YAAd,CAA2BV,KAA3B,CAAJ,CApCP;;AAAA;AAAA;AAAA,2BAqCO,mBAAKlB,eAAL,CArCP;;AAAA;AAAA;AAAA,2BAuCO,mBAAKD,gBAAL,EAAuBY,QAAvB,CAvCP;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAyCCkB,4BAAQC,KAAR,CAAc,8BAAd,EAA8CP,GAA9C;AAzCD;AAAA,2BA0CO,kBAAIzB,WAAWiC,aAAX,CAAyB,aAAMC,OAA/B,CAAJ,CA1CP;;AAAA;AAAA;AAAA,2BA6CG,kBAAIlC,WAAWmC,YAAX,EAAJ,CA7CH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgDP;;;;;AAKA,SAAUlC,gBAAV,CAA2BY,QAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBACQA,SAASE,KAAT,CAAe,+BAAf,CADR;AAAA;AAAA;AAAA;;AAEcE,4BAFd,GAEyBJ,SAASE,KAAT,CAAe,oBAAf,EAAqC,CAArC,CAFzB;AAAA;AAAA,2BAIsC,qBAAO;AAAA,+BACjCK,MAAMgB,MAAN,CAAaC,KAAb,CAAmB,CAAC,UAAD,EAAapB,QAAb,EAAuB,kBAAvB,CAAnB,CADiC;AAAA,qBAAP,CAJtC;;AAAA;AAIcqB,mCAJd;;;AAQQ;AACMC,iCATd,GAS8BD,gBAAgBE,MAAhB,CAAuB,UAACC,GAAD,EAAMC,GAAN,EAAc;AACvD,4BAAIA,IAAIL,KAAJ,CAAU,CAAC,CAAD,EAAI,IAAJ,EAAU,CAAV,CAAV,MAA4B,UAAhC,EAA4C;AAAA,kDACnBK,IAAIL,KAAJ,CAAU,CAAC,CAAD,EAAI,IAAJ,EAAU,CAAV,CAAV,EAAwBM,IAAxB,EADmB;AAAA,gCAChCC,IADgC,mBAChCA,IADgC;AAAA,gCAC1BC,EAD0B,mBAC1BA,EAD0B;;AAExC,mCAAOJ,IAAIK,GAAJ,CAAQF,IAAR,CAAP;AACH;AACD,+BAAOH,GAAP;AACA;AACA;AACH,qBARqB,EAQnB,IAAIM,cAAJ,CAAQ,CAAC9B,QAAD,CAAR,CARmB,CAT9B;AAAA;AAAA,2BAmBc,mBAAKd,WAAL,EAAkBoC,aAAlB,CAnBd;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAuBA,SAAUrC,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAE8B,qBAAO;AAAA,+BAC7BkB,MAAMC,QAAN,CAAeC,GAAf,CAAmB,cAAnB,CAD6B;AAAA,qBAAP,CAF9B;;AAAA;AAEU0B,+BAFV;;;AAMI;AACMC,mCAPV,GAO4BD,YAAYE,GAAZ,CAAgB;AAAA,+BACpCC,KAAKC,GAAL,CACI,MADJ,EAEIC,aAAaC,OAAb,uBAAyCH,KAAK7B,GAAL,CAAS,KAAT,CAAzC,MACI,MAHR,CADoC;AAAA,qBAAhB,CAP5B;;AAeI;;AAfJ;AAAA,2BAgBU,kBAAIvB,cAAcG,eAAd,CAA8B,EAAE8C,aAAaC,eAAf,EAA9B,CAAJ,CAhBV;;AAAA;;AAkBI;AACAD,gCAAYO,OAAZ,CAAoB,gBAAQ;AACxBF,qCAAaG,OAAb,uBAAyCL,KAAK7B,GAAL,CAAS,KAAT,CAAzC,EAA4D,MAA5D;AACH,qBAFD;;AAnBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAwBA;;;;;;;AAOA,SAAUnB,WAAV,CAAsBsD,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAC2B,mBAAK,CAACC,YAAD,EAAMA,aAAIC,gBAAV,CAAL,EAAkCF,SAAlC,CAD3B;;AAAA;AACUG,4BADV;AAAA;AAAA,2BAEU,kBAAI7D,cAAc8D,eAAd,CAA8B,EAAED,kBAAF,EAA9B,CAAJ,CAFV;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKO,SAAU/D,SAAV,CAAoBY,MAApB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,sCAC0DA,OAAOC,OADjE,EACKoD,KADL,mBACKA,KADL,EACYC,MADZ,mBACYA,MADZ,EACoBC,QADpB,mBACoBA,QADpB,EAC8BC,WAD9B,mBAC8BA,WAD9B,EAC2CC,UAD3C,mBAC2CA,UAD3C;AAEGC,4BAFH,GAEgB1D,OAAOC,OAFvB,CAEGyD,QAFH;;AAGH,wBAAI,CAACA,QAAL,EAAeA,WAAW,EAAX;AACfA,+BAAWA,SAASC,WAAT,EAAX;;AAJG;AAAA,2BAMG,kBAAIrE,cAAcsE,YAAd,CAA2B,EAAEP,YAAF,EAASK,kBAAT,EAA3B,CAAJ,CANH;;AAAA;AAOCG,6BAPD,WAOYC,IAPZ;;AAQH,wBAAIT,UAAU,UAAd,EAA0B;AACtBQ,oCAAY,+BAAZ;AACAC,+BAAO,CACH;AACIC,iCAAKL,QADT;AAEIM,mCAAOC,oBAAUC,qBAFrB;AAGIC,0CAAcb,MAHlB;AAIIc,4CAAgBb;AAJpB,yBADG,CAAP;AAQH,qBAVD,MAUO,IAAIF,UAAU,YAAd,EAA4B;AAC/BQ,oCAAY,iCAAZ;AACAC,+BAAO,CACH;AACIC,iCAAKL,QADT;AAEIM,mCAAOC,oBAAUC,qBAFrB;AAGIC,0CAAcb,MAHlB;AAIIc,4CAAgBb;AAJpB,yBADG,CAAP;AAQH,qBAVM,MAUA,IAAIF,UAAU,UAAd,EAA0B;AAC7BQ,oCAAY,+BAAZ;AACAC,+BAAO,CACH;AACIC,iCAAKL,QADT;AAEIM,mCAAOC,oBAAUC,qBAFrB;AAGIC,0CAAcb,MAHlB;AAIIc,4CAAgBb;AAJpB,yBADG,CAAP;AAQH,qBAVM,MAUA,IAAIF,UAAU,QAAd,EAAwB;AAC3BQ,oCAAY,6BAAZ;AACAC,+BAAO,CACH;AACIC,iCAAKL,QADT;AAEIM,mCAAOC,oBAAUC,qBAFrB;AAGIC,0CAAcb,MAHlB;AAIIc,4CAAgBb;AAJpB,yBADG,CAAP;AAQH,qBAVM,MAUA,IAAIF,UAAU,SAAd,EAAyB;AAC5BQ,oCAAY,8BAAZ;AACAC,+BAAO,CACH;AACIC,iCAAKL,QADT;AAEIM,mCAAOC,oBAAUC,qBAFrB;AAGIC,0CAAcb,MAHlB;AAIIc,4CAAgBb;AAJpB,yBADG,CAAP;AAQH,qBAVM,MAUA,IAAIF,UAAU,QAAd,EAAwB;AAC3BQ,oCAAY,iCAAZ;AACAC,+BAAO,CACH;AACIC,iCAAKL,QADT;AAEIM,mCAAOC,oBAAUC,qBAFrB;AAGIC,0CAAcb,MAHlB;AAIIc,4CAAgBb;AAJpB,yBADG,CAAP;AAQH,qBAVM,MAUA,IAAIF,UAAU,iBAAd,EAAiC;AACpCQ,oCAAY,oCAAZ;AACAC,+BAAO,CACH;AACIC,iCAAKL,QADT;AAEIM,mCAAOC,oBAAUC,qBAFrB;AAGIC,0CAAcb,MAHlB;AAIIc,4CAAgBb;AAJpB,yBADG,CAAP;AAQH,qBAVM,MAUA,IAAIF,UAAU,SAAd,EAAyB;AAC5BQ,oCAAY,6BAAZ;AACAC,+BAAO,CACH;AACIC,iCAAKL,QADT;AAEIM,mCAAOC,oBAAUC,qBAFrB;AAGIC,0CAAcb,MAHlB;AAIIc,4CAAgBb;AAJpB,yBADG,CAAP;AAQH,qBAVM,MAUA,IAAIF,UAAU,SAAV,IAAuBA,UAAU,QAArC,EAA+C;AAClDQ,oCAAY,8BAAZ;AACAC,+BAAO,CACH;AACIC,iCAAKL,QADT;AAEIM,mCAAOC,oBAAUC,qBAFrB;AAGIC,0CAAcb,MAHlB;AAIIc,4CAAgBb;AAJpB,yBADG,CAAP;AAQH,qBAVM,MAUA,IAAIF,UAAU,YAAd,EAA4B;AAC/BQ,oCAAY,6BAAZ;AACAC,+BAAO,CAACR,MAAD,EAASC,QAAT,EAAmBU,oBAAUC,qBAA7B,CAAP;AACH,qBAHM,MAGA,IAAIb,UAAU,WAAd,EAA2B;AAC9BQ,oCAAY,+BAAZ;AACAC,+BAAO,CACH;AACIC,iCAAKL,QADT;AAEIM,mCAAOC,oBAAUC,qBAFrB;AAGIC,0CAAcb,MAHlB;AAIIc,4CAAgBb;AAJpB,yBADG,CAAP;AAQH,qBAVM,MAUA,IAAIF,UAAU,OAAd,EAAuB;AAC1BQ,oCAAY,4BAAZ;AACAC,+BAAO,CACH;AACIC,iCAAKL,QADT;AAEIM,mCAAOC,oBAAUC,qBAFrB;AAGIC,0CAAcb,MAHlB;AAIIc,4CAAgBb;AAJpB,yBADG,CAAP;AAQH,qBAVM,MAUA,IAAIF,UAAU,KAAd,EAAqB;AACxBQ,oCAAY,0BAAZ;AACAC,+BAAO,CACH;AACIC,iCAAKL,QADT;AAEIM,mCAAOC,oBAAUC,qBAFrB;AAGIC,0CAAcb,MAHlB;AAIIc,4CAAgBb;AAJpB,yBADG,CAAP;AAQH,qBAVM,MAUA,IAAIF,UAAU,SAAd,EAAyB;AAC5B;AACAQ,oCAAY,2BAAZ;AACAC,+BAAO,CACH;AACIC,iCAAKP,WADT;AAEIQ,mCAAOC,oBAAUC,qBAFrB;AAGIC,0CAAcb,MAHlB;AAIIc,4CAAgBb;AAJpB,yBADG,CAAP;AAQH,qBAXM,MAWA,IAAIF,UAAU,WAAd,EAA2B;AAC9BQ,oCAAY,2BAAZ;AACAC,+BAAO,CACH;AACIC,iCAAKP,WADT;AAEIQ,mCAAOC,oBAAUC,qBAFrB;AAGIC,0CAAcb,MAHlB;AAIIc,4CAAgBb;AAJpB,yBADG,CAAP;AAQH,qBAVM,MAUA,IAAIF,UAAU,aAAd,EAA6B;AAChCQ,oCAAY,+BAAZ;AACAC,+BAAO,CACH;AACIE,mCAAOC,oBAAUC,qBADrB;AAEIC,0CAAcb,MAFlB;AAGIc,4CAAgBb;AAHpB,yBADG,CAAP;AAOH,qBATM,MASA;AACHM,oCAAY,6BAAZ;AACAC,+BAAO,CACH;AACIC,iCAAKL,QADT;AAEIM,mCAAOC,oBAAUC,qBAFrB;AAGIC,0CAAcb,MAHlB;AAIIc,4CAAgBb;AAJpB,yBADG,CAAP;AAQH;AA3KE;AAAA,2BA4KG,kBAAIhE,WAAW4B,cAAX,EAAJ,CA5KH;;AAAA;AAAA;AA8KOkD,iCA9KP,GA8KuBd,QA9KvB;AA+KKe,2BA/KL,GA+Ke,CA/Kf;AAgLKC,6BAhLL,GAgLiB,KAhLjB;AAiLKC,qCAjLL,GAiLyB,KAjLzB;AAkLKC,6BAlLL,GAkLiB,KAlLjB;AAmLKC,yBAnLL,GAmLa,CAnLb;;AAAA;AAAA,wBAoLSD,SApLT;AAAA;AAAA;AAAA;;AAAA;AAAA,2BAqLsBE,gCAAK,CAAC1B,YAAD,EAAMA,aAAIY,SAAJ,CAAN,CAAL,0CAA+BC,IAA/B,GArLtB;;AAAA;AAqLSc,wBArLT;;;AAuLKL,gCAAYK,KAAKrE,MAAL,GAAc0D,oBAAUC,qBAApC;;AAEAQ;AACAF,wCAAoBE,SAAST,oBAAUY,WAAvC;;AAEA;AACMC,6BA7LX,GA6LuBF,KAAKrE,MAAL,GAAc,CAAd,GAAkBqE,KAAKA,KAAKrE,MAAL,GAAc,CAAnB,CAAlB,GAA0C,IA7LjE;;AA8LK,wBAAIuE,aAAazB,UAAU,YAA3B,EAAyC;AACrCS,6BAAK,CAAL,EAAQK,YAAR,GAAuBW,UAAUxB,MAAjC;AACAQ,6BAAK,CAAL,EAAQM,cAAR,GAAyBU,UAAUvB,QAAnC;AACH;;AAED;AACA;AACAe,+BAAWb,aACLmB,KAAKG,MAAL,CAAYtB,UAAZ,EAAwBlD,MADnB,GAELqE,KAAKrE,MAFX;;AAIAkE,gCACIF,aACAC,iBADA,IAEAF,WAAWL,oBAAUC,qBAHzB;;AAzML;AAAA,2BA8MW,kBACF5E,cAAc0F,WAAd,CAA0B;AACtBJ,kCADsB;AAEtBvB,oCAFsB;AAGtBK,0CAHsB;AAItBJ,sCAJsB;AAKtBe,oDALsB;AAMtBb,gDANsB;AAOtByB,kCAAU,CAACR,SAPW;AAQtBF;AARsB,qBAA1B,CADE,CA9MX;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AA4NCjD,4BAAQC,KAAR,CAAc,6BAAd,EAA6CsC,SAA7C,EAAwDC,IAAxD;AA5ND;AAAA,2BA6NO,kBAAIvE,WAAWiC,aAAX,CAAyB,aAAMC,OAA/B,CAAJ,CA7NP;;AAAA;AAAA;AAAA,2BA+NG,kBAAIlC,WAAWmC,YAAX,EAAJ,CA/NH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAkOP;AACA;AACA;AACO,SAAUrC,SAAV;AAAA,4BAAsBY,OAAtB;AAAA,QAAiCiF,EAAjC,gBAAiCA,EAAjC;AAAA,QAAqCC,IAArC,gBAAqCA,IAArC;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAEyB,mBACpB;AAAA,+BACI,sBAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC7B,qCAASC,WAAT,GAAuB;AACnB,oCAAMC,OAAOC,KAAKC,KAAL,CAAW,KAAKC,YAAhB,CAAb;AACA,oCAAIH,KAAKhE,KAAT,EAAgB;AACZ8D,2CAAOE,KAAKhE,KAAZ;AACA;AACH;AACD6D,wCAAQG,IAAR;AACH;AACD,gCAAMI,OAAO,IAAIC,cAAJ,EAAb;AACAD,iCAAKE,gBAAL,CAAsB,MAAtB,EAA8BP,WAA9B;AACAK,iCAAKG,IAAL,CAAU,KAAV,EAAiB,oBAAoBX,IAArC;AACAQ,iCAAKI,IAAL;AACH,yBAbD,CADJ;AAAA,qBADoB,CAFzB;;AAAA;AAEOC,6BAFP;AAmBSC,yBAnBT,GAmB6BD,SAnB7B,CAmBSC,KAnBT,EAmBgBC,QAnBhB,GAmB6BF,SAnB7B,CAmBgBE,QAnBhB;AAoBKC,wBApBL,GAoBY,EAAEF,YAAF,EApBZ;;AAqBC,yBAASG,CAAT,GAAa,CAAb,EAAgBA,IAAIF,SAAS3F,MAA7B,EAAqC6F,GAArC,EAA0C;AAAA,mEACdF,SAASE,CAAT,CADc,MAC/BC,IAD+B,mBACzBC,OADyB;;AAEtCH,6BAAKE,IAAL,IAAaC,OAAb;AACH;AACD;AACAH,2BAAO;AACHhB,kCADG;AAEHoB,8BAAMJ,KAAK,cAAL,CAFH;AAGHK,8BAAML,KAAK,cAAL,CAHH,EAGyB;AAC5BF,+BAAOE,KAAK,eAAL,CAJJ;AAKHM,qCAAaN,KAAK,qBAAL,CALV;AAMHO,+BAAOP,KAAK,eAAL,CANJ;AAOHQ,6BAAKR,KAAK,aAAL;AAPF,qBAAP;AASA,wBAAI,CAACA,KAAKO,KAAV,EAAiB;AACbP,6BAAKO,KAAL,GAAaP,KAAK,mBAAL,CAAb;AACH;AArCF;AAAA,2BAsCO,kBAAI7G,cAAcsH,WAAd,CAA0B,EAAE1B,MAAF,EAAMiB,UAAN,EAA1B,CAAJ,CAtCP;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,2BAwCO,kBAAI7G,cAAcsH,WAAd,CAA0B,EAAE1B,MAAF,EAAMiB,MAAM,EAAE5E,mBAAF,EAAZ,EAA1B,CAAJ,CAxCP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA4CP;;;;;AAKA,SAAU5B,SAAV;AAAA,8BACIM,OADJ;AAAA,QACeiF,EADf,iBACeA,EADf;AAAA,QACmBlE,GADnB,iBACmBA,GADnB;AAAA,QACwB6F,IADxB,iBACwBA,IADxB;AAAA,QAC8BC,eAD9B,iBAC8BA,eAD9B;AAAA,8CAC+CC,WAD/C;AAAA,QAC+CA,WAD/C,yCAC6D,KAD7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIc9G,2BAJd,GAIwB;AACZ+G,gCAAQH,OAAO,MAAP,GAAgB,KADZ;AAEZI,iCAAS;AACLC,oCAAQ,kBADH;AAEL,4CAAgB;AAFX,yBAFG;AAMZL,8BAAMA,OAAO,yBAAeA,IAAf,CAAP,GAA8BM;AANxB,qBAJxB;AAAA;AAAA,2BAY2BJ,cACbK,MAAMpG,GAAN,EAAWf,OAAX,CADa,GAEb,mBAAKmH,KAAL,EAAYpG,GAAZ,EAAiBf,OAAjB,CAdd;;AAAA;AAYYoH,0BAZZ;AAAA;AAAA,2BAeuBA,OAAOC,IAAP,EAfvB;;AAAA;AAeQD,0BAfR;;AAgBQ,wBAAIP,eAAJ,EAAqBO,SAASP,gBAAgBO,MAAhB,CAAT;AAhB7B;AAAA,2BAiBc,kBAAI/H,cAAciI,eAAd,CAA8B,EAAErC,MAAF,EAAMmC,cAAN,EAA9B,CAAJ,CAjBd;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAmBQ/F,4BAAQC,KAAR,CAAc,WAAd;AAnBR;AAAA,2BAoBc,kBAAIjC,cAAciI,eAAd,CAA8B,EAAErC,MAAF,EAAM3D,mBAAN,EAA9B,CAAJ,CApBd;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAwBA;AACO,IAAMiG,4BAAU;AACnBC,iBAAa;AAAA,eAAY;AACrBC,kBAAM9H,YADe;AAErBK;AAFqB,SAAZ;AAAA,KADM;;AAMnB0H,gBAAY;AAAA,eAAY;AACpBD,kBAAM7H,WADc;AAEpBI;AAFoB,SAAZ;AAAA,KANO;;AAWnBd,gBAAY;AAAA,eAAY;AACpBuI,kBAAM5H,WADc;AAEpBG;AAFoB,SAAZ;AAAA;AAXO,CAAhB","file":"FetchDataSaga.js","sourcesContent":["import {\n    call,\n    put,\n    select,\n    fork,\n    takeLatest,\n    takeEvery,\n} from 'redux-saga/effects';\nimport { api } from '@steemit/steem-js';\nimport { loadFollows, fetchFollowCount } from 'app/redux/FollowSaga';\nimport { getContent } from 'app/redux/SagaShared';\nimport * as globalActions from './GlobalReducer';\nimport * as appActions from './AppReducer';\nimport constants from './constants';\nimport { fromJS, Map, Set } from 'immutable';\nimport { getStateAsync } from 'app/utils/steemApi';\n\nconst REQUEST_DATA = 'fetchDataSaga/REQUEST_DATA';\nconst GET_CONTENT = 'fetchDataSaga/GET_CONTENT';\nconst FETCH_STATE = 'fetchDataSaga/FETCH_STATE';\n\nexport const fetchDataWatches = [\n    takeLatest(REQUEST_DATA, fetchData),\n    takeEvery(GET_CONTENT, getContentCaller),\n    takeLatest('@@router/LOCATION_CHANGE', fetchState),\n    takeLatest(FETCH_STATE, fetchState),\n    takeEvery('global/FETCH_JSON', fetchJson),\n];\n\nexport function* getContentCaller(action) {\n    yield getContent(action.payload);\n}\n\nlet is_initial_state = true;\nexport function* fetchState(location_change_action) {\n    const { pathname } = location_change_action.payload;\n    const m = pathname.match(/^\\/@([a-z0-9\\.-]+)/);\n    if (m && m.length === 2) {\n        const username = m[1];\n        yield fork(fetchFollowCount, username);\n        yield fork(loadFollows, 'getFollowersAsync', username, 'blog');\n        yield fork(loadFollows, 'getFollowingAsync', username, 'blog');\n    }\n\n    // `ignore_fetch` case should only trigger on initial page load. No need to call\n    // fetchState immediately after loading fresh state from the server. Details: #593\n    const server_location = yield select(state =>\n        state.offchain.get('server_location')\n    );\n    const ignore_fetch = pathname === server_location && is_initial_state;\n    is_initial_state = false;\n    if (ignore_fetch) {\n        // If a user's transfer page is being loaded, fetch related account data.\n        yield call(getTransferUsers, pathname);\n\n        return;\n    }\n\n    let url = `${pathname}`;\n    if (url === '/') url = 'trending';\n    // Replace /curation-rewards and /author-rewards with /transfers for UserProfile\n    // to resolve data correctly\n    if (url.indexOf('/curation-rewards') !== -1)\n        url = url.replace('/curation-rewards', '/transfers');\n    if (url.indexOf('/author-rewards') !== -1)\n        url = url.replace('/author-rewards', '/transfers');\n\n    yield put(appActions.fetchDataBegin());\n    try {\n        const state = yield call(getStateAsync, url);\n        yield put(globalActions.receiveState(state));\n        yield call(syncPinnedPosts);\n        // If a user's transfer page is being loaded, fetch related account data.\n        yield call(getTransferUsers, pathname);\n    } catch (error) {\n        console.error('~~ Saga fetchState error ~~>', url, error);\n        yield put(appActions.steemApiError(error.message));\n    }\n\n    yield put(appActions.fetchDataEnd());\n}\n\n/**\n * Get transfer-related usernames from history and fetch their account data.\n *\n * @param {String} pathname\n */\nfunction* getTransferUsers(pathname) {\n    if (pathname.match(/^\\/@([a-z0-9\\.-]+)\\/transfers/)) {\n        const username = pathname.match(/^\\/@([a-z0-9\\.-]+)/)[1];\n\n        const transferHistory = yield select(state =>\n            state.global.getIn(['accounts', username, 'transfer_history'])\n        );\n\n        // Find users in the transfer history to consider sending users' reputations.\n        const transferUsers = transferHistory.reduce((acc, cur) => {\n            if (cur.getIn([1, 'op', 0]) === 'transfer') {\n                const { from, to } = cur.getIn([1, 'op', 1]).toJS();\n                return acc.add(from);\n            }\n            return acc;\n            // Ensure current user is included in this list, even if they don't have transfer history.\n            // This ensures their reputation is updated - fixes #2306\n        }, new Set([username]));\n\n        yield call(getAccounts, transferUsers);\n    }\n}\n\nfunction* syncPinnedPosts() {\n    // Get pinned posts from the store.\n    const pinnedPosts = yield select(state =>\n        state.offchain.get('pinned_posts')\n    );\n\n    // Mark seen posts.\n    const seenPinnedPosts = pinnedPosts.map(post =>\n        post.set(\n            'seen',\n            localStorage.getItem(`pinned-post-seen:${post.get('url')}`) ===\n                'true'\n        )\n    );\n\n    // Look up seen post URLs.\n    yield put(globalActions.syncPinnedPosts({ pinnedPosts: seenPinnedPosts }));\n\n    // Mark all pinned posts as seen.\n    pinnedPosts.forEach(post => {\n        localStorage.setItem(`pinned-post-seen:${post.get('url')}`, 'true');\n    });\n}\n\n/**\n * Request account data for a set of usernames.\n *\n * @todo batch the put()s\n *\n * @param {Iterable} usernames\n */\nfunction* getAccounts(usernames) {\n    const accounts = yield call([api, api.getAccountsAsync], usernames);\n    yield put(globalActions.receiveAccounts({ accounts }));\n}\n\nexport function* fetchData(action) {\n    const { order, author, permlink, accountname, postFilter } = action.payload;\n    let { category } = action.payload;\n    if (!category) category = '';\n    category = category.toLowerCase();\n\n    yield put(globalActions.fetchingData({ order, category }));\n    let call_name, args;\n    if (order === 'trending') {\n        call_name = 'getDiscussionsByTrendingAsync';\n        args = [\n            {\n                tag: category,\n                limit: constants.FETCH_DATA_BATCH_SIZE,\n                start_author: author,\n                start_permlink: permlink,\n            },\n        ];\n    } else if (order === 'trending30') {\n        call_name = 'getDiscussionsByTrending30Async';\n        args = [\n            {\n                tag: category,\n                limit: constants.FETCH_DATA_BATCH_SIZE,\n                start_author: author,\n                start_permlink: permlink,\n            },\n        ];\n    } else if (order === 'promoted') {\n        call_name = 'getDiscussionsByPromotedAsync';\n        args = [\n            {\n                tag: category,\n                limit: constants.FETCH_DATA_BATCH_SIZE,\n                start_author: author,\n                start_permlink: permlink,\n            },\n        ];\n    } else if (order === 'active') {\n        call_name = 'getDiscussionsByActiveAsync';\n        args = [\n            {\n                tag: category,\n                limit: constants.FETCH_DATA_BATCH_SIZE,\n                start_author: author,\n                start_permlink: permlink,\n            },\n        ];\n    } else if (order === 'cashout') {\n        call_name = 'getDiscussionsByCashoutAsync';\n        args = [\n            {\n                tag: category,\n                limit: constants.FETCH_DATA_BATCH_SIZE,\n                start_author: author,\n                start_permlink: permlink,\n            },\n        ];\n    } else if (order === 'payout') {\n        call_name = 'getPostDiscussionsByPayoutAsync';\n        args = [\n            {\n                tag: category,\n                limit: constants.FETCH_DATA_BATCH_SIZE,\n                start_author: author,\n                start_permlink: permlink,\n            },\n        ];\n    } else if (order === 'payout_comments') {\n        call_name = 'getCommentDiscussionsByPayoutAsync';\n        args = [\n            {\n                tag: category,\n                limit: constants.FETCH_DATA_BATCH_SIZE,\n                start_author: author,\n                start_permlink: permlink,\n            },\n        ];\n    } else if (order === 'updated') {\n        call_name = 'getDiscussionsByActiveAsync';\n        args = [\n            {\n                tag: category,\n                limit: constants.FETCH_DATA_BATCH_SIZE,\n                start_author: author,\n                start_permlink: permlink,\n            },\n        ];\n    } else if (order === 'created' || order === 'recent') {\n        call_name = 'getDiscussionsByCreatedAsync';\n        args = [\n            {\n                tag: category,\n                limit: constants.FETCH_DATA_BATCH_SIZE,\n                start_author: author,\n                start_permlink: permlink,\n            },\n        ];\n    } else if (order === 'by_replies') {\n        call_name = 'getRepliesByLastUpdateAsync';\n        args = [author, permlink, constants.FETCH_DATA_BATCH_SIZE];\n    } else if (order === 'responses') {\n        call_name = 'getDiscussionsByChildrenAsync';\n        args = [\n            {\n                tag: category,\n                limit: constants.FETCH_DATA_BATCH_SIZE,\n                start_author: author,\n                start_permlink: permlink,\n            },\n        ];\n    } else if (order === 'votes') {\n        call_name = 'getDiscussionsByVotesAsync';\n        args = [\n            {\n                tag: category,\n                limit: constants.FETCH_DATA_BATCH_SIZE,\n                start_author: author,\n                start_permlink: permlink,\n            },\n        ];\n    } else if (order === 'hot') {\n        call_name = 'getDiscussionsByHotAsync';\n        args = [\n            {\n                tag: category,\n                limit: constants.FETCH_DATA_BATCH_SIZE,\n                start_author: author,\n                start_permlink: permlink,\n            },\n        ];\n    } else if (order === 'by_feed') {\n        // https://github.com/steemit/steem/issues/249\n        call_name = 'getDiscussionsByFeedAsync';\n        args = [\n            {\n                tag: accountname,\n                limit: constants.FETCH_DATA_BATCH_SIZE,\n                start_author: author,\n                start_permlink: permlink,\n            },\n        ];\n    } else if (order === 'by_author') {\n        call_name = 'getDiscussionsByBlogAsync';\n        args = [\n            {\n                tag: accountname,\n                limit: constants.FETCH_DATA_BATCH_SIZE,\n                start_author: author,\n                start_permlink: permlink,\n            },\n        ];\n    } else if (order === 'by_comments') {\n        call_name = 'getDiscussionsByCommentsAsync';\n        args = [\n            {\n                limit: constants.FETCH_DATA_BATCH_SIZE,\n                start_author: author,\n                start_permlink: permlink,\n            },\n        ];\n    } else {\n        call_name = 'getDiscussionsByActiveAsync';\n        args = [\n            {\n                tag: category,\n                limit: constants.FETCH_DATA_BATCH_SIZE,\n                start_author: author,\n                start_permlink: permlink,\n            },\n        ];\n    }\n    yield put(appActions.fetchDataBegin());\n    try {\n        const firstPermlink = permlink;\n        var fetched = 0;\n        var endOfData = false;\n        var fetchLimitReached = false;\n        var fetchDone = false;\n        var batch = 0;\n        while (!fetchDone) {\n            var data = yield call([api, api[call_name]], ...args);\n\n            endOfData = data.length < constants.FETCH_DATA_BATCH_SIZE;\n\n            batch++;\n            fetchLimitReached = batch >= constants.MAX_BATCHES;\n\n            // next arg. Note 'by_replies' does not use same structure.\n            const lastValue = data.length > 0 ? data[data.length - 1] : null;\n            if (lastValue && order !== 'by_replies') {\n                args[0].start_author = lastValue.author;\n                args[0].start_permlink = lastValue.permlink;\n            }\n\n            // Still return all data but only count ones matching the filter.\n            // Rely on UI to actually hide the posts.\n            fetched += postFilter\n                ? data.filter(postFilter).length\n                : data.length;\n\n            fetchDone =\n                endOfData ||\n                fetchLimitReached ||\n                fetched >= constants.FETCH_DATA_BATCH_SIZE;\n\n            yield put(\n                globalActions.receiveData({\n                    data,\n                    order,\n                    category,\n                    author,\n                    firstPermlink,\n                    accountname,\n                    fetching: !fetchDone,\n                    endOfData,\n                })\n            );\n        }\n    } catch (error) {\n        console.error('~~ Saga fetchData error ~~>', call_name, args, error);\n        yield put(appActions.steemApiError(error.message));\n    }\n    yield put(appActions.fetchDataEnd());\n}\n\n// export function* watchMetaRequests() {\n//     yield* takeLatest('global/REQUEST_META', fetchMeta);\n// }\nexport function* fetchMeta({ payload: { id, link } }) {\n    try {\n        const metaArray = yield call(\n            () =>\n                new Promise((resolve, reject) => {\n                    function reqListener() {\n                        const resp = JSON.parse(this.responseText);\n                        if (resp.error) {\n                            reject(resp.error);\n                            return;\n                        }\n                        resolve(resp);\n                    }\n                    const oReq = new XMLHttpRequest();\n                    oReq.addEventListener('load', reqListener);\n                    oReq.open('GET', '/http_metadata/' + link);\n                    oReq.send();\n                })\n        );\n        const { title, metaTags } = metaArray;\n        let meta = { title };\n        for (let i = 0; i < metaTags.length; i++) {\n            const [name, content] = metaTags[i];\n            meta[name] = content;\n        }\n        // http://postimg.org/image/kbefrpbe9/\n        meta = {\n            link,\n            card: meta['twitter:card'],\n            site: meta['twitter:site'], // @username tribbute\n            title: meta['twitter:title'],\n            description: meta['twitter:description'],\n            image: meta['twitter:image'],\n            alt: meta['twitter:alt'],\n        };\n        if (!meta.image) {\n            meta.image = meta['twitter:image:src'];\n        }\n        yield put(globalActions.receiveMeta({ id, meta }));\n    } catch (error) {\n        yield put(globalActions.receiveMeta({ id, meta: { error } }));\n    }\n}\n\n/**\n    @arg {string} id unique key for result global['fetchJson_' + id]\n    @arg {string} url\n    @arg {object} body (for JSON.stringify)\n*/\nfunction* fetchJson({\n    payload: { id, url, body, successCallback, skipLoading = false },\n}) {\n    try {\n        const payload = {\n            method: body ? 'POST' : 'GET',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: body ? JSON.stringify(body) : undefined,\n        };\n        let result = yield skipLoading\n            ? fetch(url, payload)\n            : call(fetch, url, payload);\n        result = yield result.json();\n        if (successCallback) result = successCallback(result);\n        yield put(globalActions.fetchJsonResult({ id, result }));\n    } catch (error) {\n        console.error('fetchJson', error);\n        yield put(globalActions.fetchJsonResult({ id, error }));\n    }\n}\n\n// Action creators\nexport const actions = {\n    requestData: payload => ({\n        type: REQUEST_DATA,\n        payload,\n    }),\n\n    getContent: payload => ({\n        type: GET_CONTENT,\n        payload,\n    }),\n\n    fetchState: payload => ({\n        type: FETCH_STATE,\n        payload,\n    }),\n};\n"]}