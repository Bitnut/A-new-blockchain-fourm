{"version":3,"sources":["../../../src/app/redux/MarketReducer.test.js"],"names":["someOpenOrders","id","created","expiration","seller","orderid","for_sale","sell_price","base","quote","real_price","rewarded","toggleSortByPrice","column","dataType","describe","it","initial","expect","get","toEqual","dir","withOrders","orders","price","toBe","sbd","type","undefined","byPriceDesc","byPriceAsc"],"mappings":"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","file":"MarketReducer.test.js","sourcesContent":["import { Map } from 'immutable';\n\nimport reducer, {\n    receiveOpenOrders,\n    toggleOpenOrdersSort,\n} from './MarketReducer';\n\nconst someOpenOrders = [\n    {\n        id: 1127826,\n        created: '2017-12-04T23:54:09',\n        expiration: '1969-12-31T23:59:59',\n        seller: 'bnchdrff',\n        orderid: 1512431634,\n        for_sale: 3000,\n        sell_price: {\n            base: '3.000 STEEM',\n            quote: '1.998 SBD',\n        },\n        real_price: '0',\n        rewarded: false,\n    },\n    {\n        id: 1127827,\n        created: '2017-12-04T23:54:54',\n        expiration: '1969-12-31T23:59:59',\n        seller: 'bnchdrff',\n        orderid: 1512431689,\n        for_sale: 7000,\n        sell_price: {\n            base: '7.000 STEEM',\n            quote: '4.578 SBD',\n        },\n        real_price: '0',\n        rewarded: false,\n    },\n    {\n        id: 1127832,\n        created: '2017-12-04T23:57:18',\n        expiration: '1969-12-31T23:59:59',\n        seller: 'bnchdrff',\n        orderid: 1512431835,\n        for_sale: 3000,\n        sell_price: {\n            base: '3.000 STEEM',\n            quote: '1.953 SBD',\n        },\n        real_price: '0',\n        rewarded: false,\n    },\n    {\n        id: 1131478,\n        created: '2017-12-05T16:42:00',\n        expiration: '1969-12-31T23:59:59',\n        seller: 'bnchdrff',\n        orderid: 1512492109,\n        for_sale: 507,\n        sell_price: {\n            base: '0.507 SBD',\n            quote: '1.000 STEEM',\n        },\n        real_price: '0',\n        rewarded: false,\n    },\n    {\n        id: 1131479,\n        created: '2017-12-05T16:42:27',\n        expiration: '1969-12-31T23:59:59',\n        seller: 'bnchdrff',\n        orderid: 1512492144,\n        for_sale: 507,\n        sell_price: {\n            base: '0.507 SBD',\n            quote: '1.000 STEEM',\n        },\n        real_price: '0',\n        rewarded: false,\n    },\n];\n\nconst toggleSortByPrice = {\n    column: 'price',\n    dataType: 'float',\n};\n\ndescribe('market reducer', () => {\n    it('should provide a nice initial state', () => {\n        const initial = reducer();\n\n        expect(initial.get('open_orders_sort')).toEqual(\n            Map({\n                column: 'created',\n                dataType: 'string',\n                dir: 1,\n            })\n        );\n\n        expect(initial.get('status')).toEqual({});\n    });\n\n    it('should receive open orders', () => {\n        const initial = reducer();\n\n        const withOrders = reducer(initial, receiveOpenOrders(someOpenOrders));\n\n        const orders = withOrders.get('open_orders');\n\n        expect(orders[0].price).toBe(0.666);\n        expect(orders[0].sbd).toBe('1.998 SBD');\n        expect(orders[1].type).toBe('ask');\n        expect(orders[2].price).toBe(0.651);\n        expect(orders[2].sbd).toBe('1.953 SBD');\n        expect(orders[3].type).toBe('bid');\n        expect(orders[3].type).toBe('bid');\n    });\n\n    it('should sort open orders', () => {\n        const withOrders = reducer(\n            undefined,\n            receiveOpenOrders(someOpenOrders)\n        );\n\n        const byPriceDesc = reducer(\n            withOrders,\n            toggleOpenOrdersSort(toggleSortByPrice)\n        );\n        const byPriceAsc = reducer(\n            byPriceDesc,\n            toggleOpenOrdersSort(toggleSortByPrice)\n        );\n\n        const orders = byPriceAsc.get('open_orders');\n\n        expect(orders[0].price).toBe(0.507);\n        expect(orders[4].price).toBe(0.666);\n    });\n});\n"]}