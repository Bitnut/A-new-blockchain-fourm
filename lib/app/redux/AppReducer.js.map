{"version":3,"sources":["../../../src/app/redux/AppReducer.js"],"names":["reducer","STEEM_API_ERROR","FETCH_DATA_BEGIN","FETCH_DATA_END","ADD_NOTIFICATION","REMOVE_NOTIFICATION","SET_USER_PREFERENCES","TOGGLE_NIGHTMODE","TOGGLE_BLOGMODE","RECEIVE_FEATURE_FLAGS","defaultState","loading","error","location","notifications","user_preferences","locale","nsfwPref","nightmode","blogmode","currency","defaultBlogPayout","defaultCommentPayout","featureFlags","state","action","type","set","pathname","payload","n","dismissAfter","update","s","key","delete","setIn","getIn","newFlags","get","merge","flags","steemApiError","fetchDataBegin","fetchDataEnd","addNotification","removeNotification","setUserPreferences","toggleNightmode","toggleBlogmode","receiveFeatureFlags","selectors","getFeatureFlag","flagName"],"mappings":"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","file":"AppReducer.js","sourcesContent":["import { Map, OrderedMap } from 'immutable';\nimport tt from 'counterpart';\n\nconst STEEM_API_ERROR = 'app/STEEM_API_ERROR';\nconst FETCH_DATA_BEGIN = 'app/FETCH_DATA_BEGIN';\nconst FETCH_DATA_END = 'app/FETCH_DATA_END';\nconst ADD_NOTIFICATION = 'app/ADD_NOTIFICATION';\nconst REMOVE_NOTIFICATION = 'app/REMOVE_NOTIFICATION';\nexport const SET_USER_PREFERENCES = 'app/SET_USER_PREFERENCES';\nexport const TOGGLE_NIGHTMODE = 'app/TOGGLE_NIGHTMODE';\nexport const TOGGLE_BLOGMODE = 'app/TOGGLE_BLOGMODE';\nexport const RECEIVE_FEATURE_FLAGS = 'app/RECEIVE_FEATURE_FLAGS';\n\nexport const defaultState = Map({\n    loading: false,\n    error: '',\n    location: {},\n    notifications: null,\n    user_preferences: Map({\n        locale: null,\n        nsfwPref: 'warn',\n        nightmode: false,\n        blogmode: false,\n        currency: 'USD',\n        defaultBlogPayout: '50%',\n        defaultCommentPayout: '50%',\n    }),\n    featureFlags: Map({}),\n});\n\nexport default function reducer(state = defaultState, action = {}) {\n    switch (action.type) {\n        case '@@router/LOCATION_CHANGE':\n            return state.set('location', { pathname: action.payload.pathname });\n        case STEEM_API_ERROR:\n            // Until we figure out how to better handle these errors, let em slide.\n            // This action is the only part of the app that marks an error in state.app.error,\n            // and the only part of the app which pays attn to this part of the state is in App.jsx.\n            // return  state.set('error', action.error).set('loading', false);\n            // It is also worth noting that showTransactionErrorNotification in SagaShared\n            // Will check state.transaction.errors and create a notification for whatever it finds there.\n            // While TransactionReducer will add items to state.transaction.errors.\n            return state;\n        case FETCH_DATA_BEGIN:\n            return state.set('loading', true);\n        case FETCH_DATA_END:\n            return state.set('loading', false);\n        case ADD_NOTIFICATION: {\n            const n = {\n                action: tt('g.dismiss'),\n                dismissAfter: 10000,\n                ...action.payload,\n            };\n            return state.update('notifications', s => {\n                return s ? s.set(n.key, n) : OrderedMap({ [n.key]: n });\n            });\n        }\n        case REMOVE_NOTIFICATION:\n            return state.update('notifications', s =>\n                s.delete(action.payload.key)\n            );\n        case SET_USER_PREFERENCES:\n            return state.set('user_preferences', Map(action.payload));\n        case TOGGLE_NIGHTMODE:\n            return state.setIn(\n                ['user_preferences', 'nightmode'],\n                !state.getIn(['user_preferences', 'nightmode'])\n            );\n        case TOGGLE_BLOGMODE:\n            return state.setIn(\n                ['user_preferences', 'blogmode'],\n                !state.getIn(['user_preferences', 'blogmode'])\n            );\n        case RECEIVE_FEATURE_FLAGS:\n            const newFlags = state.get('featureFlags')\n                ? state.get('featureFlags').merge(action.flags)\n                : Map(action.flags);\n            return state.set('featureFlags', newFlags);\n        default:\n            return state;\n    }\n}\n\nexport const steemApiError = error => ({\n    type: STEEM_API_ERROR,\n    error,\n});\n\nexport const fetchDataBegin = () => ({\n    type: FETCH_DATA_BEGIN,\n});\n\nexport const fetchDataEnd = () => ({\n    type: FETCH_DATA_END,\n});\n\nexport const addNotification = payload => ({\n    type: ADD_NOTIFICATION,\n    payload,\n});\n\nexport const removeNotification = payload => ({\n    type: REMOVE_NOTIFICATION,\n    payload,\n});\n\nexport const setUserPreferences = payload => ({\n    type: SET_USER_PREFERENCES,\n    payload,\n});\n\nexport const toggleNightmode = () => ({\n    type: TOGGLE_NIGHTMODE,\n});\n\nexport const toggleBlogmode = () => ({\n    type: TOGGLE_BLOGMODE,\n});\n\nexport const receiveFeatureFlags = flags => ({\n    type: RECEIVE_FEATURE_FLAGS,\n    flags,\n});\n\nexport const selectors = {\n    getFeatureFlag: (state, flagName) =>\n        state.getIn(['featureFlags', flagName], false),\n};\n"]}