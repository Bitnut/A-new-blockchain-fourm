{"version":3,"sources":["../../../src/app/redux/OffchainReducer.test.js"],"names":["mockAction","type","mockActionWithPayload","payload","describe","it","initial","expected","user","expect","toEqual","withPayload","account"],"mappings":";;;;;;AAAA;;AACA;;;;;;AAEA,IAAMA,aAAa;AACfC,UAAM;AADS,CAAnB;;AAIA,IAAMC,mDAA6BF,UAA7B,IAAyCG,SAAS,YAAlD,GAAN;;AAEAC,SAAS,kBAAT,EAA6B,YAAM;AAC/BC,OAAG,uDAAH,EAA4D,YAAM;AAC9D,YAAMC,UAAU,gCAAhB;AACA,YAAMC,WAAW,oBAAI,EAAEC,MAAM,oBAAI,EAAJ,CAAR,EAAJ,CAAjB;AACAC,eAAOH,OAAP,EAAgBI,OAAhB,CAAwBH,QAAxB;AACA,YAAMI,cAAc,+BAAQL,OAAR,EAAiBJ,qBAAjB,CAApB;AACAO,eAAOE,WAAP,EAAoBD,OAApB,CAA4BH,QAA5B;AACH,KAND;AAOAF,OAAG,6DAAH,EAAkE,YAAM;AACpE,YAAMC,UAAU,gCAAhB;AACA,YAAMM,UAAU,+BAAQN,OAAR,EAAiBN,UAAjB,CAAhB;AACAS,eAAOG,OAAP,EAAgBF,OAAhB,CAAwB,oBAAI,EAAEF,MAAM,oBAAI,EAAJ,CAAR,EAAiBI,SAAS,IAA1B,EAAJ,CAAxB;AACH,KAJD;AAKH,CAbD","file":"OffchainReducer.test.js","sourcesContent":["import { Map } from 'immutable';\nimport reducer from './OffchainReducer';\n\nconst mockAction = {\n    type: 'user/SAVE_LOGIN_CONFIRM',\n};\n\nconst mockActionWithPayload = { ...mockAction, payload: 'Foo Barman' };\n\ndescribe('offchain reducer', () => {\n    it('should provide a nice initial state, with any payload', () => {\n        const initial = reducer();\n        const expected = Map({ user: Map({}) });\n        expect(initial).toEqual(expected);\n        const withPayload = reducer(initial, mockActionWithPayload);\n        expect(withPayload).toEqual(expected);\n    });\n    it('should return an account of null when action has no payload', () => {\n        const initial = reducer();\n        const account = reducer(initial, mockAction);\n        expect(account).toEqual(Map({ user: Map({}), account: null }));\n    });\n});\n"]}