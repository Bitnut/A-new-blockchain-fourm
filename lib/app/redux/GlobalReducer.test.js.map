{"version":3,"sources":["../../../src/app/redux/GlobalReducer.test.js"],"names":["globalActions","expectedStats","isNsfw","hide","hasPendingPayout","gray","flagWeight","up_votes","total_votes","authorRepLog10","undefined","allowDelete","describe","it","initial","expect","toEqual","defaultState","payload","post","collapsed","set","actual","setCollapsed","getIn","content","barman","foo","stats","receiveState","account","name","witness_votes","beList","beOrderedMap","expected","status","accounts","be_List","be_orderedMap","receiveAccount","beorderedMap","kewl","initState","seagull","result","error","sergei","bar","receiveAccounts","get","op","author","permlink","parent_author","parent_permlink","title","body","receiveComment","replies","children","actual2","active_votes","one","percent","two","receiveContent","linkReply","witness","approve","updateAccountWitnessVote","proxy","updateAccountWitnessProxy","initWithContent","setIn","deleteContent","initWithContentAndParent","initWithParentKeyContent","toHaveLength","order","category","initWithCategory","fetching","fetchingData","postData","data","accountname","initWithData","merge","discussion_idx","UnusualOrder","FebrileFriday","actual1","receiveData","postKey","actual3","toBeFalsy","last_fetch","toBeTruthy","endOfData","actual4","receiveRecentPosts","id","link","requestMeta","meta","initialWithData","receiveMeta","key","value","remove","updater","update","flip","setMetaData","deleteMe","erase","clearMeta","clearPayload","formId","element","clearMetaElement","pear","fetchJson","fetchJsonResult","params","cheap","chimney","showDialog","Iris","hideDialog"],"mappings":"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","file":"GlobalReducer.test.js","sourcesContent":["import { Map, OrderedMap, getIn, List, fromJS, Set, merge } from 'immutable';\nimport { emptyContent } from 'app/redux/EmptyState';\nimport * as globalActions from './GlobalReducer';\nimport reducer, { defaultState } from './GlobalReducer';\n\nconst expectedStats = Map({\n    isNsfw: false,\n    hide: false,\n    hasPendingPayout: false,\n    gray: false,\n    flagWeight: 0,\n    up_votes: 0,\n    total_votes: 0,\n    authorRepLog10: undefined,\n    allowDelete: true,\n});\n\ndescribe('Global reducer', () => {\n    it('should provide a nice initial state', () => {\n        const initial = reducer();\n        expect(initial).toEqual(defaultState);\n    });\n    it('should return correct state for a SET_COLLAPSED action', () => {\n        // Arrange\n        const payload = {\n            post: 'the city',\n            collapsed: 'is now collapsed',\n        };\n        const initial = reducer().set(\n            'content',\n            Map({\n                [payload.post]: Map({}),\n            })\n        );\n        // Act\n        const actual = reducer(initial, globalActions.setCollapsed(payload));\n        // Assert\n        expect(actual.getIn(['content', payload.post, 'collapsed'])).toEqual(\n            payload.collapsed\n        );\n    });\n    it('should return correct state for a RECEIVE_STATE action', () => {\n        // Arrange\n        const payload = {\n            content: Map({ barman: Map({ foo: 'choo', stats: '' }) }),\n        };\n        const initial = reducer();\n        // Act\n        const actual = reducer(initial, globalActions.receiveState(payload));\n        // Assert\n        expect(actual.getIn(['content', 'barman', 'foo'])).toEqual('choo');\n        expect(actual.getIn(['content', 'barman', 'stats'])).toEqual(\n            expectedStats\n        );\n    });\n\n    it('should return correct state for a RECEIVE_ACCOUNT action', () => {\n        // Arrange\n        const payload = {\n            account: {\n                name: 'foo',\n                witness_votes: 99,\n                beList: ['alice', 'bob', 'claire'],\n                beOrderedMap: { foo: 'barman' },\n            },\n        };\n        const initial = reducer();\n        const expected = Map({\n            status: {},\n            accounts: Map({\n                foo: Map({\n                    name: 'foo',\n                    witness_votes: 99,\n                    be_List: List(['alice', 'bob', 'claire']),\n                    be_orderedMap: OrderedMap({ foo: 'barman' }),\n                }),\n            }),\n        });\n        // Act\n        const actual = reducer(initial, globalActions.receiveAccount(payload));\n        // Assert\n        expect(\n            actual.getIn(['accounts', payload.account.name, 'name'])\n        ).toEqual(payload.account.name);\n        expect(\n            actual.getIn(['accounts', payload.account.name, 'beList'])\n        ).toEqual(List(payload.account.beList));\n        expect(\n            actual.getIn(['accounts', payload.account.name, 'beOrderedMap'])\n        ).toEqual(OrderedMap(payload.account.beOrderedMap));\n    });\n\n    it('should return correct state for a RECEIVE_ACCOUNTS action', () => {\n        // Arrange\n        const payload = {\n            accounts: [\n                {\n                    name: 'foo',\n                    witness_votes: 99,\n                    beList: ['alice', 'bob', 'claire'],\n                    beorderedMap: { foo: 'barman' },\n                },\n                {\n                    name: 'bar',\n                    witness_votes: 12,\n                    beList: ['james', 'billy', 'samantha'],\n                    beOrderedMap: { kewl: 'snoop' },\n                },\n            ],\n        };\n\n        const initState = Map({\n            status: {},\n            seagull: Map({ result: 'fulmar', error: 'stuka' }),\n            accounts: Map({\n                sergei: Map({\n                    name: 'sergei',\n                    witness_votes: 666,\n                    beList: List(['foo', 'carl', 'hanna']),\n                    beorderedMap: OrderedMap({ foo: 'cramps' }),\n                }),\n            }),\n        });\n\n        const initial = reducer(initState);\n\n        const expected = Map({\n            status: {},\n            accounts: Map({\n                sergei: Map({\n                    name: 'sergei',\n                    witness_votes: 666,\n                    beList: List(['foo', 'carl', 'hanna']),\n                    beorderedMap: OrderedMap({\n                        foo: 'cramps',\n                    }),\n                }),\n                foo: Map({\n                    name: 'foo',\n                    witness_votes: 99,\n                    beList: List(['alice', 'bob', 'claire']),\n                    beorderedMap: OrderedMap({ foo: 'barman' }),\n                }),\n                bar: Map({\n                    name: 'bar',\n                    witness_votes: 12,\n                    beList: List(['james', 'billy', 'samantha']),\n                    beOrderedMap: OrderedMap({ kewl: 'snoop' }),\n                }),\n            }),\n        });\n        // Act\n        const actual = reducer(initial, globalActions.receiveAccounts(payload));\n        // Assert\n        expect(actual.get('accounts')).toEqual(expected.get('accounts'));\n    });\n\n    it('should return correct state for a RECEIVE_COMMENT action', () => {\n        // Arrange\n        const payload = {\n            op: {\n                author: 'critic',\n                permlink: 'critical-comment',\n                parent_author: 'Yerofeyev',\n                parent_permlink: 'moscow-stations',\n                title: 'moscow to the end of the line',\n                body: 'corpus of the text',\n            },\n        };\n        const {\n            author,\n            permlink,\n            parent_author,\n            parent_permlink,\n            title,\n            body,\n        } = payload.op;\n        //Act\n        const actual = reducer(\n            reducer(),\n            globalActions.receiveComment(payload)\n        );\n        //  Assert\n        expect(\n            actual.getIn(['content', `${author}/${permlink}`, 'author'])\n        ).toEqual(author);\n        expect(\n            actual.getIn(['content', `${author}/${permlink}`, 'title'])\n        ).toEqual(title);\n        expect(\n            actual.getIn(['content', `${parent_author}/${parent_permlink}`])\n        ).toEqual(\n            Map({ replies: List(['critic/critical-comment']), children: 1 })\n        );\n        // Arrange\n        payload.op.parent_author = '';\n        // Act\n        const actual2 = reducer(\n            reducer(),\n            globalActions.receiveComment(payload)\n        );\n        // Assert\n        expect(\n            actual2.getIn(['content', `${parent_author}/${parent_permlink}`])\n        ).toEqual(undefined);\n    });\n    it('should return correct state for a RECEIVE_CONTENT action', () => {\n        // Arrange\n        const payload = {\n            content: {\n                author: 'sebald',\n                permlink: 'rings-of-saturn',\n                active_votes: { one: { percent: 30 }, two: { percent: 70 } },\n            },\n        };\n        const { author, permlink, active_votes } = payload.content;\n        // Act\n        const actual = reducer(\n            reducer(),\n            globalActions.receiveContent(payload)\n        );\n        // Assert\n        expect(\n            actual.getIn(['content', `${author}/${permlink}`, 'author'])\n        ).toEqual(payload.content.author);\n        expect(\n            actual.getIn(['content', `${author}/${permlink}`, 'permlink'])\n        ).toEqual(payload.content.permlink);\n        expect(\n            actual.getIn(['content', `${author}/${permlink}`, 'active_votes'])\n        ).toEqual(fromJS(active_votes));\n    });\n\n    it('should return correct state for a LINK_REPLY action', () => {\n        // Arrange\n        let payload = {\n            author: 'critic',\n            permlink: 'critical-comment',\n            parent_author: 'Yerofeyev',\n            parent_permlink: 'moscow-stations',\n            title: 'moscow to the end of the line',\n            body: 'corpus of the text',\n        };\n        const initial = reducer();\n        const expected = Map({\n            [payload.parent_author + '/' + payload.parent_permlink]: Map({\n                replies: List([`${payload.author}/${payload.permlink}`]),\n                children: 1,\n            }),\n        });\n        // Act\n        let actual = reducer(initial, globalActions.linkReply(payload));\n        // Assert\n        expect(actual.get('content')).toEqual(expected);\n        // Arrange\n        // Remove parent\n        payload.parent_author = '';\n        // Act\n        actual = reducer(initial, globalActions.linkReply(payload));\n        // Assert\n        expect(actual).toEqual(initial);\n    });\n    it('should return correct state for a UPDATE_ACCOUNT_WITNESS_VOTE action', () => {\n        // Arrange\n        let payload = {\n            account: 'Smee',\n            witness: 'Greech',\n            approve: true,\n        };\n        const initial = reducer();\n        // Act\n        let actual = reducer(\n            initial,\n            globalActions.updateAccountWitnessVote(payload)\n        );\n        // Assert\n        expect(\n            actual.getIn(['accounts', payload.account, 'witness_votes'])\n        ).toEqual(Set([payload.witness]));\n        // Arrange\n        payload.approve = false;\n        // Act\n        actual = reducer(\n            initial,\n            globalActions.updateAccountWitnessVote(payload)\n        );\n        // Assert\n        expect(actual).toEqual(initial);\n    });\n    it('should return correct state for a UPDATE_ACCOUNT_WITNESS_PROXY action', () => {\n        // Arrange\n        let payload = {\n            account: 'Alice',\n            proxy: 'Jane',\n        };\n        const initial = reducer();\n        const expected = Map({ proxy: payload.proxy });\n        // Act\n        const actual = reducer(\n            initial,\n            globalActions.updateAccountWitnessProxy(payload)\n        );\n        // Assert\n        expect(actual.getIn(['accounts', payload.account])).toEqual(expected);\n    });\n    it('should return correct state for a DELETE_CONTENT action', () => {\n        // Arrange\n        let payload = {\n            author: 'sebald',\n            permlink: 'rings-of-saturn',\n        };\n        let initial = reducer();\n        // Act\n        // add content\n        const initWithContent = initial.setIn(\n            ['content', `${payload.author}/${payload.permlink}`],\n            Map({\n                author: 'sebald',\n                permlink: 'rings-of-saturn',\n                parent_author: '',\n                active_votes: { one: { percent: 30 }, two: { percent: 70 } },\n                replies: List(['cool', 'mule']),\n            })\n        );\n        let expected = Map({});\n        // Act\n        let actual = reducer(\n            initWithContent,\n            globalActions.deleteContent(payload)\n        );\n        // Assert\n        expect(actual.get('content')).toEqual(expected);\n        // Arrange\n        const initWithContentAndParent = initial.setIn(\n            ['content', `${payload.author}/${payload.permlink}`],\n            Map({\n                author: 'sebald',\n                permlink: 'rings-of-saturn',\n                parent_author: 'alice',\n                parent_permlink: 'bob',\n                active_votes: { one: { percent: 30 }, two: { percent: 70 } },\n            })\n        );\n        const initWithParentKeyContent = initWithContentAndParent.setIn(\n            ['content', 'alice/bob'],\n            Map({\n                replies: [\n                    `${payload.author}/${payload.permlink}`,\n                    'dorothy-hughes/in-a-lonely-place',\n                    'artichoke/hearts',\n                ],\n            })\n        );\n        expected = Map({\n            replies: ['dorothy-hughes/in-a-lonely-place', 'artichoke/hearts'],\n        });\n        // Act\n        actual = reducer(\n            initWithParentKeyContent,\n            globalActions.deleteContent(payload)\n        );\n        // Assert\n        expect(actual.getIn(['content', 'alice/bob', 'replies'])).toHaveLength(\n            2\n        );\n        expect(actual.getIn(['content', 'alice/bob', 'replies'])).toEqual([\n            'dorothy-hughes/in-a-lonely-place',\n            'artichoke/hearts',\n        ]);\n    });\n    it('should return correct state for a FETCHING_DATA action', () => {\n        // Arrange\n        const payload = {\n            order: 'cheeseburger',\n            category: 'life',\n        };\n        const initWithCategory = reducer().set(\n            'status',\n            Map({\n                [payload.category]: Map({\n                    [payload.order]: { fetching: false },\n                }),\n            })\n        );\n        // Act\n        const actual = reducer(\n            initWithCategory,\n            globalActions.fetchingData(payload)\n        );\n        // Assert\n        expect(\n            actual.getIn(['status', payload.category, payload.order])\n        ).toEqual({ fetching: true });\n    });\n    it('should return correct state for a RECEIVE_DATA action', () => {\n        //Arrange\n        const postData = {\n            author: 'smudge',\n            permlink: 'klop',\n            active_votes: {\n                one: { percent: 30 },\n                two: { percent: 70 },\n            },\n        };\n        let payload = {\n            data: [postData],\n            order: 'by_author',\n            category: 'blog',\n            accountname: 'alice',\n        };\n        const initWithData = reducer().merge({\n            accounts: Map({\n                [payload.accountname]: Map({\n                    [payload.category]: List([\n                        { data: { author: 'farm', permlink: 'barn' } },\n                    ]),\n                }),\n            }),\n            content: Map({}),\n            status: Map({\n                [payload.category]: Map({\n                    [payload.order]: {},\n                }),\n            }),\n            discussion_idx: Map({\n                [payload.category]: Map({\n                    UnusualOrder: List([\n                        { data: { author: 'ship', permlink: 'bridge' } },\n                    ]),\n                }),\n                '': Map({\n                    FebrileFriday: List([]),\n                }),\n            }),\n        });\n\n        //Act\n        const actual1 = reducer(\n            initWithData,\n            globalActions.receiveData(payload)\n        );\n\n        const postKey = `${postData.author}/${postData.permlink}`;\n\n        //Assert\n        expect(actual1.getIn(['content', postKey, 'author'])).toEqual(\n            postData.author\n        );\n        expect(actual1.getIn(['content', postKey, 'permlink'])).toEqual(\n            postData.permlink\n        );\n        expect(actual1.getIn(['content', postKey, 'active_votes'])).toEqual(\n            fromJS(postData.active_votes)\n        );\n        expect(\n            actual1.getIn(['content', postKey, 'stats', 'allowDelete'])\n        ).toEqual(false);\n\n        // Push new key to posts list, If order meets the condition.\n        expect(\n            actual1.getIn(['accounts', payload.accountname, payload.category])\n        ).toEqual(\n            List([\n                { data: { author: 'farm', permlink: 'barn' } },\n                'smudge/klop',\n            ])\n        );\n\n        // Arrange\n        payload.order = 'UnusualOrder';\n        //Act.\n        // Push new key to discussion_idx list, If order does not meet the condition.\n        const actual2 = reducer(\n            initWithData,\n            globalActions.receiveData(payload)\n        );\n\n        // Assert\n        expect(\n            actual2.getIn(['discussion_idx', payload.category, payload.order])\n        ).toEqual(\n            List([\n                { data: { author: 'ship', permlink: 'bridge' } },\n                'smudge/klop',\n            ])\n        );\n        // Arrange\n        // handle falsey payload category by setting empty string at keypath location typically occupied by category.\n        payload.order = 'FebrileFriday';\n        payload.category = '';\n        // Act\n        const actual3 = reducer(\n            initWithData,\n            globalActions.receiveData(payload)\n        );\n        // Assert.\n        expect(actual3.getIn(['discussion_idx', '', payload.order])).toEqual(\n            List(['smudge/klop'])\n        );\n    });\n    it('should handle fetch status for a RECEIVE_DATA action', () => {\n        //Arrange\n        let payload = {\n            data: [],\n            order: 'by_author',\n            category: 'blog',\n            accountname: 'alice',\n        };\n        const initWithData = reducer().merge({\n            accounts: Map({\n                [payload.accountname]: Map({\n                    [payload.category]: List([]),\n                }),\n            }),\n            content: Map({}),\n            status: Map({\n                [payload.category]: Map({\n                    [payload.order]: {},\n                }),\n            }),\n            discussion_idx: Map({\n                [payload.category]: Map({\n                    UnusualOrder: List([\n                        { data: { author: 'ship', permlink: 'bridge' } },\n                    ]),\n                }),\n                '': Map({\n                    FebrileFriday: List([]),\n                }),\n            }),\n        });\n\n        //Act\n        const actual1 = reducer(\n            initWithData,\n            globalActions.receiveData(payload)\n        );\n\n        //Assert\n        expect(\n            actual1.getIn(['status', payload.category, payload.order]).fetching\n        ).toBeFalsy();\n        expect(\n            actual1.getIn(['status', payload.category, payload.order])\n                .last_fetch\n        ).toBeFalsy();\n\n        // Arrange\n        payload.fetching = true;\n        //Act.\n        const actual2 = reducer(\n            initWithData,\n            globalActions.receiveData(payload)\n        );\n\n        // Assert\n        expect(\n            actual2.getIn(['status', payload.category, payload.order]).fetching\n        ).toBeTruthy();\n        expect(\n            actual2.getIn(['status', payload.category, payload.order])\n                .last_fetch\n        ).toBeFalsy();\n\n        // Arrange\n        payload.endOfData = true;\n        // Act\n        const actual3 = reducer(\n            initWithData,\n            globalActions.receiveData(payload)\n        );\n        // Assert.\n        expect(\n            actual3.getIn(['status', payload.category, payload.order]).fetching\n        ).toBeTruthy();\n        expect(\n            actual3.getIn(['status', payload.category, payload.order])\n                .last_fetch\n        ).toBeTruthy();\n\n        // Arrange\n        payload.fetching = false;\n        // Act\n        const actual4 = reducer(\n            initWithData,\n            globalActions.receiveData(payload)\n        );\n        // Assert.\n        expect(\n            actual4.getIn(['status', payload.category, payload.order]).fetching\n        ).toBeFalsy();\n        expect(\n            actual4.getIn(['status', payload.category, payload.order])\n                .last_fetch\n        ).toBeTruthy();\n    });\n    it('should return correct state for a RECEIVE_RECENT_POSTS action', () => {\n        // Arrange\n        const payload = {\n            data: [\n                {\n                    author: 'pidge',\n                    permlink: 'wolf',\n                    active_votes: {\n                        one: { percent: 60 },\n                        two: { percent: 30 },\n                    },\n                    stats: {},\n                },\n                {\n                    author: 'ding',\n                    permlink: 'bat',\n                    active_votes: {\n                        one: { percent: 60 },\n                        two: { percent: 30 },\n                    },\n                    stats: {},\n                },\n            ],\n        };\n        const initial = reducer();\n        const initWithData = reducer()\n            .setIn(['discussion_idx', '', 'created'], List([]))\n            .set('content', Map({}));\n        // Act\n        const actual = reducer(\n            initWithData,\n            globalActions.receiveRecentPosts(payload)\n        );\n        // Assert\n        // It adds recent posts to discussion_idx\n        expect(actual.getIn(['discussion_idx', '', 'created'])).toEqual(\n            List([\n                `${payload.data[1].author}/${payload.data[1].permlink}`,\n                `${payload.data[0].author}/${payload.data[0].permlink}`,\n            ])\n        );\n        // It adds recent posts to content\n        expect(\n            actual.getIn([\n                'content',\n                `${payload.data[0].author}/${payload.data[0].permlink}`,\n                'author',\n            ])\n        ).toEqual(payload.data[0].author);\n        expect(\n            actual.getIn([\n                'content',\n                `${payload.data[0].author}/${payload.data[0].permlink}`,\n                'stats',\n            ])\n        ).toEqual(\n            Map({\n                isNsfw: false,\n                hide: false,\n                hasPendingPayout: false,\n                gray: false,\n                flagWeight: 0,\n                up_votes: 2,\n                total_votes: 2,\n                authorRepLog10: undefined,\n                allowDelete: false,\n            })\n        );\n\n        // Act\n        // If the recent post is already in the list do not add it again.\n        const actual2 = reducer(\n            actual,\n            globalActions.receiveRecentPosts(payload)\n        );\n        // Assert\n        expect(actual.getIn(['discussion_idx', '', 'created'])).toEqual(\n            List(['ding/bat', 'pidge/wolf'])\n        );\n    });\n    it('should return correct state for a REQUEST_META action', () => {\n        // Arrange\n        const payload = {\n            id: 'Hello',\n            link: 'World',\n        };\n        // Act\n        const actual = reducer(reducer(), globalActions.requestMeta(payload));\n        // Assert\n        expect(actual.getIn(['metaLinkData', `${payload.id}`])).toEqual(\n            Map({ link: 'World' })\n        );\n    });\n    it('should return correct state for a RECEIVE_META action', () => {\n        // Arrange\n        const payload = {\n            id: 'Hello',\n            meta: { link: 'spalunking' },\n        };\n        const initial = reducer();\n        const initialWithData = initial.setIn(\n            ['metaLinkData', payload.id],\n            Map({})\n        );\n        // Act\n        const actual = reducer(\n            initialWithData,\n            globalActions.receiveMeta(payload)\n        );\n        // Assert\n        expect(actual.getIn(['metaLinkData', payload.id])).toEqual(\n            Map({ link: 'spalunking' })\n        );\n    });\n\n    it('should return correct state for a SET action', () => {\n        // Arrange\n        let payload = {\n            key: ['europe', 'east', 'soup'],\n            value: 'borscht',\n        };\n        const initial = reducer();\n        // Act\n        const actual = reducer(initial, globalActions.set(payload));\n        // Assert\n        expect(actual.getIn(payload.key)).toEqual(payload.value);\n        // Arrange\n        // Make the key a non-array.\n        payload = {\n            key: 'hello',\n            value: 'world',\n        };\n        // Assert\n        const actual2 = reducer(initial, globalActions.set(payload));\n        expect(actual2.getIn([payload.key])).toEqual(payload.value);\n    });\n    it('should return correct state for a REMOVE action', () => {\n        // Arrange\n        const payload = {\n            key: ['europe', 'east', 'soup'],\n        };\n        const initial = reducer();\n        initial.setIn(payload.key, 'potato');\n        // Act\n        const actual = reducer(initial, globalActions.remove(payload));\n        // Assert\n        expect(actual.getIn(payload.key)).toEqual(undefined);\n    });\n\n    it('should return correct state for a UPDATE action', () => {\n        // Arrange\n        const payload = {\n            key: ['oak'],\n            updater: () => 'acorn',\n        };\n        const initial = reducer();\n        initial.setIn(payload.key, 'acorn');\n        // Act\n        const actual = reducer(initial, globalActions.update(payload));\n        // Assert\n        expect(actual.getIn(payload.key)).toEqual(payload.updater());\n    });\n\n    it('should return correct state for a SET_META_DATA action', () => {\n        // Arrange\n        const payload = {\n            id: 'pear',\n            meta: { flip: 'flop' },\n        };\n        const initial = reducer();\n        // Act\n        const actual = reducer(initial, globalActions.setMetaData(payload));\n        // Assert\n        expect(actual.getIn(['metaLinkData', payload.id])).toEqual(\n            fromJS(payload.meta)\n        );\n    });\n\n    it('should return correct state for a CLEAR_META action', () => {\n        // Arrange\n        const initial = reducer().set(\n            'metaLinkData',\n            Map({ deleteMe: { erase: 'me' } })\n        );\n        // Act\n        const actual = reducer(\n            initial,\n            globalActions.clearMeta({ id: 'deleteMe' })\n        );\n        // Assert\n        expect(actual.get('metaLinkData')).toEqual(Map({}));\n    });\n\n    it('should return correct state for a CLEAR_META_ELEMENT action', () => {\n        // Arrange\n        const payload = {\n            id: 'pear',\n            meta: { flip: 'flop' },\n        };\n\n        const clearPayload = {\n            formId: 'pear',\n            element: 'flip',\n        };\n        const initial = reducer(initial, globalActions.setMetaData(payload));\n        // Act\n        const actual = reducer(\n            initial,\n            globalActions.clearMetaElement(clearPayload)\n        );\n        // Assert\n        expect(actual.get('metaLinkData')).toEqual(Map({ pear: Map({}) }));\n    });\n\n    it('should return correct state for a FETCH_JSON action', () => {\n        const initial = reducer();\n        const actual = reducer(initial, globalActions.fetchJson(defaultState));\n        expect(initial).toEqual(actual);\n    });\n\n    it('should return correct state for a FETCH_JSON_RESULT action', () => {\n        const payload = {\n            id: 'seagull',\n            result: 'fulmar',\n            error: 'stuka',\n        };\n        const initial = reducer();\n        const actual = reducer(initial, globalActions.fetchJsonResult(payload));\n        expect(actual).toEqual(\n            Map({\n                status: {},\n                seagull: Map({ result: 'fulmar', error: 'stuka' }),\n            })\n        );\n    });\n\n    it('should return correct state for a SHOW_DIALOG action', () => {\n        const payload = {\n            name: 'Iris',\n            params: { cheap: 'seats' },\n        };\n        const initial = reducer().set(\n            'active_dialogs',\n            Map({ chimney: 'smoke' })\n        );\n        const actual = reducer(initial, globalActions.showDialog(payload));\n        expect(actual.get('active_dialogs')).toEqual(\n            Map({\n                chimney: 'smoke',\n                Iris: Map({ params: Map({ cheap: 'seats' }) }),\n            })\n        );\n    });\n\n    it('should return correct state for a HIDE_DIALOG action', () => {\n        const payload = { name: 'dolphin' };\n        const initial = reducer().set(\n            'active_dialogs',\n            Map({ [payload.name]: 'flipper' })\n        );\n        const actual = reducer(initial, globalActions.hideDialog(payload));\n        expect(actual.get('active_dialogs')).toEqual(Map({}));\n    });\n});\n"]}