{"version":3,"sources":["../../../src/app/redux/AuthSaga.js"],"names":["accountAuthLookup","threshold","findSigningKey","userActions","authorityLookup","authStr","postingOps","trim","split","authWatches","payload","account","private_keys","login_owner_pubkey","state","user","stateUser","keys","getIn","has","toPub","k","toPublicKey","toString","posting","get","active","memo","pubkeys","authority","authType","auth","owner","accountName","pub_keys_used","setAuthority","recurse","t","r","size","pubkeyThreshold","account_auths","aaNames","map","v","api","getAccountsAsync","aaAccounts","aaThreshes","i","aaAccount","aaThresh","available","key_auths","forEach","opType","username","password","authTypes","currentUser","currentUsername","indexOf","getAccount","Error","private_key","PrivateKey","fromWif","e","fromSeed","pubkey"],"mappings":"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","file":"AuthSaga.js","sourcesContent":["import { call, put, select, takeEvery } from 'redux-saga/effects';\nimport { Set, Map, fromJS, List } from 'immutable';\nimport { api } from '@steemit/steem-js';\nimport { PrivateKey } from '@steemit/steem-js/lib/auth/ecc';\n\nimport { getAccount } from 'app/redux/SagaShared';\nimport * as userActions from 'app/redux/UserReducer';\n\n// operations that require only posting authority\nconst postingOps = Set(\n    `vote, comment, delete_comment, custom_json, claim_reward_balance`\n        .trim()\n        .split(/,\\s*/)\n);\n\nexport const authWatches = [\n    takeEvery('user/ACCOUNT_AUTH_LOOKUP', accountAuthLookup),\n];\n\nexport function* accountAuthLookup({\n    payload: { account, private_keys, login_owner_pubkey },\n}) {\n    account = fromJS(account);\n    private_keys = fromJS(private_keys);\n    // console.log('accountAuthLookup', account.name)\n    const stateUser = yield select(state => state.user);\n    let keys;\n    if (private_keys) keys = private_keys;\n    else keys = stateUser.getIn(['current', 'private_keys']);\n\n    if (!keys || !keys.has('posting_private')) return;\n    const toPub = k => (k ? k.toPublicKey().toString() : '-');\n    const posting = keys.get('posting_private');\n    const active = keys.get('active_private');\n    const memo = keys.get('memo_private');\n    const auth = {\n        posting: posting\n            ? yield authorityLookup({\n                  pubkeys: Set([toPub(posting)]),\n                  authority: account.get('posting'),\n                  authType: 'posting',\n              })\n            : 'none',\n        active: active\n            ? yield authorityLookup({\n                  pubkeys: Set([toPub(active)]),\n                  authority: account.get('active'),\n                  authType: 'active',\n              })\n            : 'none',\n        owner: 'none',\n        memo: account.get('memo_key') === toPub(memo) ? 'full' : 'none',\n    };\n    const accountName = account.get('name');\n    const pub_keys_used = {\n        posting: toPub(posting),\n        active: toPub(active),\n        owner: login_owner_pubkey,\n    };\n    yield put(userActions.setAuthority({ accountName, auth, pub_keys_used }));\n}\n\n/**\n    @arg {object} data\n    @arg {object} data.authority Immutable Map blockchain authority\n    @arg {object} data.pubkeys Immutable Set public key strings\n    @return {string} full, partial, none\n*/\nfunction* authorityLookup({ pubkeys, authority, authType }) {\n    return yield call(authStr, { pubkeys, authority, authType });\n}\n\nfunction* authStr({ pubkeys, authority, authType, recurse = 1 }) {\n    const t = yield call(threshold, { pubkeys, authority, authType, recurse });\n    const r = authority.get('weight_threshold');\n    return t >= r ? 'full' : t > 0 ? 'partial' : 'none';\n}\n\nexport function* threshold({ pubkeys, authority, authType, recurse = 1 }) {\n    if (!pubkeys.size) return 0;\n    let t = pubkeyThreshold({ pubkeys, authority });\n    const account_auths = authority.get('account_auths');\n    const aaNames = account_auths.map(v => v.get(0), List());\n    if (aaNames.size) {\n        const aaAccounts = yield api.getAccountsAsync(aaNames);\n        const aaThreshes = account_auths.map(v => v.get(1), List());\n        for (let i = 0; i < aaAccounts.size; i++) {\n            const aaAccount = aaAccounts.get(i);\n            t += pubkeyThreshold({\n                authority: aaAccount.get(authType),\n                pubkeys,\n            });\n            if (recurse <= 2) {\n                const auth = yield call(authStr, {\n                    authority: aaAccount,\n                    pubkeys,\n                    recurse: ++recurse,\n                });\n                if (auth === 'full') {\n                    const aaThresh = aaThreshes.get(i);\n                    t += aaThresh;\n                }\n            }\n        }\n    }\n    return t;\n}\n\nfunction pubkeyThreshold({ pubkeys, authority }) {\n    let available = 0;\n    const key_auths = authority.get('key_auths');\n    key_auths.forEach(k => {\n        if (pubkeys.has(k.get(0))) {\n            available += k.get(1);\n        }\n    });\n    return available;\n}\n\nexport function* findSigningKey({ opType, username, password }) {\n    let authTypes;\n    if (postingOps.has(opType)) authTypes = 'posting, active';\n    else authTypes = 'active, owner';\n    authTypes = authTypes.split(', ');\n\n    const currentUser = yield select(state => state.user.get('current'));\n    const currentUsername = currentUser && currentUser.get('username');\n\n    username = username || currentUsername;\n    if (!username) return null;\n\n    if (username.indexOf('/') > -1) {\n        // \"alice/active\" will login only with Alices active key\n        username = username.split('/')[0];\n    }\n\n    const private_keys =\n        currentUsername === username ? currentUser.get('private_keys') : Map();\n\n    const account = yield call(getAccount, username);\n    if (!account) throw new Error('Account not found');\n\n    for (const authType of authTypes) {\n        let private_key;\n        if (password) {\n            try {\n                private_key = PrivateKey.fromWif(password);\n            } catch (e) {\n                private_key = PrivateKey.fromSeed(\n                    username + authType + password\n                );\n            }\n        } else {\n            if (private_keys)\n                private_key = private_keys.get(authType + '_private');\n        }\n        if (private_key) {\n            const pubkey = private_key.toPublicKey().toString();\n            const pubkeys = Set([pubkey]);\n            const authority = account.get(authType);\n            const auth = yield call(authorityLookup, {\n                pubkeys,\n                authority,\n                authType,\n            });\n            if (auth === 'full') return private_key;\n        }\n    }\n    return null;\n}\n\n// function isPostingOnlyKey(pubkey, account) {\n//     // TODO Support account auths\n//     // yield put(g.actions.authLookup({account, pubkeys: pubkey})\n//     // authorityLookup({pubkeys, authority: Map(account.posting), authType: 'posting'})\n//     for (const p of account.posting.key_auths) {\n//         if (pubkey === p[0]) {\n//             if (account.active.account_auths.length || account.owner.account_auths.length) {\n//                 console.log('UserSaga, skipping save password, account_auths are not yet supported.')\n//                 return false\n//             }\n//             for (const a of account.active.key_auths)\n//                 if (pubkey === a[0]) return false\n//             for (const a of account.owner.key_auths)\n//                 if (pubkey === a[0]) return false\n//             return true\n//         }\n//     }\n//     return false\n// }\n"]}