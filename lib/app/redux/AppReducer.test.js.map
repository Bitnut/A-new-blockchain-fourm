{"version":3,"sources":["../../../src/app/redux/AppReducer.test.js"],"names":["mockPayloads","addNotification","key","removeNotification","pathname","cat","dog","mockActions","LOCATION_CHANGE","type","payload","mockNotification","action","dismissAfter","describe","it","initial","expect","toBe","defaultState","actual","out","get","toEqual","getIn","initialWithNotification","set","expected","setUserPreferences","before","after","test","withFlags","flying","withMoreFlags","swimming","selectors","getFeatureFlag"],"mappings":"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","file":"AppReducer.test.js","sourcesContent":["import { Map, OrderedMap, getIn } from 'immutable';\n\nimport reducer, {\n    defaultState,\n    steemApiError,\n    fetchDataBegin,\n    fetchDataEnd,\n    addNotification,\n    removeNotification,\n    setUserPreferences,\n    receiveFeatureFlags,\n    selectors,\n    toggleNightmode,\n    toggleBlogmode,\n} from './AppReducer';\n\nconst mockPayloads = {\n    addNotification: {\n        key: 'testKey',\n    },\n    removeNotification: {\n        pathname: 'testPath',\n    },\n    removeNotification: {\n        key: 'testKey',\n    },\n    setUserPreferences: {\n        cat: 'mymy',\n        dog: 'polly',\n    },\n};\n\nconst mockActions = {\n    LOCATION_CHANGE: {\n        type: '@@router/LOCATION_CHANGE',\n        payload: {\n            pathname: 'testPath',\n        },\n    },\n};\n\nconst key = mockPayloads.addNotification.key;\nconst mockNotification = OrderedMap({\n    [key]: {\n        action: 'missing translation: en.g.dismiss',\n        dismissAfter: 10000,\n        key,\n    },\n});\n\ndescribe('App reducer', () => {\n    it('should provide a nice initial state', () => {\n        const initial = reducer();\n        expect(initial).toBe(defaultState);\n    });\n    it('should return correct state for a LOCATION_CHANGE action', () => {\n        const initial = reducer();\n        const actual = reducer(initial, mockActions['LOCATION_CHANGE']);\n        const out = actual.get('location');\n        expect(out.pathname).toEqual(\n            mockActions['LOCATION_CHANGE'].payload.pathname\n        );\n    });\n    it('should return correct state for a STEEM_API_ERROR action', () => {\n        const initial = reducer();\n        const out = reducer(initial, steemApiError());\n        expect(out).toEqual(initial);\n    });\n    it('should return correct state for a FETCH_DATA_BEGIN action', () => {\n        const initial = reducer();\n        const actual = reducer(initial, fetchDataBegin());\n        const out = actual.get('loading');\n        expect(out).toEqual(true);\n    });\n    it('should return correct state for a FETCH_DATA_END action', () => {\n        const initial = reducer();\n        const actual = reducer(initial, fetchDataEnd());\n        const out = actual.get('loading');\n        expect(out).toEqual(false);\n    });\n    it('should return correct state for a ADD_NOTIFICATION action', () => {\n        const initial = reducer();\n        const actual = reducer(\n            initial,\n            addNotification(mockPayloads.addNotification)\n        );\n        const out = actual.getIn(['notifications', key]);\n        expect(out).toEqual(mockNotification.get(key));\n    });\n    it('should return correct state for a REMOVE_NOTIFICATION action', () => {\n        const initial = reducer();\n        const initialWithNotification = initial.set(\n            'notifications',\n            mockNotification\n        );\n        const actual = reducer(\n            initialWithNotification,\n            removeNotification(mockPayloads.removeNotification)\n        );\n        const out = actual.get('notifications');\n        const expected = OrderedMap();\n        expect(out).toEqual(expected);\n    });\n    it('should return correct state for a SET_USER_PREFERENCES action', () => {\n        const initial = reducer();\n        let actual = reducer(\n            initial,\n            setUserPreferences(mockPayloads.setUserPreferences)\n        );\n        let out = actual.get('user_preferences');\n        let expected = Map({ cat: 'mymy', dog: 'polly' });\n        expect(out).toEqual(expected);\n    });\n    it('should return correct state for a TOGGLE_NIGHTMODE action', () => {\n        const initial = reducer();\n        const before = initial.getIn(['user_preferences', 'nightmode']);\n        let actual = reducer(initial, toggleNightmode());\n        const after = actual.getIn(['user_preferences', 'nightmode']);\n        expect(after).toEqual(!before);\n    });\n    it('should return correct state for a TOGGLE_BLOGMODE action', () => {\n        const initial = reducer();\n        const before = initial.getIn(['user_preferences', 'blogmode']);\n        let actual = reducer(initial, toggleBlogmode());\n        const after = actual.getIn(['user_preferences', 'blogmode']);\n        expect(after).toEqual(!before);\n    });\n    test('should merge in received feature flags', () => {\n        // Arrange\n        const initial = reducer();\n\n        // Act\n        const withFlags = reducer(\n            initial,\n            receiveFeatureFlags({\n                flying: true,\n            })\n        );\n        const withMoreFlags = reducer(\n            withFlags,\n            receiveFeatureFlags({\n                swimming: false,\n            })\n        );\n\n        // Assert\n        expect(selectors.getFeatureFlag(withMoreFlags, 'swimming')).toEqual(\n            false\n        );\n        expect(selectors.getFeatureFlag(withMoreFlags, 'flying')).toEqual(true);\n        expect(selectors.getFeatureFlag(withMoreFlags, 'dancing')).toEqual(\n            false\n        );\n    });\n});\n"]}